<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netDxf</name>
    </assembly>
    <members>
        <member name="T:netDxf.AciColor">
            <summary>
            Represents an ACI color (AutoCAD Color Index) that also supports true color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.DarkGray">
            <summary>
            Defines a default dark gray color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.LightGray">
            <summary>
            Defines a default light gray color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.IndexRgb">
            <summary>
            A list that contains the indexed colors, the key represents the color index and the value the RGB components of the color.
            </summary>
            <remarks>
            This is the AutoCad default ACI color index to RGB values table.
            Changes in the actual view background color in AutoCad might produce changes in the RGB equivalents in some ACI color indexes,
            specially the darkest ones.<br />
            The color at index zero is not used, represents the RGB values for abstract colors such as ByLayer or ByBlock
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class with black/white color index 7.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class from an array of three values.
            </summary>
            <param name="rgb">RGB components (input values range from 0 to 255). The array must contain three values.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component (input values range from 0 to 255).</param>
            <param name="g">Green component (input values range from 0 to 255).</param>
            <param name="b">Blue component (input values range from 0 to 255).</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class from an array of three values.
            </summary>
            <param name="rgb">RGB components (input values range from 0 to 1). The array must contain three values.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="r">Red component (input values range from 0 to 1).</param>
            <param name="g">Green component (input values range from 0 to 1).</param>
            <param name="b">Blue component (input values range from 0 to 1).</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            By default the UseTrueColor will be set to false.<br />
            Accepted color index values range from 1 to 255.<br />
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.IsByLayer">
            <summary>
            Defines if the color is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.IsByBlock">
            <summary>
            Defines if the color is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.R">
            <summary>
            Gets the red component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.G">
            <summary>
            Gets the green component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.B">
            <summary>
            Gets the blue component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.UseTrueColor">
            <summary>
            Get or set if the AciColor should use true color values.
            </summary>
            <remarks>
            By default, the constructors that use RGB values will set this boolean to true
            while the constants and the constructor that use a color index will set it to false.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 1 to 255.
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.RgbToAci(System.Byte,System.Byte,System.Byte)">
            <summary>
            Obtains the approximate color index from the RGB components.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <returns>The approximate color index from the RGB components.</returns>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(netDxf.Vector3)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hsl">A Vector3 containing the hue, saturation, and lightness components.</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hue">Hue (input values range from 0 to 1).</param>
            <param name="saturation">Saturation (input values range from 0 to 1).</param>
            <param name="lightness">Lightness (input values range from 0 to 1).</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,netDxf.Vector3@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hsl">A Vector3 containing the hue, saturation, and lightness components (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hue">Hue (output values range from 0 to 1).</param>
            <param name="saturation">Saturation (output values range from 0 to 1).</param>
            <param name="lightness">Lightness (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <returns>
            A Vector3 where the three coordinates x, y, z represents the hue, saturation, and lightness components (output values range from 0 to 1).
            </returns>
        </member>
        <member name="M:netDxf.AciColor.ToColor">
            <summary>
            Converts the AciColor to a <see cref="T:System.Drawing.Color">color</see>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents the actual AciColor.</returns>
            <remarks>
            A default color white will be used for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromColor(System.Drawing.Color)">
            <summary>
            Converts a <see cref="T:System.Drawing.Color">color</see> to an <see cref="T:System.Drawing.Color">AciColor</see>.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
        </member>
        <member name="M:netDxf.AciColor.FromCadIndex(System.Int16)">
            <summary>
            Gets the <see cref="T:netDxf.AciColor">color</see> from an index.
            </summary>
            <param name="index">A CAD indexed AciColor index.</param>
            <returns>A <see cref="T:netDxf.AciColor">color</see>.</returns>
            <remarks>
            Accepted index values range from 0 to 256. An index 0 represents a ByBlock color and an index 256 is a ByLayer color;
            any other value will return one of the 255 indexed AciColors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromTrueColor(System.Int32)">
            <summary>
            Gets the <see cref="T:netDxf.AciColor">color</see> from a 24-bit color value.
            </summary>
            <param name="value">A 32-bit color value.</param>
            <returns>A <see cref="T:netDxf.AciColor">color</see>.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToTrueColor(netDxf.AciColor)">
            <summary>
            Gets the 32-bit color value from an AciColor.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <returns>A 32-bit color value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.AciColor.Clone">
            <summary>
            Creates a new color that is a copy of the current instance.
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.AciColor.Equals(netDxf.AciColor)">
            <summary>
            Check if the components of two colors are equal.
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="T:netDxf.BezierCurve">
            <summary>
            Represent a bezier curve.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Int32)">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="controlPoints">A list of control points.</param>
            <param name="degree">Bezier curve degree.</param>
            <remarks>
            The curve degree must be equal to the number of control points minus one.
            </remarks>
        </member>
        <member name="P:netDxf.BezierCurve.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurve.Degree">
            <summary>
            Gets the bezier curve degree.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurve.CalculatePoint(System.Double)">
            <summary>
            Obtains a point along the curve at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A point along the curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurve.CalculateTangent(System.Double)">
            <summary>
            Calculates the tangent vector at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A normalized tangent vector.</returns>
        </member>
        <member name="T:netDxf.BezierCurveCubic">
            <summary>
            Represent a cubic bezier curve.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveCubic.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="controlPoints">A list of four control points.</param>
            <remarks>
            The list must contain four control points.
            The first index represents the start point or anchor,
            the second represents the first control point,
            the third the second control point,
            and the last the end point.
            </remarks>
        </member>
        <member name="M:netDxf.BezierCurveCubic.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="startPoint">Start anchor point.</param>
            <param name="firstControlPoint">First control point.</param>
            <param name="secondControlPoint">Second control point.</param>
            <param name="endPoint">End anchor point.</param>
        </member>
        <member name="P:netDxf.BezierCurveCubic.StartPoint">
            <summary>
            Gets or sets the curve start point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveCubic.FirstControlPoint">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveCubic.SecondControlPoint">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveCubic.EndPoint">
            <summary>
            Gets or sets the curve end point.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveCubic.CalculatePoint(System.Double)">
            <summary>
            Obtains a point along the curve at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A point along the curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.CalculateTangent(System.Double)">
            <summary>
            Calculates the tangent vector at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A normalized tangent vector.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.Split(System.Double)">
            <summary>
            Splits the actual bezier curve in two at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>The two curves result of dividing the actual curve at parameter t.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.Reverse">
            <summary>
            Switch the bezier curve direction.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveCubic.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the bezier curve in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the bezier curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.CreateFromFitPoints(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Generate a list of continuous cubic bezier curves that passes through a set of points.
            </summary>
            <param name="fitPoints">List of points.</param>
            <returns>A list of cubic bezier curves.</returns>
            <returns>
            Original code: https://www.codeproject.com/Articles/31859/Draw-a-Smooth-Curve-through-a-Set-of-2D-Points-wit by Oleg V. Polikarpotchkin and Peter Lee.<br />
            Modified to allow the use of 3D points, and other minor changes to accomodate the existing classes of this library.<br />
            The total number of curves returned will be equal to the number of fit points minus 1, therefore this method is not suitable to use over large number of fit points,
            where other, more computational heavy methods, like the least-squares bezier curve fitting would return a less amount of curves.
            In such cases, it is advisable to perform some method to reduce the number of points and to avoid duplicates or very close points.
            </returns>
        </member>
        <member name="M:netDxf.BezierCurveCubic.GetFirstControlPoints(System.Double[])">
            <summary>
            Solves a tri-diagonal system for one of coordinates (X, Y, or Z) of first Bezier control points.
            </summary>
            <param name="rhs">Right hand side vector.</param>
            <returns>Solution vector.</returns>
        </member>
        <member name="T:netDxf.BezierCurveQuadratic">
            <summary>
            Represent a quadratic bezier curve.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>BezierCurveQuadratic</c> class.
            </summary>
            <param name="controlPoints">A list of three control points.</param>
            <remarks>
            The list must contain three control points.
            The first index represents the start point or anchor,
            the second represents the control point,
            and the last the end point.
            </remarks>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>BezierCurve</c> class.
            </summary>
            <param name="startPoint">Start anchor point.</param>
            <param name="controlPoint">Second control point.</param>
            <param name="endPoint">End anchor point.</param>
        </member>
        <member name="P:netDxf.BezierCurveQuadratic.StartPoint">
            <summary>
            Gets or sets the curve start point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveQuadratic.ControlPoint">
            <summary>
            Gets or sets the control point.
            </summary>
        </member>
        <member name="P:netDxf.BezierCurveQuadratic.EndPoint">
            <summary>
            Gets or sets the curve end point.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.CalculatePoint(System.Double)">
            <summary>
            Obtains a point along the curve at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A point along the curve.</returns>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.CalculateTangent(System.Double)">
            <summary>
            Calculates the tangent vector at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>A normalized tangent vector.</returns>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.Split(System.Double)">
            <summary>
            Splits the actual bezier curve in two at parameter t.
            </summary>
            <param name="t">Parameter t, between 0.0 and 1.0.</param>
            <returns>The two curves result of dividing the actual curve at parameter t.</returns>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.Reverse">
            <summary>
            Switch the bezier curve direction.
            </summary>
        </member>
        <member name="M:netDxf.BezierCurveQuadratic.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the bezier curve in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the bezier curve.</returns>
        </member>
        <member name="T:netDxf.Blocks.Block">
            <summary>
            Represents a block definition.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.Block.DefaultModelSpaceName">
            <summary>
            Default ModelSpace block name.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.Block.DefaultPaperSpaceName">
            <summary>
            Default PaperSpace block name.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.ModelSpace">
            <summary>
            Gets the default *Model_Space block.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.PaperSpace">
            <summary>
            Gets the default *Paper_Space block.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class as an external reference drawing. 
            </summary>
            <param name="name">Block name.</param>
            <param name="xrefFile">External reference path name.</param>
            <remarks>Only DWG files can be used as externally referenced blocks.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Block</c> class as an external reference drawing. 
            </summary>
            <param name="name">Block name.</param>
            <param name="xrefFile">External reference path name.</param>
            <param name="overlay">Specifies if the external reference is an overlay, by default it is set to false.</param>
            <remarks>Only DWG files can be used as externally referenced blocks.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <param name="entities">The list of entities that make the block.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Collections.Generic.IEnumerable{netDxf.Entities.AttributeDefinition})">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <param name="entities">The list of entities that make the block.</param>
            <param name="attributes">The list of attribute definitions that make the block.</param>
        </member>
        <member name="P:netDxf.Blocks.Block.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>
            Table object names are case insensitive.<br />
            The internal blocks that start with "*U" or "*T" can be safely renamed.
            They are internally created to represent dynamic blocks, arrays, and tables;
            although the information of those objects is lost when importing the DXF,
            the block that represent its graphical appearance is imported.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Description">
            <summary>
            Gets or sets the block description.
            </summary>
            <remarks>
            AutoCAD has an unknown limit on the number of characters for the description when loading an external DXF,
            while, on the other hand is perfectly capable of saving a Block description that surpasses such limit.<br />
            Keep in mind that when saving a DXF prior to the AutoCad2007 version, non-ASCII characters will be encoded,
            therefore a single letter might consume more characters when saved into the DXF.<br />
            New line characters are not allowed.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Origin">
            <summary>
            Gets or sets the block origin in world coordinates, it is recommended to always keep this value to the default Vector3.Zero.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Layer">
            <summary>
            Gets or sets the block <see cref="P:netDxf.Blocks.Block.Layer">layer</see>.
            </summary>
            <remarks>It seems that the block layer is always the default "0" regardless of what is defined here, so it is pointless to change this value.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Entities">
            <summary>
            Gets the <see cref="T:netDxf.Entities.EntityObject">entity</see> list of the block.
            </summary>
            <remarks>Null entities, attribute definitions or entities already owned by another block or document cannot be added to the list.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.AttributeDefinitions">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">entity</see> list of the block.
            </summary>
            <remarks>
            Null or attribute definitions already owned by another block or document cannot be added to the list.
            Additionally Paper Space blocks do not contain attribute definitions.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Record">
            <summary>
            Gets the block record associated with this block.
            </summary>
            <remarks>It returns the same object as the owner property.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Flags">
            <summary>
            Gets the block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.XrefFile">
            <summary>
            Gets the external reference path name.
            </summary>
            <remarks>
            This property is only applicable to externally referenced blocks.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.IsXRef">
            <summary>
            Gets if the block is an external reference.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.IsForInternalUseOnly">
            <summary>
            All blocks that starts with "*" are for internal use only.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.End">
            <summary>
            Gets or sets the block end object.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.Create(netDxf.DxfDocument,System.String)">
            <summary>
            Creates a block from the content of a <see cref="T:netDxf.DxfDocument">document</see>.
            </summary>
            <param name="doc">A <see cref="T:netDxf.DxfDocument">DxfDocument</see> instance.</param>
            <param name="name">Name of the new block.</param>
            <returns>The block build from the <see cref="T:netDxf.DxfDocument">document</see> content.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String)">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>
            The name of the block will be the file name without extension, and
            only the entities contained in ModelSpace will make part of the block.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>
            The name of the block will be the file name without extension, and
            only the entities contained in ModelSpace will make part of the block.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.String)">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="name">Name of the new block.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="name">Name of the new block.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Save(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Saves a block to a text DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="version">Version of the DXF database version.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Save(System.String,netDxf.Header.DxfVersion,System.Boolean)">
            <summary>
            Saves a block to a DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="version">Version of the DXF database version.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Clone(System.String)">
            <summary>
            Creates a new Block that is a copy of the current instance.
            </summary>
            <param name="newName">Block name of the copy.</param>
            <returns>A new Block that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Clone">
            <summary>
            Creates a new Block that is a copy of the current instance.
            </summary>
            <returns>A new Block that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="T:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs">
            <summary>
            Represents the arguments thrown when an attribute definition is added ore removed from a <see cref="T:netDxf.Blocks.Block">Block</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of <c>BlockAttributeDefinitionChangeEventArgs</c>.
            </summary>
            <param name="item">The attribute definition that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs.Item">
            <summary>
            Gets the attribute definition that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockEntityChangeEventArgs">
            <summary>
            Represents the arguments thrown when an entity is added ore removed from a <see cref="T:netDxf.Blocks.Block">Block</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockEntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>BlockEntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockEntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockRecord">
            <summary>
            Represent the record of a block in the tables section.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BlockRecord</c> class.
            </summary>
            <param name="name">Block definition name.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Name">
            <summary>
            Gets the name of the block record.
            </summary>
            <remarks>
            Block record names are case insensitive.<br />
            The block which name starts with "*" are for internal purpose only.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Layout">
            <summary>
            Gets the associated Layout.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Units">
            <summary>
            Gets or sets the block insertion units.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.DefaultUnits">
            <summary>
            Gets or sets the default block units.
            </summary>
            <remarks>These are the units that all new blocks will use as default.</remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.AllowExploding">
            <summary>
            Gets or sets if the block can be exploded.
            </summary>
            <remarks>
            This property is only compatible with DXF version AutoCad2007 and upwards.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.ScaleUniformly">
            <summary>
            Gets or sets if the block must be scaled uniformly.
            </summary>
            <remarks>
            This property is only compatible with DXF version AutoCad2007 and upwards.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.IsForInternalUseOnly">
            <summary>
            Gets if the block record is for internal use only.
            </summary>
            <remarks>
            All blocks which name starts with "*" are for internal use and should not be modified.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.BlockRecord.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Blocks.BlockTypeFlags">
            <summary>
            Block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.None">
            <summary>
            Indicates none of the following flags apply.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.AnonymousBlock">
            <summary>
            This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.NonConstantAttributeDefinitions">
            <summary>
            This block has non-constant attribute definitions
            (this bit is not set if the block has any attribute definitions that are constant, or has no attribute definitions at all).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRef">
            <summary>
            This block is an external reference.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRefOverlay">
            <summary>
            This block is an external reference overlay.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ExternallyDependent">
            <summary>
            This block is externally dependent.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ResolvedExternalReference">
            <summary>
            This is a resolved external reference, or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.DefinitionExternalReference">
            <summary>
            This definition is a referenced external reference (ignored on input).
            </summary>
        </member>
        <member name="T:netDxf.Blocks.EndBlock">
            <summary>
            Represents the termination element of the block definition.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.EndBlock.#ctor(netDxf.DxfObject)">
            <summary>
            Initializes a new instance of the <c>BlockEnd</c> class.
            </summary>
        </member>
        <member name="T:netDxf.BoundingRectangle">
            <summary>
            Represents an axis aligned bounding rectangle.
            </summary>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle from a rotated ellipse.
            </summary>
            <param name="center">Center of the ellipse.</param>
            <param name="majorAxis">Major axis of the ellipse.</param>
            <param name="minorAxis">Minor axis of the ellipse.</param>
            <param name="rotation">Rotation in degrees of the ellipse.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle from a circle.
            </summary>
            <param name="center">Center of the bounding rectangle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="center">Center of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="min">Lower-left corner.</param>
            <param name="max">Upper-right corner.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="points">A list of Vector2.</param>
        </member>
        <member name="P:netDxf.BoundingRectangle.Min">
            <summary>
            Gets or sets the bounding rectangle lower-left corner.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Max">
            <summary>
            Gets or sets the bounding rectangle upper-right corner.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Center">
            <summary>
            Gets the bounding rectangle center.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Radius">
            <summary>
            Gets the radius of the circle that contains the bounding rectangle.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Width">
            <summary>
            Gets the bounding rectangle width.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Height">
            <summary>
            Gets the bounding rectangle height.
            </summary>
        </member>
        <member name="M:netDxf.BoundingRectangle.PointInside(netDxf.Vector2)">
            <summary>
            Checks if a point is inside the bounding rectangle.
            </summary>
            <param name="point">Vector2 to check.</param>
            <returns>True if the point is inside the bounding rectangle, false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:netDxf.BoundingRectangle.Union(netDxf.BoundingRectangle,netDxf.BoundingRectangle)">
            <summary>
            Obtains the union between two bounding rectangles.
            </summary>
            <param name="aabr1">A bounding rectangle.</param>
            <param name="aabr2">A bounding rectangle.</param>
            <returns>The resulting bounding rectangle.</returns>
        </member>
        <member name="M:netDxf.BoundingRectangle.Union(System.Collections.Generic.IEnumerable{netDxf.BoundingRectangle})">
            <summary>
            Obtains the union of a bounding rectangles list.
            </summary>
            <param name="rectangles">A list of bounding rectangles.</param>
            <returns>The resulting bounding rectangle.</returns>
        </member>
        <member name="T:netDxf.ClippingBoundary">
            <summary>
            Represent a clipping boundary to display specific portions of
            an <see cref="T:netDxf.Entities.Image">Image</see>,
            an <see cref="T:netDxf.Entities.Underlay">Underlay</see>,
            or a <see cref="T:netDxf.Entities.Wipeout">Wipeout</see>.
            </summary>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a rectangular clipping boundary.
            </summary>
            <param name="x">Rectangle x-coordinate of the first corner.</param>
            <param name="y">Rectangle y-coordinate of the first corner.</param>
            <param name="width">Rectangle width.</param>
            <param name="height">Rectangle height.</param>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a rectangular clipping boundary from two opposite corners.
            </summary>
            <param name="firstCorner">Rectangle first corner.</param>
            <param name="secondCorner">Rectangle second corner.</param>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a polygonal clipping boundary.
            </summary>
            <param name="vertexes">The list of vertexes of the polygonal boundary.</param>
        </member>
        <member name="P:netDxf.ClippingBoundary.Type">
            <summary>
            Gets the clipping boundary type, rectangular or polygonal.
            </summary>
        </member>
        <member name="P:netDxf.ClippingBoundary.Vertexes">
            <summary>
            Gets the list of vertexes of the polygonal boundary, or the opposite vertexes if the boundary is rectangular.
            </summary>
        </member>
        <member name="M:netDxf.ClippingBoundary.Clone">
            <summary>
            Creates a new ClippingBoundary that is a copy of the current instance.
            </summary>
            <returns>A new ClippingBoundary that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.ClippingBoundaryType">
            <summary>
            Image clipping boundary type.
            </summary>
        </member>
        <member name="F:netDxf.ClippingBoundaryType.Rectangular">
            <summary>
            Rectangular.
            </summary>
        </member>
        <member name="F:netDxf.ClippingBoundaryType.Polygonal">
            <summary>
            Polygonal.
            </summary>
        </member>
        <member name="T:netDxf.Collections.ApplicationRegistries">
            <summary>
            Represents a collection of application registries.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Add(netDxf.Tables.ApplicationRegistry,System.Boolean)">
            <summary>
            Adds an application registry to the list.
            </summary>
            <param name="appReg"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> to add to the list.</param>
            <param name="assignHandle">Checks if the appReg parameter requires a handle.</param>
            <returns>
            If a an application registry already exists with the same name as the instance that is being added the method returns the existing application registry,
            if not it will return the new application registry.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Remove(System.String)">
            <summary>
            Removes an application registry.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> name to remove from the document.</param>
            <returns>True if the application registry has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved application registries or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Remove(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Removes an application registry.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> to remove from the document.</param>
            <returns>True if the application registry has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved application registries or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.AttributeCollection">
            <summary>
            Represents a collection of <see cref="T:netDxf.Entities.Attribute">Attributes</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of <c>AttributeCollection</c> with the specified collection of attributes.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.Attribute})">
            <summary>
            Initializes a new instance of <c>AttributeCollection</c> with the specified collection of attributes.
            </summary>
            <param name="attributes">The collection of attributes from which build the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.Contains(netDxf.Entities.Attribute)">
            <summary>
            Determines whether an attribute is in the collection.
            </summary>
            <param name="item">The attribute to locate in the collection.</param>
            <returns>True if attribute is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.CopyTo(netDxf.Entities.Attribute[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.IndexOf(netDxf.Entities.Attribute)">
            <summary>
            Searches for the specified attribute and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The attribute to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.AttributeWithTag(System.String)">
            <summary>
            Searches for the first occurrence attribute with the specified attribute definition tag within the entire collection
            </summary>
            <param name="tag"></param>
            <returns>The first occurrence of the attribute with the specified attribute definition tag within the entire collection.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.AttributeDefinitionDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.Entities.AttributeDefinition">AttributeDefinitions</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.
            </summary>
            <param name="tag">The tag of the attribute definition to get or set.</param>
            <returns>The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.</returns>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Tags">
            <summary>
            Gets an ICollection containing the tags of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Add(netDxf.Entities.AttributeDefinition)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to the dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.Entities.AttributeDefinition})">
            <summary>
            Adds an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list to the dictionary.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Remove(System.String)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag from the current dictionary.
            </summary>
            <param name="tag">The tag of the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.ContainsTag(System.String)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.
            </summary>
            <param name="tag">The tag to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the tag; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.ContainsValue(netDxf.Entities.AttributeDefinition)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.TryGetValue(System.String,netDxf.Entities.AttributeDefinition@)">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> associated with the specified tag.
            </summary>
            <param name="tag">The tag whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> associated with the specified tag,
            if the tag is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.Collections.AttributeDefinitionDictionaryEventArgs">
            <summary>
            Represents the arguments thrown by the <see cref="T:netDxf.Collections.AttributeDefinitionDictionary">AttributeDefinitionDictionary</see> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the BeforeAddItem and BeforeRemoveItem events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.BlockRecords">
            <summary>
            Represents a collection of blocks.
            </summary>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Add(netDxf.Blocks.Block,System.Boolean)">
            <summary>
            Adds a block to the list.
            </summary>
            <param name="block"><see cref="T:netDxf.Blocks.Block">Block</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the block parameter.</param>
            <returns>
            If a block already exists with the same name as the instance that is being added the method returns the existing block,
            if not it will return the new block.
            </returns>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Remove(System.String)">
            <summary>
            Removes a block.
            </summary>
            <param name="name"><see cref="T:netDxf.Blocks.Block">Block</see> name to remove from the document.</param>
            <returns>True if the block has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved blocks or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Remove(netDxf.Blocks.Block)">
            <summary>
            Removes a block.
            </summary>
            <param name="item"><see cref="T:netDxf.Blocks.Block">Block</see> to remove from the document.</param>
            <returns>True if the block has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved blocks or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.DimensionStyleOverrideDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverrides</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Item(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> with the specified type.
            </summary>
            <param name="type">The type of the DimensionStyleOverride to get or set.</param>
            <returns>The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> with the specified type.</returns>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Types">
            <summary>
            Gets an ICollection containing the types of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Add(netDxf.Tables.DimensionStyleOverrideType,System.Object)">
            <summary>
            Adds a <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to the dictionary from its type and value.
            </summary>
            <param name="type">Dimension style override type.</param>
            <param name="value">Dimension style override value.</param>
            <remarks>A new DimensionStyleOverride will be created from the specified arguments.</remarks>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Add(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Adds an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to the dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.Tables.DimensionStyleOverride})">
            <summary>
            Adds an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> list to the dictionary.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Remove(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Removes an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type from the current dictionary.
            </summary>
            <param name="type">The type of the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.ContainsType(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type.
            </summary>
            <param name="type">The type to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the type; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.ContainsValue(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.TryGetValue(netDxf.Tables.DimensionStyleOverrideType,netDxf.Tables.DimensionStyleOverride@)">
            <summary>
            Gets the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> associated of the specified type.
            </summary>
            <param name="type">The type whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> associated of the specified type,
            if the tag is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs">
            <summary>
            Represents the arguments thrown by the <see cref="T:netDxf.Collections.DimensionStyleOverrideDictionary">DimensionStyleOverrideDictionary</see> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.#ctor(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the BeforeAddItem and BeforeRemoveItem events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.DimensionStyles">
            <summary>
            Represents a collection of dimension styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Add(netDxf.Tables.DimensionStyle,System.Boolean)">
            <summary>
            Adds a dimension style to the list.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the dimension style parameter.</param>
            <returns>
            If a dimension style already exists with the same name as the instance that is being added the method returns the existing dimension style,
            if not it will return the new dimension style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Remove(System.String)">
            <summary>
            Removes a dimension style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> name to remove from the document.</param>
            <returns>True if the dimension style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved dimension styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Remove(netDxf.Tables.DimensionStyle)">
            <summary>
            Removes a dimension style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> to remove from the document.</param>
            <returns>True if the dimension style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved dimension styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.DrawingEntities">
            <summary>
            Gives direct access to operations related with the entities in a drawing.
            These are no more than shortcuts to the real place where the entities are stored in a document (drawing.Layouts[layoutName].AssociatedBlock.Entities).
            The layout where the operations are performed is defined by the ActiveLayout property, by default the active layout is the Model.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.ActiveLayout">
            <summary>
            Gets or sets the name of the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.All">
            <summary>
            Gets the complete list <see cref="T:netDxf.Entities.EntityObject">entities</see> contained in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Arcs">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Arc">arcs</see> contained in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Ellipses">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Ellipse">ellipses</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Circles">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Circle">circles</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Faces3D">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Face3D">3d faces</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Solids">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Solid">solids</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Traces">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Trace">traces</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Inserts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Insert">inserts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Lines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Line">lines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Shapes">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Shape">shapes</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Polylines2D">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Polyline2D">polylines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Polylines3D">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Polyline3D">polylines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.PolyfaceMeshes">
            <summary>
            Gets the list of <see cref="P:netDxf.Collections.DrawingEntities.PolyfaceMeshes">polyface meshes</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.PolygonMeshes">
            <summary>
            Gets the list of <see cref="P:netDxf.Collections.DrawingEntities.PolygonMeshes">polygon meshes</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Points">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Point">points</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Texts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Text">texts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.MTexts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.MText">multiline texts</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Hatches">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Hatch">hatches</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Images">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Image">images</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Meshes">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Mesh">mesh</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Leaders">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Leader">leader</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Tolerances">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Tolerance">tolerance</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Underlays">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Underlay">underlay</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.MLines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.MLine">multilines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Dimensions">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Dimension">dimensions</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Splines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Spline">splines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Rays">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Ray">rays</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Viewports">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Viewport">viewports</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.XLines">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.XLine">extension lines</see> in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DrawingEntities.Wipeouts">
            <summary>
            Gets the list of <see cref="T:netDxf.Entities.Wipeout">wipeouts</see> in the active layout.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Add(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to the active layout of the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to add to the document.</param>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Add(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the active layout of the document.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the document.</param>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Remove(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> from the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to remove from the document.</param>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br />
            This includes empty layers, blocks not referenced anymore, line types, text styles, dimension styles, and application registries.<br />
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.DrawingEntities.Remove(netDxf.Entities.EntityObject)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.EntityObject">entity</see> from the document.
            </summary>
            <param name="entity">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the document.</param>
            <returns>True if item is successfully removed; otherwise, false.</returns>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br />
            This includes empty layers, blocks not referenced anymore, line types, text styles, dimension styles, multiline styles, groups, and application registries.<br />
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="T:netDxf.Collections.EntityCollection">
            <summary>
            Represent a collection of <see cref="T:netDxf.Entities.EntityObject">entities</see> that fire events when it is modified. 
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.#ctor">
            <summary>
            Initializes a new instance of <c>EntityCollection</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>EntityCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index.</returns>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Entities.EntityObject">entities</see> contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Add(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the collection.
            </summary>
            <param name="item"> The <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the collection.</param>
            <returns>True if the <see cref="T:netDxf.Entities.EntityObject">entity</see> has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.AddRange(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Insert(System.Int32,netDxf.Entities.EntityObject)">
            <summary>
            Inserts an <see cref="T:netDxf.Entities.EntityObject">entity</see> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to insert. The value can not be null.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Remove(netDxf.Entities.EntityObject)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:netDxf.Entities.EntityObject">entity</see> from the collection
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the collection.</param>
            <returns>True if <see cref="T:netDxf.Entities.EntityObject">entity</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Remove(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Entities.EntityObject">entities</see> from the collection.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.IndexOf(netDxf.Entities.EntityObject)">
            <summary>
            Searches for the specified <see cref="T:netDxf.Entities.EntityObject">entity</see> and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Contains(netDxf.Entities.EntityObject)">
            <summary>
            Determines whether an <see cref="T:netDxf.Entities.EntityObject">entity</see> is in the collection.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.CopyTo(netDxf.Entities.EntityObject[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.EntityCollectionEventArgs">
            <summary>
            Represents the arguments thrown by the <c>EntityCollection</c> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollectionEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>EntityCollectionEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the collection.</param>
        </member>
        <member name="P:netDxf.Collections.EntityCollectionEventArgs.Item">
            <summary>
            Get the item that is being added or removed from the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.EntityCollectionEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operation.</remarks>
        </member>
        <member name="T:netDxf.Collections.Groups">
            <summary>
            Represents a collection of groups.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Groups.Add(netDxf.Objects.Group,System.Boolean)">
            <summary>
            Adds a group to the list.
            </summary>
            <param name="group"><see cref="T:netDxf.Objects.Group">Group</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the group parameter.</param>
            <returns>
            If a group already exists with the same name as the instance that is being added the method returns the existing group,
            if not it will return the new group.<br />
            The methods will automatically add the grouped entities to the document, if they have not been added previously.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Groups.Remove(System.String)">
            <summary>
            Deletes a group.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.Group">Group</see> name to remove from the document.</param>
            <returns>True if the group has been successfully removed, or false otherwise.</returns>
            <remarks>Removing a group only deletes it from the collection, the entities that once belonged to the group are not deleted.</remarks>
        </member>
        <member name="M:netDxf.Collections.Groups.Remove(netDxf.Objects.Group)">
            <summary>
            Deletes a group.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.Group">Group</see> to remove from the document.</param>
            <returns>True if the group has been successfully removed, or false otherwise.</returns>
            <remarks>Removing a group only deletes it from the collection, the entities that once belonged to the group are not deleted.</remarks>
        </member>
        <member name="T:netDxf.Collections.ImageDefinitions">
            <summary>
            Represents a collection of image definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Add(netDxf.Objects.ImageDefinition,System.Boolean)">
            <summary>
            Adds an image definition to the list.
            </summary>
            <param name="imageDefinition"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the image definition parameter.</param>
            <returns>
            If an image definition already exists with the same name as the instance that is being added the method returns the existing image definition,
            if not it will return the new image definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Remove(System.String)">
            <summary>
            Removes an image definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> name to remove from the document.</param>
            <returns>True if the image definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any image definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Remove(netDxf.Objects.ImageDefinition)">
            <summary>
            Removes an image definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> to remove from the document.</param>
            <returns>True if the image definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any image definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Layers">
            <summary>
            Represents a collection of layers.
            </summary>
        </member>
        <member name="P:netDxf.Collections.Layers.StateManager">
            <summary>
            Gets the layer state manager.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Layers.Add(netDxf.Tables.Layer,System.Boolean)">
            <summary>
            Adds a layer to the list.
            </summary>
            <param name="layer"><see cref="T:netDxf.Tables.Layer">Layer</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layer parameter.</param>
            <returns>
            If a layer already exists with the same name as the instance that is being added the method returns the existing layer,
            if not it will return the new layer.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Layers.Remove(System.String)">
            <summary>
            Removes a layer.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.Layer">Layer</see> name to remove from the document.</param>
            <returns>True if the layer has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layers or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Layers.Remove(netDxf.Tables.Layer)">
            <summary>
            Removes a layer.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.Layer">Layer</see> to remove from the document.</param>
            <returns>True if the layer has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layers or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.LayerStateManager">
            <summary>
            Manages the list of layer states in a drawing.
            </summary>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.#ctor(netDxf.DxfDocument)">
            <summary>
            Initializes a new instance of the <c>LayerStateManager</c> class.
            </summary>
            <param name="owner">Layers list associated with the current <c>LayerStateManager</c>.</param>
        </member>
        <member name="P:netDxf.Collections.LayerStateManager.Options">
            <summary>
            Gets or sets the restoring options when updating the layer state from the layers list and vice versa.
            </summary>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.AddNew(System.String)">
            <summary>
            Adds a new LayerState from the current state of the layers.
            </summary>
            <param name="layerStateName">Layer state name.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.AddNew(System.String,System.String)">
            <summary>
            Adds a new LayerState from the current state of the layers.
            </summary>
            <param name="layerStateName">Layer state name.</param>
            <param name="layerStateDescription">Layer state description.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Restore(System.String)">
            <summary>
            Restores the properties of the current layers list according to the specified layers state.
            </summary>
            <param name="layerStateName">Layer state name to restore.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Update(System.String)">
            <summary>
            Updates the specified layer state according to the properties of the current layers list.
            </summary>
            <param name="layerStateName">Layer state name to update.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Import(System.String,System.Boolean)">
            <summary>
            Imports a layer state from a LAS file.
            </summary>
            <param name="file">LAS file to import.</param>
            <param name="overwrite">Defines if the imported layer state will overwrite any existing one with the same name.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Export(System.String,System.String)">
            <summary>
            Exports a layer state to a LAS file.
            </summary>
            <param name="file">LAS file to export.</param>
            <param name="layerStateName">Layer state name to export.</param>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.RemoveAll">
            <summary>
            Removes all layers states.
            </summary>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Add(netDxf.Objects.LayerState,System.Boolean)">
            <summary>
            Adds a LayerState to the list.
            </summary>
            <param name="layerState"><see cref="T:netDxf.Objects.LayerState">LayerState</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layerState parameter.</param>
            <returns>
            If a LayerState already exists with the same name as the instance that is being added the method returns the existing LayerState,
            if not it will return the new LayerState.
            </returns>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Remove(System.String)">
            <summary>
            Removes a LayerState.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.LayerState">LayerState</see> name to remove from the document.</param>
            <returns>True if the LayerState has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved LayerState or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.LayerStateManager.Remove(netDxf.Objects.LayerState)">
            <summary>
            Removes a LayerState.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.LayerState">LayerState</see> to remove from the document.</param>
            <returns>True if the LayerState has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved LayerState or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Layouts">
            <summary>
            Represents a collection of layouts.
            </summary>
            <remarks>
            You can add a maximum of 255 layouts to your drawing, the "Model" layout is always present, that limits the maximum number of layouts to 256.
            Even though this limit is imposed through the AutoCad UI, it can import larger numbers, but exceeding this limit might make it to crash.
            </remarks>
        </member>
        <member name="F:netDxf.Collections.Layouts.MaxCapacity">
            <summary>
            Maximum number of layouts that can be added to the document.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Layouts.Add(netDxf.Objects.Layout,System.Boolean)">
            <summary>
            Adds a layout to the list.
            </summary>
            <param name="layout"><see cref="T:netDxf.Objects.Layout">Layout</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layout parameter.</param>
            <returns>
            You can add a maximum of 255 layouts to your drawing, the "Model" layout is always present what limits the maximum number of layouts to 256.
            If a layout already exists with the same name as the instance that is being added the method returns the existing layout.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Layouts.Remove(System.String)">
            <summary>
            Deletes a layout and removes the layout entities from the document.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.Layout">Layout</see> name to remove from the document.</param>
            <returns>True if the layout has been successfully removed, or false otherwise.</returns>
            <remarks>
            The ModelSpace layout cannot be removed. If all PaperSpace layouts have been removed a default PaperSpace will be created since it is required by the DXF implementation.<br />
            When a Layout is deleted all entities that has been added to it will also be removed.<br />
            Removing a Layout will rebuild the PaperSpace block names, to follow the naming rule: Paper_Space, Paper_Space0, Paper_Space1, ...
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.Remove(netDxf.Objects.Layout)">
            <summary>
            Deletes a layout and removes the layout entities from the document.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.Layout">Layout</see> to remove from the document.</param>
            <returns>True if the layout has been successfully removed, or false otherwise.</returns>
            <remarks>
            Removing a layout will also remove all entities and attribute definition that may contain.
            Reserved layouts cannot be removed.
            </remarks>
        </member>
        <member name="T:netDxf.Collections.Linetypes">
            <summary>
            Represents a collection of line types.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Linetypes.NamesFromFile(System.String)">
            <summary>
            Gets the list of linetype names defined in a LIN file.
            </summary>
            <param name="file">Linetype definitions file.</param>
            <returns>List of linetype names contained in the specified LIN file.</returns>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.AddFromFile(System.String,System.Boolean)">
            <summary>
            Adds all linetypes to the list from the definition in a LIN file.
            </summary>
            <param name="file">File where the definition is located.</param>
            <param name="reload">Specifies if the linetype definitions of the file will overwrite the existing ones, in case another with the same name exists in the file.</param>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            Any text style or shape present in the linetype definition must be previously defined in the DxfDocument, if not an exception will be generated.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.AddFromFile(System.String,System.String,System.Boolean)">
            <summary>
            Adds a linetype to the list from the definition in a LIN file.
            </summary>
            <param name="file">File where the definition is located.</param>
            <param name="linetypeName">Name of the line type definition to read (ignore case).</param>
            <param name="reload">Specifies if the linetype definition of the file will overwrite the existing one, in case another with the same name exists in the file.</param>
            <returns>
            True if the linetype has been added from the linetype definitions LIN file; false otherwise.
            It will return false if the linetype is present in the file and the reload argument is false.
            </returns>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            Any text style or shape present in the linetype definition must be previously defined in the DxfDocument, if not an exception will be generated.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Save(System.String,System.Boolean)">
            <summary>
            Saves all linetype definitions to a LIN file.
            </summary>
            <param name="file">File where the linetype definitions will be saved.</param>
            <param name="overwrite">Defines if the file will be overwritten in case exits another one.</param>
            <remarks>Only non reserved linetypes will be saved, therefore Continuous, ByLayer, and ByBlock will be excluded.</remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Add(netDxf.Tables.Linetype,System.Boolean)">
            <summary>
            Adds a line type to the list.
            </summary>
            <param name="linetype"><see cref="T:netDxf.Tables.Linetype">Linetype</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the line type parameter.</param>
            <returns>
            If a line type already exists with the same name as the instance that is being added the method returns the existing line type,
            if not it will return the new line type.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Remove(System.String)">
            <summary>
            Removes a line type.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.Linetype">Linetype</see> name to remove from the document.</param>
            <returns>True if the line type has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved line types or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Remove(netDxf.Tables.Linetype)">
            <summary>
            Removes a line type.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.Linetype">Linetype</see> to remove from the document.</param>
            <returns>True if the line type has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved line types or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.MLineStyles">
            <summary>
            Represents a collection of multiline styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Add(netDxf.Objects.MLineStyle,System.Boolean)">
            <summary>
            Adds a multiline style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the multiline style parameter.</param>
            <returns>
            If a multiline style already exists with the same name as the instance that is being added the method returns the existing multiline style,
            if not it will return the new multiline style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Remove(System.String)">
            <summary>
            Removes a multiline style.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> name to remove from the document.</param>
            <returns>True if the multiline style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved multiline styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Remove(netDxf.Objects.MLineStyle)">
            <summary>
            Removes a multiline style.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> to remove from the document.</param>
            <returns>True if the multiline style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved multiline styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.ObservableCollection`1">
            <summary>
            Represent a collection of items that fire events when it is modified. 
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire list.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparision">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the default comparer.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Add(`0)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="item"> The object to add to the collection.</param>
            <returns>True if the object has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds an object list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can not be null.</param>
            <returns>True if the object has been inserted to the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the object to remove.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Clear">
            <summary>
            Removes all object from the collection.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Contains(`0)">
            <summary>
            Determines whether an object is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.ObservableCollectionEventArgs`1">
            <summary>
            Represents the arguments thrown by the <c>ObservableCollection</c> events.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableCollectionEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <c>ObservableCollectionEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the collection.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableCollectionEventArgs`1.Item">
            <summary>
            Get the item that is being added or removed from the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableCollectionEventArgs`1.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operation.</remarks>
        </member>
        <member name="T:netDxf.Collections.ObservableDictionaryEventArgs`2">
            <summary>
            Represents the arguments thrown by the <c>ObservableDictionaryEventArgs</c> events.
            </summary>
            <typeparam name="TKey">Type of items.</typeparam>
            <typeparam name="TValue">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableDictionaryEventArgs`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Initializes a new instance of <c>ObservableDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableDictionaryEventArgs`2.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableDictionaryEventArgs`2.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.ShapeStyles">
            <summary>
            Represents a collection of shape styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.ContainsShapeName(System.String)">
            <summary>
            Looks for a shape style that contains a shape with the specified name.
            </summary>
            <param name="name">Shape name.</param>
            <returns>The shape style that contains a shape with the specified name, null otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Add(netDxf.Tables.ShapeStyle,System.Boolean)">
            <summary>
            Adds a shape style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the shape style parameter.</param>
            <returns>
            If a shape style already exists with the same name as the instance that is being added the method returns the existing shape style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Remove(System.String)">
            <summary>
            Removes a shape style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> name to remove from the document.</param>
            <returns>True if the shape style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved shape styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Remove(netDxf.Tables.ShapeStyle)">
            <summary>
            Removes a shape style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> to remove from the document.</param>
            <returns>True if the shape style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved shape styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.SupportFolders">
            <summary>
            Represents a list of support folders for the document.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
            <param name="folders">The collection whose elements should be added to the list. The items in the collection cannot be null.</param>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.WorkingFolder">
            <summary>
            Gets or sets the base folder to resolver relative paths of external references.
            </summary>
            <remarks>By default it points to the current System.Environment.CurrentDirectory when the DxfDocument was created.</remarks>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.FindFile(System.String)">
            <summary>
            Looks for a file in one of the support folders.
            </summary>
            <param name="file">File name to find in one of the support folders.</param>
            <returns>The path to the file found in one of the support folders. It includes both the path and the specified file name.</returns>
            <remarks>If the specified file already exists it return the same value, if neither it cannot be found in any of the support folders it will return an empty string.</remarks>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
            <returns>The number of elements contained in the list.</returns>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.IsReadOnly">
            <summary>
            Returns if the list is read only.
            </summary>
            <returns>Return always true.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Add(System.String)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Folder path to add to the list. The item cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the elements of the collection to the list.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the list. The items in the collection cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Contains(System.String)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="item">The object to locate in the list. The value cannot be null.</param>
            <returns>True if the item is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from list. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
            <param name="item">The object to remove from the list. The value cannot be null.</param>
            <returns>True if the item is successfully removed; otherwise, false. This method also returns false the item was not found in the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:netDxf.Collections.TableObjects`1">
            <summary>
            Represents a list of table objects
            </summary>
            <typeparam name="T"><see cref="T:netDxf.Tables.TableObject">TableObject</see>.</typeparam>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.#ctor(netDxf.DxfDocument,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TableObjects</c> class.
            </summary>
            <param name="document">DxfDocument associated with this instance.</param>
            <param name="codeName">DxfCode assigned to this instance.</param>
            <param name="handle">Handle assigned to this instance.</param>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Item(System.String)">
            <summary>
            Gets a table object from the list by name.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The table object with the specified name.</returns>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Items">
            <summary>
            Gets the table object list.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Names">
            <summary>
            Gets the ObjectTable names.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Count">
            <summary>
            Gets the number of table objects.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.HasReferences(System.String)">
            <summary>
            Checks if the specified TableObject has been referenced by other DxfObjects. 
            </summary>
            <param name="name">Table object name.</param>
            <returns>
            Returns true if the specified TableObject has been referenced by other DxfObjects, false otherwise.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.HasReferences(`0)">
            <summary>
            Checks if the specified TableObject has been referenced by other DxfObjects. 
            </summary>
            <param name="item">Table object.</param>
            <returns>
            Returns true if the specified TableObject has been referenced by other DxfObjects, false otherwise.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetReferences(System.String)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetReferences(`0)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="item">Table object.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Contains(System.String)">
            <summary>
            Checks if a table object already exists in the list. 
            </summary>
            <param name="name">Table object name.</param>
            <returns>True is a table object exists with the specified name, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Contains(`0)">
            <summary>
            Checks if a table object already exists in the list. 
            </summary>
            <param name="item">Table object.</param>
            <returns>True is a table object exists, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the table object associated with the specified name.
            </summary>
            <param name="name"> The name of the table object to get.</param>
            <param name="item">When this method returns, contains the table object associated with the specified name, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>True if the table contains an element with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Add(`0)">
            <summary>
            Adds a table object to the list.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TableObject">Table object</see> to add to the list.</param>
            <returns>
            If a table object already exists with the same name as the instance that is being added the method returns the existing table object,
            if not it will return the new table object.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Remove(System.String)">
            <summary>
            Removes a table object.
            </summary>
            <param name="name">Table object name to remove from the document.</param>
            <returns>True is the table object has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved table objects or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Remove(`0)">
            <summary>
            Removes a table object.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TableObject">Table object</see> to remove from the document.</param>
            <returns>True is the table object has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved table objects or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Clear">
            <summary>
            Removes all table objects that are not reserved and have no references.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the table object collection.
            </summary>
            <returns>An enumerator for the table object collection.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the table object collection.
            </summary>
            <returns>An enumerator for the table object collection.</returns>
        </member>
        <member name="T:netDxf.Collections.TextStyles">
            <summary>
            Represents a collection of text styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Add(netDxf.Tables.TextStyle,System.Boolean)">
            <summary>
            Adds a text style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the text style parameter.</param>
            <returns>
            If a text style already exists with the same name as the instance that is being added the method returns the existing text style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Remove(System.String)">
            <summary>
            Removes a text style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> name to remove from the document.</param>
            <returns>True if the text style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved text styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Remove(netDxf.Tables.TextStyle)">
            <summary>
            Removes a text style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> to remove from the document.</param>
            <returns>True if the text style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved text styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UCSs">
            <summary>
            Represents a collection of user coordinate systems.
            </summary>
            <remarks>The UCSs collection method GetReferences will always return an empty list since there are no DxfObjects that references them.</remarks>
        </member>
        <member name="M:netDxf.Collections.UCSs.Add(netDxf.Tables.UCS,System.Boolean)">
            <summary>
            Adds a user coordinate system to the list.
            </summary>
            <param name="ucs"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the user coordinate system parameter.</param>
            <returns>
            If a user coordinate system already exists with the same name as the instance that is being added the method returns the existing user coordinate system,
            if not it will return the new user coordinate system.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UCSs.Remove(System.String)">
            <summary>
            Removes a user coordinate system.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> name to remove from the document.</param>
            <returns>True if the user coordinate system has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved user coordinate system or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UCSs.Remove(netDxf.Tables.UCS)">
            <summary>
            Removes a user coordinate system.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> to remove from the document.</param>
            <returns>True if the user coordinate system has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved user coordinate system or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayDgnDefinitions">
            <summary>
            Represents a collection of DGN underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Add(netDxf.Objects.UnderlayDgnDefinition,System.Boolean)">
            <summary>
            Adds a DGN underlay definition to the list.
            </summary>
            <param name="underlayDgnDefinition"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Remove(System.String)">
            <summary>
            Removes an DGN underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Remove(netDxf.Objects.UnderlayDgnDefinition)">
            <summary>
            Removes a DGN underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayDwfDefinitions">
            <summary>
            Represents a collection of DWF underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Add(netDxf.Objects.UnderlayDwfDefinition,System.Boolean)">
            <summary>
            Adds a DWF underlay definition to the list.
            </summary>
            <param name="underlayDwfDefinition"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Remove(System.String)">
            <summary>
            Removes a DWF underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Remove(netDxf.Objects.UnderlayDwfDefinition)">
            <summary>
            Removes a DWF underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayPdfDefinitions">
            <summary>
            Represents a collection of PDF underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Add(netDxf.Objects.UnderlayPdfDefinition,System.Boolean)">
            <summary>
            Adds a PDF underlay definition to the list.
            </summary>
            <param name="underlayPdfDefinition"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Remove(System.String)">
            <summary>
            Removes a PDF underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Remove(netDxf.Objects.UnderlayPdfDefinition)">
            <summary>
            Removes a PDF underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Views">
            <summary>
            Represents a collection of views.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Views.Add(netDxf.Tables.View,System.Boolean)">
            <summary>
            Adds a view to the list.
            </summary>
            <param name="view"><see cref="T:netDxf.Tables.View">View</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the view parameter.</param>
            <returns>
            If a view already exists with the same name as the instance that is being added the method returns the existing view,
            if not it will return the new view.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Views.Remove(System.String)">
            <summary>
            Removes view.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.View">View</see> name to remove from the document.</param>
            <returns>True if the view has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved views or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Views.Remove(netDxf.Tables.View)">
            <summary>
            Removes a view.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.View">View</see> to remove from the document.</param>
            <returns>True if the view has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved views or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.VPorts">
            <summary>
            Represents a collection of viewports.
            </summary>
            <remarks>
            Multiple Model viewports are not supported, there can be only one called "*Active".
            </remarks>
        </member>
        <member name="M:netDxf.Collections.VPorts.Add(netDxf.Tables.VPort,System.Boolean)">
            <summary>
            Adds an viewports to the list.
            </summary>
            <param name="vport"><see cref="T:netDxf.Tables.VPort">VPort</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the viewport parameter.</param>
            <returns>
            If a viewports already exists with the same name as the instance that is being added the method returns the existing viewports,
            if not it will return the new viewports.
            </returns>
        </member>
        <member name="M:netDxf.Collections.VPorts.Remove(System.String)">
            <summary>
            Removes a viewports.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.VPort">VPort</see> name to remove from the document.</param>
            <returns>True if the viewports has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved viewports or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.VPorts.Remove(netDxf.Tables.VPort)">
            <summary>
            Removes a viewports.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.VPort">VPort</see> to remove from the document.</param>
            <returns>True if the viewports has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved viewports or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.XDataDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.XData">XData</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor(System.Collections.Generic.IEnumerable{netDxf.XData})">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c> and has the specified items.
            </summary>
            <param name="items">The list of <see cref="T:netDxf.XData">extended data</see> items initially stored.</param>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netDxf.XData">extended data</see> with the specified application registry name.
            </summary>
            <param name="appId">The application registry name to get or set.</param>
            <returns>The <see cref="T:netDxf.XData">extended data</see> of the application registry.</returns>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.AppIds">
            <summary>
            Gets an ICollection containing the application registry names of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.XData">extended data</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.XData">extended data</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Add(netDxf.XData)">
            <summary>
            Adds an <see cref="T:netDxf.XData">extended data</see> to the current dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.XData">extended data</see> to add.</param>
            <remarks>
            If the current dictionary already contains an appId equals to the extended data that is being added
            the <see cref="T:netDxf.XDataRecord">XDataRecords</see> will be added to the existing one.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.XData})">
            <summary>
            Adds a list of <see cref="T:netDxf.XData">extended data</see> to the current dictionary.
            </summary>
            <param name="items">The list of <see cref="T:netDxf.XData">extended data</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Remove(System.String)">
            <summary>
            Removes an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name from the current dictionary.
            </summary>
            <param name="appId">The application registry name of the <see cref="T:netDxf.XData">extended data</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.XData">extended data</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.XData">extended data</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.ContainsAppId(System.String)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name.
            </summary>
            <param name="appId">The application registry name to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the application registry name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.ContainsValue(netDxf.XData)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.XData">extended data</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.XData">extended data</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.XData">extended data</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.TryGetValue(System.String,netDxf.XData@)">
            <summary>
            Gets the <see cref="T:netDxf.XData">extended data</see> associated with the specified application registry name.
            </summary>
            <param name="appId">The application registry name whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.XData">extended data</see> associated with the specified application registry name,
            if the application registry name is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.CoordinateSystem">
            <summary>
            Defines the coordinate system reference.
            </summary>
        </member>
        <member name="F:netDxf.CoordinateSystem.World">
            <summary>
            World coordinates.
            </summary>
        </member>
        <member name="F:netDxf.CoordinateSystem.Object">
            <summary>
            Object/Local coordinates.
            </summary>
        </member>
        <member name="T:netDxf.DxfDocument">
            <summary>
            Represents a document to read and write DXF files.
            </summary>
            <remarks>
            The DxfDocument class derives from DxfObject for convenience of this library not because of the DXF structure.
            It can contain external data (XData) information, but it is not saved in the DXF.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="supportFolders">List of the document support folders.</param>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables,System.Boolean,netDxf.Collections.SupportFolders)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
            <param name="createDefaultObjects">Check if the default objects need to be created.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="P:netDxf.DxfDocument.NumHandles">
            <summary>
            Gets or sets the number of handles generated, this value is saved as an hexadecimal in the drawing variables HandleSeed property.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.SupportFolders">
            <summary>
            Gets the list of folders where the drawing support files are present.
            </summary>
            <remarks>
            When shape linetype segments are used, the shape number will be obtained reading the .shp file equivalent to the .shx file,
            that file will be looked for in the same folder as the .shx file or one of the document support folders.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.BuildDimensionBlocks">
            <remarks>
            By default this value is set to false, no dimension blocks will be generated when adding dimension entities to the document.
            It will be the responsibility of the program importing the DXF to generate the drawing that represent the dimensions.<br />
            When set to true the block that represents the dimension will be generated,
            keep in mind that this process is limited and not all options available in the dimension style will be reflected in the final result.<br />
            When importing a file if the dimension block is present it will be read, regardless of this value.
            If, later, the dimension is modified all updates will be done with the limited dimension drawing capabilities of the library,
            in this case, if you want that the new modifications to be reflected when the file is saved again you can set the dimension block to null,
            and the program reading the resulting file will regenerate the block with the new modifications.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.Viewport">
            <summary>
            Gets the document viewport.
            </summary>
            <remarks>
            This is the same as the *Active VPort in the VPorts list, it describes the current viewport.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.RasterVariables">
            <summary>
            Gets or sets the <see cref="P:netDxf.DxfDocument.RasterVariables">RasterVariables</see> applied to image entities.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Comments">
            <summary>
            Gets or sets the name of the document, once a file is saved or loaded this field is equals the file name without extension.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.DrawingVariables">
            <summary>
            Gets the DXF <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Name">
            <summary>
            Gets or sets the name of the document.
            </summary>
            <remarks>
            When a file is loaded this field is equals the file name without extension.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.ApplicationRegistries">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ApplicationRegistries">application registries</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layers">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Layers">layers</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Linetypes">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Linetypes">line types</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.TextStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.TextStyles">text styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ShapeStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ShapeStyles">shape styles</see> collection.
            </summary>
            <remarks>
            The DXF stores the TextStyles and ShapeStyles in the same table list, here, they are separated since they serve a different role.
            Under normal circumstances you should not need to access this list.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.DimensionStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.DimensionStyles">dimension styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MlineStyles">
            <summary>
            Gets the <see cref="T:netDxf.Collections.MLineStyles">MLine styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UCSs">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UCSs">User coordinate systems</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Blocks">
            <summary>
            Gets the <see cref="T:netDxf.Collections.BlockRecords">block</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ImageDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ImageDefinitions">image definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayDgnDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayDgnDefinitions">dgn underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayDwfDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayDwfDefinitions">dwf underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayPdfDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayPdfDefinitions">pdf underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Groups">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Groups">groups</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layouts">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Layouts">layouts</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.VPorts">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.VPorts">viewports</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Views">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Views">views</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Entities">
            <summary>
            Gets the <see cref="T:netDxf.Collections.DrawingEntities">entities</see> shortcuts.
            </summary>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String)">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="file">File name.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            The Load method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="file">File name.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            The Load method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream)">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="stream">Stream.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String)">
            <summary>
            Saves the database of the actual DxfDocument to a text DXF file.
            </summary>
            <param name="file">File name.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br />
            The Save method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode they will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String,System.Boolean)">
            <summary>
            Saves the database of the actual DxfDocument to a DXF file.
            </summary>
            <param name="file">File name.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Returns true if the file has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br />
            The Save method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode they will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the database of the actual DxfDocument to a text stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Return true if the stream has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the database of the actual DxfDocument to a stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the stream has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="file">File name.</param>
            <returns>String that represents the DXF file version.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String,System.Boolean@)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="file">File name.</param>
            <param name="isBinary">Returns true if the DXF is a binary file.</param>
            <returns>String that represents the DXF file version.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="stream">Stream</param>
            <returns>String that represents the DXF file version.</returns>
            <remarks>The caller will be responsible of closing the stream.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream,System.Boolean@)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="stream">Stream</param>
            <param name="isBinary">Returns true if the DXF is a binary file.</param>
            <returns>String that represents the DXF file version.</returns>
            <remarks>The caller will be responsible of closing the stream.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.GetObjectByHandle(System.String)">
            <summary>
            Gets a DXF object by its handle.
            </summary>
            <param name="objectHandle">DxfObject handle.</param>
            <returns>The DxfObject that has the provided handle, null otherwise.</returns>
        </member>
        <member name="T:netDxf.DxfObject">
            <summary>
            Represents the base class for all DXF objects.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DxfObject</c> class.
            </summary>
            <param name="codename"><see cref="T:netDxf.DxfObjectCode">DXF object name</see>.</param>
        </member>
        <member name="P:netDxf.DxfObject.CodeName">
            <summary>
            Gets the <see cref="T:netDxf.DxfObjectCode">DXF object name</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.Handle">
            <summary>
            Gets the handle assigned to the DXF object.
            </summary>
            <remarks>
            The handle is a unique hexadecimal number assigned automatically to every DXF object,
            that has been added to a <see cref="T:netDxf.DxfDocument">DxfDocument</see>.
            </remarks>
        </member>
        <member name="P:netDxf.DxfObject.Owner">
            <summary>
            Gets the owner of the actual <see cref="T:netDxf.DxfObject">DxfObject</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.XData">
            <summary>
            Gets the entity <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign to the actual object.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, this is the case, for example, of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.DxfObject.ToString">
            <summary>
            Obtains a string that represents the DXF object.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.DxfObjectCode">
            <summary>
            DXF string codes.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Unknown">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.HeaderSection">
            <summary>
            Header section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ClassesSection">
            <summary>
            Classes section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Class">
            <summary>
            Class entry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TablesSection">
            <summary>
            Tables section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlocksSection">
            <summary>
            Blocks section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EntitiesSection">
            <summary>
            Entities section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ObjectsSection">
            <summary>
            Objects section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ThumbnailImageSection">
            <summary>
            Thumbnail section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AcdsDataSection">
            <summary>
            AcdsData section. Currently it is used for storing the data for solids, regions, surfaces, and the preview image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BeginSection">
            <summary>
            Begin section code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSection">
            <summary>
            End section code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayerTable">
            <summary>
            Layers table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.VportTable">
            <summary>
            Viewports table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ViewTable">
            <summary>
            Views table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UcsTable">
            <summary>
            User coordinate system table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecordTable">
            <summary>
            Block records table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LinetypeTable">
            <summary>
            Line types table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyleTable">
            <summary>
            Text styles table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimensionStyleTable">
            <summary>
            Dimension styles table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ApplicationIdTable">
            <summary>
            Extended data application registries  table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Table">
            <summary>
            Begin table code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndTable">
            <summary>
            End table code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BeginBlock">
            <summary>
            Begin block code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndBlock">
            <summary>
            End block code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.GroupDictionary">
            <summary>
            Group dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayoutDictionary">
            <summary>
            Layouts dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyleDictionary">
            <summary>
            Multiline styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefDictionary">
            <summary>
            Multiline styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageVarsDictionary">
            <summary>
            MLine styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgnDefinitionDictionary">
            <summary>
            DGN underlay definition dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwfDefinitionDictionary">
            <summary>
            DWF underlay definition styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdfDefinitionDictionary">
            <summary>
            PDF underlay definition styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayerStates">
            <summary>
            Layer states dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndOfFile">
            <summary>
            End of file.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AppId">
            <summary>
            Application registry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimStyle">
            <summary>
            Dimension style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecord">
            <summary>
            Block record.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Linetype">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layer">
            <summary>
            Layer.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.VPort">
            <summary>
            Viewport table object.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyle">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyle">
            <summary>
            Multiline style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ucs">
            <summary>
            User coordinate system.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockEnd">
            <summary>
            End block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ray">
            <summary>
            Ray.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.XLine">
            <summary>
            XLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LwPolyline">
            <summary>
            Lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Arc">
            <summary>
            Arc.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Shape">
            <summary>
            Shape
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Spline">
            <summary>
            Spline (nonuniform rational B-splines, NURBS).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AcadTable">
            <summary>
            Table made of rows and columns.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Trace">
            <summary>
            Trace.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Text">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Mesh">
            <summary>
            Mesh.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MText">
            <summary>
            Multiline text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLine">
            <summary>
            MLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Face3d">
            <summary>
            3d face.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Insert">
            <summary>
            Block insertion.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Hatch">
            <summary>
            Hatch.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Leader">
            <summary>
            Leader.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Tolerance">
            <summary>
            Tolerance.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Wipeout">
            <summary>
            Wipeout.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Underlay">
            <summary>
            Underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdf">
            <summary>
            PDF underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwf">
            <summary>
            DWF underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgn">
            <summary>
            DGN underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDefinition">
            <summary>
            Underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdfDefinition">
            <summary>
            PDF underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwfDefinition">
            <summary>
            DWF underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgnDefinition">
            <summary>
            DGN underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AttributeDefinition">
            <summary>
            Attribute definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Vertex">
            <summary>
            Vertex.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSequence">
            <summary>
            End sequence.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ArcDimension">
            <summary>
            Arc Length Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dictionary">
            <summary>
            Dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.XRecord">
            <summary>
            XRecord.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Image">
            <summary>
            Raster image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Viewport">
            <summary>
            Viewport entity.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDef">
            <summary>
            Image definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefReactor">
            <summary>
            Image definition reactor.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.RasterVariables">
            <summary>
            Raster variables.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Group">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layout">
            <summary>
            Layouts.
            </summary>
        </member>
        <member name="T:netDxf.DxfObjectReference">
            <summary>
            Represent a reference to a TableObject.
            </summary>
        </member>
        <member name="M:netDxf.DxfObjectReference.#ctor(netDxf.DxfObject,System.Int32)">
            <summary>
            Initializes a new instance of the <c>DxfObjectReference</c> class.
            </summary>
            <param name="reference">DxfObject reference.</param>
            <param name="uses">Number of times the specified reference uses the table object.</param>
        </member>
        <member name="P:netDxf.DxfObjectReference.Reference">
            <summary>
            Gets the DxfObject that references the table object.
            </summary>
        </member>
        <member name="P:netDxf.DxfObjectReference.Uses">
            <summary>
            Gets the number of times this reference uses the table object.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AlignedDimension">
            <summary>
            Represents a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see> that is aligned the reference line.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.DimLinePosition">
            <summary>
            Gets the location of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Offset">
            <summary>
            Gets or sets the distance between the reference line and the dimension line.
            </summary>
            <remarks>
            The positive side at which the dimension line is drawn depends of the direction of its reference line.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.Clone">
            <summary>
            Creates a new AlignedDimension that is a copy of the current instance.
            </summary>
            <returns>A new AlignedDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Angular2LineDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.CenterPoint">
            <summary>
            Gets the center <see cref="T:netDxf.Vector2">point</see> of the measured arc in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartFirstLine">
            <summary>
            Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndFirstLine">
            <summary>
            End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartSecondLine">
            <summary>
            Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndSecondLine">
            <summary>
            End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
            <remarks>
            Offset values cannot be negative and, even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
            <remarks>
            The start and end points of the reference lines will be modified,
            the angle measurement is always made from the direction of the first line to the direction of the second line.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting reference lines are parallel.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.Clone">
            <summary>
            Creates a new Angular2LineDimension that is a copy of the current instance.
            </summary>
            <returns>A new Angular2LineDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Angular3PointDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc">Angle <see cref="T:netDxf.Entities.Arc">arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to measure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to measure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.StartPoint">
            <summary>
            Gets or sets the angle start <see cref="T:netDxf.Vector2">point</see> of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.EndPoint">
            <summary>
            Gets or sets the angle end <see cref="T:netDxf.Vector2">point</see> of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
            <remarks>
            Positive values will measure the angle between the start point and the end point while negative values will measure the opposite arc angle.
            Even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting reference lines are parallel.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.Clone">
            <summary>
            Creates a new Angular3PointDimension that is a copy of the current instance.
            </summary>
            <returns>A new Angular3PointDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Arc">
            <summary>
            Represents a circular arc <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="startPoint">Arc start point.</param>
            <param name="endPoint">Arc end point.</param>
            <param name="bulge">Bulge value.</param>
        </member>
        <member name="P:netDxf.Entities.Arc.Center">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Thickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the arc in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the arc expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.ToPolyline2D(System.Int32)">
            <summary>
            Converts the arc in a Polyline2D.
            </summary>
            <param name="precision">Number of divisions.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the arc.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, create an ellipse arc from the arc data and transform that instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Arc.Clone">
            <summary>
            Creates a new Arc that is a copy of the current instance.
            </summary>
            <returns>A new Arc that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ArcLengthDimension">
            <summary>
            Represents an arc length dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="arc">Angle <see cref="T:netDxf.Entities.Arc">arc</see> to measure.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Entities.Polyline2DVertex,netDxf.Entities.Polyline2DVertex,System.Double)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="startPoint">Arc start point, the start point bulge must be different than zero.</param>
            <param name="endPoint">Arc end point.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="startPoint">Arc start point.</param>
            <param name="endPoint">Arc end point.</param>
            <param name="bulge">Bulge value.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="startPoint">Arc start point.</param>
            <param name="endPoint">Arc end point.</param>
            <param name="bulge">Bulge value.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="center">Center of the angle arc to measure.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>ArcLengthDimension</c> class.
            </summary>
            <param name="center">Center of the angle arc to measure.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
            <param name="offset">Distance between the center of the measured arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.Offset">
            <summary>
            Gets or sets the distance between the center of the measured arc and the dimension line.
            </summary>
            <remarks>
            Positive values will measure the arc length between the start point and the end point while negative values will measure the opposite arc length.
            Even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.ArcAngle">
            <summary>
            Gets the angle of the measured arc in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ArcLengthDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
            <remarks>
            The start and end points of the reference lines will be modified,
            the angle measurement is always made from the direction of the center-first point line to the direction of the center-second point line.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity is not supported, the measured circular arc will become an elliptical arc.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.ArcLengthDimension.Clone">
            <summary>
            Creates a new ArcLengthDimension that is a copy of the current instance.
            </summary>
            <returns>A new ArcLengthDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Attribute">
            <summary>
            Represents an attribute.
            </summary>
            <remarks>
            The attribute position, rotation, height and width factor values also includes the transformation of the <see cref="T:netDxf.Entities.Insert">Insert</see> entity to which it belongs.<br />
            During the attribute initialization a copy of all attribute definition properties will be copied,
            so any changes made to the attribute definition will only be applied to new attribute instances and not to existing ones.
            This behavior is to allow imported <see cref="T:netDxf.Entities.Insert">Insert</see> entities to have attributes without definition in the block, 
            although this might sound not totally correct it is allowed by AutoCad.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Attribute.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.Attribute.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.Attribute.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Transparency">
            <summary>
            Gets or sets layer transparency (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Definition">
            <summary>
            Gets the attribute definition.
            </summary>
            <remarks>If the insert attribute has no definition it will return null.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Tag">
            <summary>
            Gets the attribute tag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Style">
            <summary>
            Gets or sets the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsBackward">
            <summary>
            Gets or sets if the attribute text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsUpsideDown">
            <summary>
            Gets or sets if the attribute text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Attribute.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current attribute given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.Clone">
            <summary>
            Creates a new Attribute that is a copy of the current instance.
            </summary>
            <returns>A new Attribute that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Entities.AttributeChangeEventArgs.#ctor(netDxf.Entities.Attribute)">
            <summary>
            Initializes a new instance of <c>AttributeChangeEventArgs</c>.
            </summary>
            <param name="item">The attribute that is being added or removed from the insert.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeChangeEventArgs.Item">
            <summary>
            Gets the attribute that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeDefinition">
            <summary>
            Represents an attribute definition.
            </summary>
            <remarks>
            AutoCad allows to have duplicate tags in the attribute definitions list, but this library does not.
            To have duplicate tags is not recommended in any way, since there will be now way to know which is the definition associated to the insert attribute.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
            <param name="textHeight">Height of the attribute definition text.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.AttributeDefinition.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.AttributeDefinition.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Transparency">
            <summary>
            Gets or sets layer transparency (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Tag">
            <summary>
            Gets the attribute identifier.
            </summary>
            <remarks>
            Even thought the official DXF documentation clearly says that the attribute definition tag cannot contain spaces,
            most programs seems to allow them, but I cannot guarantee that all will behave this way.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Prompt">
            <summary>
            Gets or sets the attribute information text.
            </summary>
            <remarks>This is the text prompt shown to introduce the attribute value when new Insert entities are inserted into the drawing.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Value">
            <summary>
            Gets or sets the attribute default value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Style">
            <summary>
            Gets or sets  the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see> in object coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsBackward">
            <summary>
            Gets or sets if the attribute definition text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsUpsideDown">
            <summary>
            Gets or sets if the attribute definition text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current attribute definition given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.Clone">
            <summary>
            Creates a new AttributeDefinition that is a copy of the current instance.
            </summary>
            <returns>A new AttributeDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.AttributeFlags">
            <summary>Attribute flags.</summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.None">
            <summary>
            No flags equivalent to Visible/Not constant/Not verify/Not Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Hidden">
            <summary>
            Attribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Verify">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Predefined">
            <summary>
            Attribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:netDxf.Entities.Circle">
            <summary>
            Represents a circle <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="P:netDxf.Entities.Circle.Center">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Radius">
            <summary>
            Gets or set the circle radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Thickness">
            <summary>
            Gets or sets the circle thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the circle in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the circle expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.ToPolyline2D(System.Int32)">
            <summary>
            Converts the circle in a Polyline2D.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the circle.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, create an ellipse from the circle data and transform that instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Circle.Clone">
            <summary>
            Creates a new Circle that is a copy of the current instance.
            </summary>
            <returns>A new Circle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.DatumReferenceValue">
            <summary>
            Represents datum reference, a theoretically exact point, axis, or plane from which you make measurements and verify dimensions. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.#ctor">
            <summary>
            Initializes a new instance of the <c>DatumReferenceValue</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.#ctor(System.String,netDxf.Entities.ToleranceMaterialCondition)">
            <summary>
            Initializes a new instance of the <c>DatumReferenceValue</c> class.
            </summary>
            <param name="value">Datum reference value.</param>
            <param name="materialCondition">Datum material condition.</param>
        </member>
        <member name="P:netDxf.Entities.DatumReferenceValue.Value">
            <summary>
            Gets or sets the datum value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DatumReferenceValue.MaterialCondition">
            <summary>
            Gets or sets the datum material condition. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.Clone">
            <summary>
            Creates a new DatumReferenceValue that is a copy of the current instance.
            </summary>
            <returns>A new DatumReferenceValue that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.DiametricDimension">
            <summary>
            Represents a diametric dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the circumference in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.ReferencePoint">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector2">point</see> on circumference or arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the reference point and dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting center and reference points are the same.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.Clone">
            <summary>
            Creates a new DiametricDimension that is a copy of the current instance.
            </summary>
            <returns>A new DiametricDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Dimension">
            <summary>
            Represents the base class for a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <reamarks>
            Once a dimension is added to the DXF document, its properties should not be modified or the changes will not be reflected in the saved DXF file.
            </reamarks>
        </member>
        <member name="M:netDxf.Entities.Dimension.#ctor(netDxf.Entities.DimensionType)">
            <summary>
            Initializes a new instance of the <c>Dimension</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.DefinitionPoint">
            <summary>
            Gets the reference <see cref="T:netDxf.Vector2">position</see> for the dimension line in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextPositionManuallySet">
            <summary>
            Gets or sets if the text reference point has been set by the user. Set to false to reset the dimension text to its original position.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextReferencePoint">
            <summary>
            Gets or sets the text reference <see cref="T:netDxf.Vector2">position</see>, the middle point of dimension text in local coordinates.
            </summary>
            <remarks>
            This value is related to the style property <c>FitTextMove</c>.
            If the style FitTextMove is set to BesidesDimLine the text reference point will take precedence over the offset value to place the dimension line.
            In case of Ordinate dimensions if the text has been manually set the text position will take precedence over the EndLeaderPoint only if FitTextMove
            has been set to OverDimLineWithoutLeader.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Style">
            <summary>
            Gets or sets the style associated with the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.StyleOverrides">
            <summary>
            Gets the dimension style overrides list.
            </summary>
            <remarks>Any dimension style value stored in this list will override its corresponding value in the assigned style to the dimension.</remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.DimensionType">
            <summary>
            Gets the dimension type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.Measurement">
            <summary>
            Gets the actual measurement.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.AttachmentPoint">
            <summary>
            Gets or sets the dimension text attachment point.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingStyle">
            <summary>
            Get or sets the dimension text <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingFactor">
            <summary>
            Gets or sets the dimension text line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.00, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Block">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <remarks>
            Set this value to null to force the program that reads the resulting DXF file to generate the dimension drawing block,
            some programs do not even care about this block and will always generate their own dimension drawings.<br />
            You can even use your own dimension drawing setting this value with the resulting block.
            The assigned block name is irrelevant, it will be automatically modified to accommodate the naming conventions of the blocks for dimension (*D#).<br />
            The block will be overwritten when adding the dimension to a <see cref="T:netDxf.DxfDocument">DxfDocument</see> if <c>BuildDimensionBlocks</c> is set to true.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextRotation">
            <summary>
            Gets or sets the rotation angle in degrees of the dimension text away from its default orientation(the direction of the dimension line).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.UserText">
            <summary>
            Gets or sets the dimension text explicitly.
            </summary>
            <remarks>
            Dimension text explicitly entered by the user. Optional; default is the measurement.
            If null or "&lt;&gt;", the dimension measurement is drawn as the text,
            if " " (one blank space), the text is suppressed. Anything else is drawn as the text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Elevation">
            <summary>
            Gets or sets the dimension elevation, its position along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns> The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Dimension.Update">
            <summary>
            Updates the internal data of the dimension and if needed it rebuilds the block definition of the actual dimension.
            </summary>
            <remarks>
            This method needs to be manually called to reflect any change made to the dimension properties (geometry and/or style).
            </remarks>
        </member>
        <member name="T:netDxf.Entities.DimensionArrowhead">
            <summary>
            Predefined shapes for dimension style arrowheads.
            </summary>
            <remarks>
            Arrowhead block names and its representation.<br/>
            "" = closed filled<br/>
            "_DOT" = dot<br/>
            "_DOTSMALL" = dot small<br/>
            "_DOTBLANK" = dot blank<br/>
            "_ORIGIN" = origin indicator<br/>
            "_ORIGIN2" = origin indicator 2<br/>
            "_OPEN" = open<br/>
            "_OPEN90" = open 90 (right angle)<br/>
            "_OPEN30" = open 30<br/>
            "_CLOSED" = closed<br/>
            "_SMALL" = dot small blank<br/>
            "_NONE" = none<br/>
            "_OBLIQUE" = oblique<br/>
            "_BOXFILLED" = box filled<br/>
            "_BOXBLANK" = box<br/>
            "_CLOSEDBLANK" = closed blank<br/>
            "_DATUMFILLED" = datum triangle filled<br/>
            "_DATUMBLANK" = datum triangle<br/>
            "_INTEGRAL" = integral<br/>
            "_ARCHTICK" = architectural tick<br/>
            </remarks>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Dot">
            <summary>
            Dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotSmall">
            <summary>
            Small dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotBlank">
            <summary>
            Blank dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.OriginIndicator">
            <summary>
            Origin indicator arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.OriginIndicator2">
            <summary>
            Origin indicator 2 arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open">
            <summary>
            Open arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open90">
            <summary>
            Open 90 degree arrowhead (right angle arrowhead).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open30">
            <summary>
            Open 30 degree angle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Closed">
            <summary>
            Closed arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotSmallBlank">
            <summary>
            Small blank dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.None">
            <summary>
            Empty arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Oblique">
            <summary>
            Oblique arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.BoxFilled">
            <summary>
            Filled box arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Box">
            <summary>
            Box arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.ClosedBlank">
            <summary>
            Blank closed arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DatumTriangleFilled">
            <summary>
            Filled datum triangle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DatumTriangle">
            <summary>
            Datum triangle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Integral">
            <summary>
            Integral symbol arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.ArchitecturalTick">
            <summary>
            Architectural tick arrowhead.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionBlock">
            <summary>
            Holds methods to build the dimension blocks.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Dimension)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Dimension">Dimension</see> from which the block will be created.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            By the fault the block will have the name "DimBlock". The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Dimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Dimension">Dimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.AlignedDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.AlignedDimension">AlignedDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.LinearDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.LinearDimension">LinearDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Angular2LineDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Angular2LineDimension">Angular2LineDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Angular3PointDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Angular3PointDimension">Angular3PointDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.DiametricDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.DiametricDimension">DiametricDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.RadialDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.RadialDimension">RadialDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.OrdinateDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.OrdinateDimension">OrdinateDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.ArcLengthDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.ArcLengthDimension">ArcLengthDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.DimensionType">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.ArcLength">
            <summary>
            Arc Length.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionTypeFlags">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.BlockReference">
            <summary>
            Indicates that the block reference (group code 2) is referenced by this dimension only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.OrdinateType">
            <summary>
            Ordinate type. This is a bit value (bit 7) used only with integer value 6. If set, ordinate is X-type; if not set, ordinate is Y-type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.UserTextPosition">
            <summary>
            This is a bit value (bit 8) added to the other group 70 values if the dimension text has been positioned at a user-defined location rather than at the default location.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Ellipse">
            <summary>
            Represents an ellipse <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector2">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>
            The center Z coordinate represents the elevation of the ellipse along the normal.
            The major axis is always measured along the ellipse local X axis,
            while the minor axis is along the local Y axis.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>
            The center Z coordinate represents the elevation of the ellipse along the normal.
            The major axis is always measured along the ellipse local X axis,
            while the minor axis is along the local Y axis.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Center">
            <summary>
            Gets or sets the ellipse <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MajorAxis">
            <summary>
            Gets or sets the ellipse mayor axis.
            </summary>
            <remarks>The major axis is always measured along the ellipse local X axis.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MinorAxis">
            <summary>
            Gets or sets the ellipse minor axis.
            </summary>
            <remarks>The minor axis is always measured along the ellipse local Y axis.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Rotation">
            <summary>
            Gets or sets the ellipse local rotation in degrees along its normal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.StartAngle">
            <summary>
            Gets or sets the ellipse start angle in degrees.
            </summary>
            <remarks>To get a full ellipse set the start angle equal to the end angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.EndAngle">
            <summary>
            Gets or sets the ellipse end angle in degrees.
            </summary>
            <remarks>To get a full ellipse set the end angle equal to the start angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Thickness">
            <summary>
            Gets or sets the ellipse thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.IsFullEllipse">
            <summary>
            Checks if the actual instance is a full ellipse.
            </summary>
            <remarks>An ellipse is considered full when its start and end angles are equal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.SetAxis(System.Double,System.Double)">
            <summary>
            Sets the ellipse major and minor axis from the two parameters.
            </summary>
            <param name="axis1">Ellipse axis.</param>
            <param name="axis2">Ellipse axis.</param>
            <remarks>
            It is not required that axis1 is greater than axis2. The larger value will be assigned as major axis and the lower as minor axis.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolarCoordinateRelativeToCenter(System.Double)">
            <summary>
            Calculate the local point on the ellipse for a given angle relative to the center.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>A local point on the ellipse for the given angle relative to the center.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the ellipse in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the ellipse expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.ToPolyline2D(System.Int32)">
            <summary>
            Converts the ellipse in a Polyline2D.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the ellipse.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.Clone">
            <summary>
            Creates a new Ellipse that is a copy of the current instance.
            </summary>
            <returns>A new Ellipse that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.EndSequence">
            <summary>
            Represents the terminator element of a vertex sequence in polylines or attributes in a block reference.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EndSequence.#ctor">
            <summary>
            Initializes a new instance of the <c>EndSequence</c> class.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityChangeEventArgs">
            <summary>
            Represents the arguments thrown when the reference of an entity is added ore removed from another entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>EntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from another entity.</param>
        </member>
        <member name="P:netDxf.Entities.EntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityObject">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Reactors">
            <summary>
            Gets the list of DXF objects that has been attached to this entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Lineweight">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Lineweight">line weight</see>, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Transparency">
            <summary>
            Gets or sets layer <see cref="P:netDxf.Entities.EntityObject.Transparency">transparency</see> (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityObject.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.EntityObject.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.EntityObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.EntityObject.Clone">
            <summary>
            Creates a new entity that is a copy of the current instance.
            </summary>
            <returns>A new entity that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.EntityType">
            <summary>
            Defines the entity type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Face3D">
            <summary>
            3d face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Image">
            <summary>
            A raster image entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Insert">
            <summary>
            Block insertion entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Leader">
            <summary>
            Leader entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Mesh">
            <summary>
            Mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MLine">
            <summary>
            Multiline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MText">
            <summary>
            Multiline text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMesh">
            <summary>
            Polyface mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolygonMesh">
            <summary>
            Polygon mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline2D">
            <summary>
            Polyline2D entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline3D">
            <summary>
            Polyline3D entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ray">
            <summary>
            Ray entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Shape">
            <summary>
            Shape entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Solid">
            <summary>
            Solid entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Text">
            <summary>
            Text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Tolerance">
            <summary>
            Tolerance entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Trace">
            <summary>
            Trace entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Underlay">
            <summary>
            Underlay entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Viewport">
            <summary>
            Viewport entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Wipeout">
            <summary>
            Wipeout entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.XLine">
            <summary>
            XLine entity.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Face3D">
            <summary>
            Represents a 3d Face <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector2">third vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector2">third vertex</see>.</param>
            <param name="fourthVertex">Face3D <see cref="T:netDxf.Vector2">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector3">third vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3D.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">Face3D <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">Face3D <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">Face3D <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">Face3D <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Face3D.FirstVertex">
            <summary>
            Gets or sets the first Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.SecondVertex">
            <summary>
            Gets or sets the second Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.ThirdVertex">
            <summary>
            Gets or sets the third Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.FourthVertex">
            <summary>
            Gets or sets the fourth Face3D <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3D.EdgeFlags">
            <summary>
            Gets or sets the Face3D edge visibility.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3D.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Face3D.Clone">
            <summary>
            Creates a new Face3D that is a copy of the current instance.
            </summary>
            <returns>A new Face3D that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Face3DEdgeFlags">
            <summary>
            Defines the Face3D hidden edges.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.None">
            <summary>
            No flags equivalent to all edges are visible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.First">
            <summary>
            First edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.Second">
            <summary>
            Second edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.Third">
            <summary>
            Third edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3DEdgeFlags.Fourth">
            <summary>
            Fourth edge is invisible.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Hatch">
            <summary>
            Represents a hatch <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            This constructor is initialized with an empty list of boundary paths, remember a hatch without boundaries will be discarded when saving the file.<br/>
            When creating an associative hatch do not add the entities that make the boundary to the document, it will be done automatically. Doing so will throw an exception.<br/>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omitted (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="associative">Defines if the hatch is associative or not.</param>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchBoundaryPath},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omitted (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="paths">A list of <see cref="T:netDxf.Entities.HatchBoundaryPath">boundary paths</see>.</param>
            <param name="associative">Defines if the hatch is associative or not.</param>
        </member>
        <member name="P:netDxf.Entities.Hatch.Pattern">
            <summary>
            Gets the hatch pattern.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.BoundaryPaths">
            <summary>
            Gets the hatch boundary paths.
            </summary>
            <remarks>
            The hatch must contain at least on valid boundary path to be able to add it to the DxfDocument, otherwise it will be rejected.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Hatch.Associative">
            <summary>
            Gets if the hatch is associative or not, which means if the hatch object is associated with the hatch boundary entities.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Elevation">
            <summary>
            Gets or sets the hatch elevation, its position along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.UnLinkBoundary">
            <summary>
            Unlinks the boundary from the hatch, turning the associative property to false.
            </summary>
            <returns>The list of unlinked entities from the boundary of the hatch.</returns>
            <remarks>The entities that make the hatch boundaries will not be deleted from the document if they already belong to one.</remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.CreateBoundary(System.Boolean)">
            <summary>
            Creates a list of entities that represents the boundary of the hatch and optionally associates to it.
            </summary>
            <param name="linkBoundary">Indicates if the new boundary will be associated with the hatch, turning the associative property to true.</param>
            <returns>A list of entities that makes the boundary of the hatch.</returns>
            <remarks>
            If the actual hatch is already associative, the old boundary entities will be unlinked, but not deleted from the hatch document.
            If linkBoundary is true, the new boundary entities will be added to the same layout and document as the hatch, in case it belongs to one,
            so, in this case, if you also try to add the return list to the document it will cause an error.<br/>
            All entities are in world coordinates except the Polyline2D boundary path since by definition its vertexes are expressed in object coordinates.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.Clone">
            <summary>
            Creates a new Hatch that is a copy of the current instance.
            </summary>
            <returns>A new Hatch that is a copy of this instance.</returns>
            <remarks>
            If the hatch is associative the referenced boundary entities will not be automatically cloned, its associative property will be set to false.
            Use CreateBoundary if required after cloning.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath">
            <summary>
            Represent a loop of a <see cref="T:netDxf.Entities.Hatch">hatch</see> boundaries.
            </summary>
            <remarks>
            The entities that make a loop can be any combination of lines, light weight polylines, polylines, circles, arcs, ellipses, and splines.<br />
            The entities that define a loop should define a closed path, they have to be on the same plane as the hatch, and with the same normal;
            if these conditions are not met the result might be unpredictable. <br />
            Entities expressed in 3d coordinates like lines, polylines, and splines will be projected into its local plane.
            All edges that make a HatchBoundaryPath are 2d objects, only have X and Y coordinates.
            This is why to avoid unexpected results, it is important that all entities that define the paths have the same normal, same reference plane.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.EdgeType">
            <summary>
            Specifies the type of HatchBoundaryPath.Edge.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Edge">
            <summary>
            Base class for all types of HatchBoundaryPath edges.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Edge.Type">
            <summary>
            Gets the HatchBoundaryPath edge type
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Edge.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An EntityObject equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Edge.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Polyline">
            <summary>
            Represents a polyline edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Polyline.Vertexes">
            <summary>
            Gets or sets the list of polyline vertexes.
            </summary>
            <remarks>
            The position of the vertex is defined by the X and Y coordinates, the Z value represents the bulge at that vertex.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Polyline.IsClosed">
            <summary>
            Gets if the polyline is closed.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.HatchBoundaryPath.Line">lines</see> and <see cref="T:netDxf.Entities.HatchBoundaryPath.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.HatchBoundaryPath.Line">lines</see> and <see cref="T:netDxf.Entities.HatchBoundaryPath.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Line">
            <summary>
            Represents a line edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Line.Start">
            <summary>
            Gets or sets the start point of the line.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Line.End">
            <summary>
            Gets or sets the end point of the line.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Line</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Creates a BoundaryBoundaryPath from an <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see>.</param>
            <returns>A HatchBoundaryPath line.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Arc">
            <summary>
            Represents an arc edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.Center">
            <summary>
            Gets or set the center of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.Radius">
            <summary>
            Gets or sets the radius of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.StartAngle">
            <summary>
            Gets or sets the start angle of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.EndAngle">
            <summary>
            Gets or sets the end angle of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.IsCounterclockwise">
            <summary>
            Gets or sets if the arc is counter clockwise.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Ellipse">
            <summary>
            Represents a ellipse edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.Center">
            <summary>
            Gets or sets the center of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.EndMajorAxis">
            <summary>
            Gets or sets the position of the end of the major axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.MinorRatio">
            <summary>
            Gets or sets the scale of the minor axis in respect of the major axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.StartAngle">
            <summary>
            Gets or sets the start angle of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.EndAngle">
            <summary>
            Gets or sets the end angle of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.IsCounterclockwise">
            <summary>
            Gets or sets if the ellipse is counter clockwise.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Spline">
            <summary>
            Represents a spline edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.Degree">
            <summary>
            Gets or sets the degree of the spline
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.IsRational">
            <summary>
            Gets or sets if the spline is rational.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.IsPeriodic">
            <summary>
            Gets or sets if the spline is periodic.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.Knots">
            <summary>
            Gets or sets the list of knots of the spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.ControlPoints">
            <summary>
            Gets or sets the list of control points of the spline.
            </summary>
            <remarks>
            The position of the control point is defined by the X and Y coordinates, the Z value represents its weight.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath</c> class.
            </summary>
            <param name="edges">List of entities that makes a loop for the hatch boundary paths.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.HatchBoundaryPath.Edge})">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath</c> class.
            </summary>
            <param name="edges">List of edges that makes a loop for the hatch boundary paths.</param>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Edges">
            <summary>
            Gets the list of edges that makes a loop for the hatch boundary path.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.PathType">
            <summary>
            Gets the boundary path type flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Entities">
            <summary>
            Gets the list of entities that makes the boundary.
            </summary>
            <remarks>If the boundary path belongs to a non-associative hatch this list will contain zero entities.</remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Update">
            <summary>
            Updates the internal HatchBoundaryPath data. 
            </summary>
            <remarks>
            It is necessary to manually call this method when changes to the boundary entities are made. This is only applicable to associative hatches,
            non-associative hatches has no associated boundary entities.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Clone">
            <summary>
            Creates a new HatchBoundaryPath that is a copy of the current instance.
            </summary>
            <returns>A new HatchBoundaryPath that is a copy of this instance.</returns>
            <remarks>When cloning a HatchBoundaryPath, if it has entities that defines its contour, they will not be cloned.</remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPathTypeFlags">
            <summary>
            Defines the boundary path type of the hatch.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.External">
            <summary>
            External.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Derived">
            <summary>
            Derived.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Textbox">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Outermost">
            <summary>
            Outermost.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchFillType">
            <summary>
            Hatch pattern fill type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchFillType.PatternFill">
            <summary>
            Pattern fill.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchFillType.SolidFill">
            <summary>
            Solid fill.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPattern">
            <summary>
            Represents the hatch gradient pattern style.
            </summary>
            <remarks>
            Gradient patterns are only supported by AutoCad2004 and higher DXF versions. It will default to a solid pattern if saved as AutoCad2000.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.GradientType">
            <summary>
            Gets or set the gradient pattern <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color1">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 1.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color2">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 2.
            </summary>
            <remarks>
            If color 2 is defined, automatically the single color property will be set to false.  
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.SingleColor">
            <summary>
            Gets or sets the gradient pattern color type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Tint">
            <summary>
            Gets or sets the gradient pattern tint.
            </summary>
            <remarks>It only applies to single color gradient patterns.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Centered">
            <summary>
            Gets or sets if the pattern is centered or not.
            </summary>
            <remarks>
            Each gradient has two definitions, shifted and unsifted. A shift value describes the blend of the two definitions that should be used.
            A value of 0.0 (false) means only the unsifted version should be used, and a value of 1.0 (true) means that only the shifted version should be used.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPatternType">
            <summary>
            Gradient pattern types.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Cylinder">
            <summary>
            Cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCylinder">
            <summary>
            Inverse cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Spherical">
            <summary>
            Spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvSpherical">
            <summary>
            Inverse spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Hemispherical">
            <summary>
            Hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvHemispherical">
            <summary>
            Inverse hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Curved">
            <summary>
            Curved.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCurved">
            <summary>
            Inverse curved.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchPattern">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Hatch">hatch</see> pattern style.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchPatternLineDefinition})">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="lineDefinitions">The definition of the lines that make up the pattern (not applicable in Solid fills).</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchPatternLineDefinition},System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="lineDefinitions">The definition of the lines that make up the pattern (not applicable in Solid fills).</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Solid">
            <summary>
            Solid hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Line">
            <summary>
            Lines hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Net">
            <summary>
            Net or squares hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Dots">
            <summary>
            Dots hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Name">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Description">
            <summary>
            Gets or sets the hatch description (optional, this information is not saved in the DXF file).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Style">
            <summary>
            Gets the hatch style.
            </summary>
            <remarks>Only normal style is implemented.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Type">
            <summary>
            Gets or sets the hatch pattern type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Fill">
            <summary>
            Gets the solid fill flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Origin">
            <summary>
            Gets or sets the pattern origin.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Angle">
            <summary>
            Gets or sets the pattern angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Scale">
            <summary>
            Gets or sets the pattern scale (not applicable in Solid fills).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.LineDefinitions">
            <summary>
            Gets the definition of the lines that make up the pattern (not applicable in Solid fills).
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.NamesFromFile(System.String)">
            <summary>
            Gets the list of hatch pattern names defined in a PAT file.
            </summary>
            <param name="file">Hatch pattern definitions file.</param>
            <returns>List of hatch pattern names contained in the specified PAT file.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.Load(System.String,System.String)">
            <summary>
            Creates a new hatch pattern from the definition in a PAT file.
            </summary>
            <param name="file">PAT file where the definition is located.</param>
            <param name="patternName">Name of the pattern definition that wants to be read (ignore case).</param>
            <returns>A Hatch pattern as defined in the PAT file.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.Save(System.String)">
            <summary>
            Saves the current linetype to the specified file, if the file does not exist it creates a new one.
            </summary>
            <param name="file">File where the current linetype will be saved.</param>
        </member>
        <member name="T:netDxf.Entities.HatchPatternLineDefinition">
            <summary>
            Defines a single line thats is part of a <see cref="T:netDxf.Entities.HatchPattern">hatch pattern</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchPatternLineDefinition</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Angle">
            <summary>
            Gets or sets the angle of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Origin">
            <summary>
            Gets or sets the origin of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Delta">
            <summary>
            Gets or sets the local displacements between lines of the same family.
            </summary>
            <remarks>
            The Delta.X value indicates the displacement between members of the family in the direction of the line. It is used only for dashed lines.
            The Delta.Y value indicates the spacing between members of the family; that is, it is measured perpendicular to the lines. 
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.DashPattern">
            <summary>
            Gets he dash pattern of the line it is equivalent as the segments of a <see cref="T:netDxf.Tables.Linetype">Linetype</see>.
            </summary>
            <remarks>
            Positive values means solid segments and negative values means spaces (one entry per element).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.Clone">
            <summary>
            Creates a new HatchPatternLineDefinition that is a copy of the current instance.
            </summary>
            <returns>A new HatchPatternLineDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchStyle">
            <summary>
            Hatch pattern style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Normal">
            <summary>
            Hatch "odd parity" area.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Outer">
            <summary>
            Hatch outermost area only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Ignore">
            <summary>
            Hatch through entire area.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchType">
            <summary>
            Hatch pattern type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.UserDefined">
            <summary>
            User defined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Predefined">
            <summary>
            Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Image">
            <summary>
            Represents a raster image <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="size">Image <see cref="T:netDxf.Vector2">size</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector3,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="size">Image <see cref="T:netDxf.Vector2">size</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="width">Image width in world coordinates.</param>
            <param name="height">Image height in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="width">Image width in world coordinates.</param>
            <param name="height">Image height in world coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.Image.Position">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Uvector">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector2">U-vector</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Vvector">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector2">V-vector</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Height">
            <summary>
            Gets or sets the height of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Width">
            <summary>
            Gets or sets the width of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Rotation">
            <summary>
            Gets or sets the image rotation in degrees.
            </summary>
            <remarks>The image rotation is the angle of the U-vector.</remarks>
        </member>
        <member name="P:netDxf.Entities.Image.Definition">
            <summary>
            Gets the <see cref="T:netDxf.Objects.ImageDefinition">image definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Clipping">
            <summary>
            Gets or sets the clipping state: false = off, true = on.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Brightness">
            <summary>
            Gets or sets the brightness value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Contrast">
            <summary>
            Gets or sets the contrast value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Fade">
            <summary>
            Gets or sets the fade value (0-100; default = 0)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.DisplayOptions">
            <summary>
            Gets or sets the image display options.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.ClippingBoundary">
            <summary>
            Gets or sets the image clipping boundary.
            </summary>
            <remarks>
            The vertexes coordinates of the clipping boundary are expressed in local coordinates of the image in pixels.
            Set as null to restore the default clipping boundary, full image.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Image.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Image.Clone">
            <summary>
            Creates a new Image that is a copy of the current instance.
            </summary>
            <returns>A new Image that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ImageDisplayFlags">
            <summary>
            Image display options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImage">
            <summary>
            Show image.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImageWhenNotAlignedWithScreen">
            <summary>
            Show image when not aligned with screen.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.UseClippingBoundary">
            <summary>
            Use clipping boundary.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.TransparencyOn">
            <summary>
            Transparency on.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Insert">
            <summary>
            Represents a block insertion <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector3">point</see> in world coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.Insert.DefaultInsUnits">
            <summary>
            Gets or sets the default drawing units to obtain the Insert transformation matrix, when the current Insert entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Attributes">
            <summary>
            Gets the insert list of <see cref="T:netDxf.Entities.Attribute">attributes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Block">
            <summary>
            Gets the insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Position">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Scale">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">scale</see>.
            </summary>
            <remarks>None of the vector scale components can be zero.</remarks>
        </member>
        <member name="P:netDxf.Entities.Insert.Rotation">
            <summary>
            Gets or sets the insert rotation along the normal vector in degrees.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.Sync">
            <summary>
            Updates the attribute list of the actual insert with the attribute definition list of the referenced block. This does not affect any value assigned to the Value property.
            </summary>
            <remarks>
            This method will automatically call the TransformAttributes method, to keep all attributes position and orientation up to date.<br />
            This method will does not change the values assigned to attributes in the actual insert, besides the ones modified by the TransformAttributes() method;
            position, normal, rotation, text height, width factor, oblique angle, is backwards, is upside down, and alignment values.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.GetTransformation">
            <summary>
            Gets the insert transformation matrix.
            </summary>
            <returns>The insert transformation matrix.</returns>
            <remarks>
            This method uses the DefaultInsUnits defined by the Insert class to obtain the scale between the drawing and the block units.
            Additionally, if the insert belongs to a block the units to use are the ones defined in the BlockRecord,
            and if the insert belongs to a layout the units to use are the ones defined in the document drawing variable InsUnits.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.GetTransformation(netDxf.Units.DrawingUnits)">
            <summary>
            Calculates the insertion rotation matrix.
            </summary>
            <param name="insertionUnits">The insertion units.</param>
            <returns>The insert transformation matrix.</returns>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformAttributes">
            <summary>
            Recalculate the attributes position, normal, rotation, height, width, width factor, oblique angle, backwards, and upside down properties from the transformation state of the insertion.
            </summary>
            <remarks>
            Making changes to the insert position, rotation, normal, and/or scale;
            when changing the block origin and/or units; or even the document insertion units will require this method to be called manually.<br />
            The attributes position, normal, rotation, text height, width factor, and oblique angle values includes the transformations applied to the insertion,
            if required this method will calculate the proper values according to the ones defined by the attribute definition.<br />
            All the attribute values can be changed manually independently to its definition,
            but, usually, you will want them to be transformed with the insert based on the local values defined by the attribute definition.<br />
            This method only applies to attributes that have a definition, some DXF files might generate attributes that have no definition in the block.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.Explode">
            <summary>
            Explodes the current insert.
            </summary>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.<br />
            The transformation will also be applied to the insert attributes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.Clone">
            <summary>
            Creates a new Insert that is a copy of the current instance.
            </summary>
            <returns>A new Insert that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Leader">
            <summary>
            Represents a leader <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="text">Leader text annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="text">Leader text annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Entities.ToleranceEntry,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="tolerance">Leader tolerance annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Entities.ToleranceEntry,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="tolerance">Leader tolerance annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Blocks.Block,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="block">Leader block annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Blocks.Block,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
            <param name="block">Leader block annotation.</param>
            <param name="vertexes">List of leader vertexes in local coordinates.</param>
            <param name="style">Leader style.</param>
        </member>
        <member name="P:netDxf.Entities.Leader.Style">
            <summary>
            Gets or sets the leader style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.StyleOverrides">
            <summary>
            Gets the dimension style overrides list.
            </summary>
            <remarks>
            Any dimension style value stored in this list will override its corresponding value in the assigned style.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.ShowArrowhead">
            <summary>
            Gets or sets if the arrowhead is drawn.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.PathType">
            <summary>
            Gets or sets the way the leader is drawn.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Vertexes">
            <summary>
            Gets the leader vertexes list in local coordinates.
            </summary>
            <remarks>
            The leader vertexes list must have at least two points.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Annotation">
            <summary>
            Gets or sets the leader annotation entity.
            </summary>
            <remarks>
            Only MText, Text, Tolerance, and Insert entities are supported as a leader annotation.
            Even if AutoCad allows a Text entity to be part of a Leader it is not recommended, always use a MText entity instead.
            <br />
            Set the annotation property to null to create a Leader without annotation.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Hook">
            <summary>
            Gets or sets the leader hook position (last leader vertex).
            </summary>
            <remarks>
            This property allows easy access to the last leader vertex, aka leader hook position.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.HasHookline">
            <summary>
            Gets if the leader has a hook line.
            </summary>
            <remarks>
            If set to true an additional vertex point (StartHookLine) will be created before the leader end point (hook).
            By default, only leaders with text annotation have hook lines.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.LineColor">
            <summary>
            Gets or sets the leader line color if the style parameter DIMCLRD is set as BYBLOCK.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Elevation">
            <summary>
            Gets or sets the leader elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the leader.</remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Offset">
            <summary>
            Gets or sets the offset from the last leader vertex (hook) to the annotation position.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Direction">
            <summary>
            Gets or sets the leader annotation direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.Update(System.Boolean)">
            <summary>
            Updates the leader entity to reflect the latest changes made to its properties.
            </summary>
            <param name="resetAnnotationPosition">
            If true the annotation position will be modified according to the position of the leader hook (last leader vertex),
            otherwise the leader hook will be moved according to the actual annotation position.
            </param>
            <remarks>
            This method should be manually called if the annotation position is modified, or the leader properties like Style, Annotation, TextVerticalPosition, and/or Offset.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Leader.ResetHookPosition">
            <summary>
            Resets the leader hook position according to the annotation position.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.ResetAnnotationPosition">
            <summary>
            Resets the annotation position according to the leader hook.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Leader.Clone">
            <summary>
            Creates a new Leader that is a copy of the current instance.
            </summary>
            <returns>A new Leader that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LeaderPathType">
            <summary>
            Controls the way the leader is drawn.
            </summary>
        </member>
        <member name="F:netDxf.Entities.LeaderPathType.StraightLineSegments">
            <summary>
            Draws the leader line as a set of straight line segments.
            </summary>
        </member>
        <member name="F:netDxf.Entities.LeaderPathType.Spline">
            <summary>
            Draws the leader line as a spline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Line">
            <summary>
            Represents a line <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="endPoint">Line <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="endPoint">Line end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Line.StartPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">start point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.EndPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">end point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Direction">
            <summary>
            Gets the direction of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.Reverse">
            <summary>
            Switch the line direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Line.Clone">
            <summary>
            Creates a new Line that is a copy of the current instance.
            </summary>
            <returns>A new Line that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LinearDimension">
            <summary>
            Represents a linear or rotated dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.DimLinePosition">
            <summary>
            Gets the location of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Rotation">
            <summary>
            Gets or sets the rotation of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Offset">
            <summary>
            Gets or sets the distance between the mid point of the reference line and the dimension line.
            </summary>
            <remarks>
            The positive side at which the dimension line is drawn depends of the direction of its reference line and the dimension rotation.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Measurement">
            <summary>
            Gets the actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.Clone">
            <summary>
            Creates a new LinearDimension that is a copy of the current instance.
            </summary>
            <returns>A new LinearDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Mesh">
            <summary>
            Represents a mesh <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Use this entity to overcome the limitations of the PolyfaceMesh, but, keep in mind that this entity was first introduced in AutoCad 2010.<br/>
            The maximum number of faces a mesh can have is 16000000 (16 millions).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Initializes a new instance of the <c>Mesh</c> class.
            </summary>
            <param name="vertexes">Mesh vertex list.</param>
            <param name="faces">Mesh faces list.</param>
        </member>
        <member name="M:netDxf.Entities.Mesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int32[]},System.Collections.Generic.IEnumerable{netDxf.Entities.MeshEdge})">
            <summary>
            Initializes a new instance of the <c>Mesh</c> class.
            </summary>
            <param name="vertexes">Mesh vertex list.</param>
            <param name="faces">Mesh faces list.</param>
            <param name="edges">Mesh edges list, this parameter is only really useful when it is required to assign creases values to edges.</param>
        </member>
        <member name="P:netDxf.Entities.Mesh.Vertexes">
            <summary>
            Gets the mesh vertexes list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.Faces">
            <summary>
            Gets the mesh faces list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.Edges">
            <summary>
            Gets the mesh edges list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.SubdivisionLevel">
            <summary>
            Gets or sets the mesh subdivision level.
            </summary>
            <remarks>
            The valid range is from 0 to 255. The recommended range is 0-5 to prevent creating extremely dense meshes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.Clone">
            <summary>
            Creates a new Mesh that is a copy of the current instance.
            </summary>
            <returns>A new Mesh that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MeshEdge">
            <summary>
            Represents an edge of a <see cref="T:netDxf.Entities.EntityObject">mesh</see> entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MeshEdge</c> class.
            </summary>
            <param name="startVertexIndex">The edge start vertex index.</param>
            <param name="endVertexIndex">The edge end vertex index.</param>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <c>MeshEdge</c> class.
            </summary>
            <param name="startVertexIndex">The edge start vertex index.</param>
            <param name="endVertexIndex">The edge end vertex index.</param>
            <param name="crease">The highest smoothing level at which the crease is retained  (default: 0.0).</param>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.StartVertexIndex">
            <summary>
            Gets or sets the edge start vertex index.
            </summary>
            <remarks>
            This value must be positive represent the position of the vertex in the mesh vertex list.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.EndVertexIndex">
            <summary>
            Gets or sets the edge end vertex index.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.Crease">
            <summary>
            Get or set the highest smoothing level at which the crease is retained. If the smoothing level exceeds this value, the crease is also smoothed.
            </summary>
            <remarks>
            Enter a value of 0 to remove an existing crease (no edge sharpening).<br/>
            Enter a value of -1 (any negative number will be reset to -1) to specify that the crease is always retained, even if the object or sub-object is smoothed or refined.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.ToString">
            <summary>
            Obtains a string that represents the mesh edge.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the mesh edge.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.Clone">
            <summary>
            Creates a new MeshEdge that is a copy of the current instance.
            </summary>
            <returns>A new MeshEdge that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MLine">
            <summary>
            Represents a multiline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
            <param name="isClosed">Sets if the multiline is closed (default: false).</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
            <param name="isClosed">Sets if the multiline is closed (default: false).</param>
        </member>
        <member name="P:netDxf.Entities.MLine.Vertexes">
            <summary>
            Gets the multiline <see cref="T:netDxf.Entities.MLineVertex">vertexes</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Elevation">
            <summary>
            Gets or sets the multiline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Scale">
            <summary>
            Gets or sets the multiline scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.IsClosed">
            <summary>
            Gets or sets if the multiline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoStartCaps">
            <summary>
            Gets or sets the suppression of start caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoEndCaps">
            <summary>
            Gets or sets the suppression of end caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Justification">
            <summary>
            Gets or sets the multiline justification.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Style">
            <summary>
            Gets or set the multiline style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Flags">
            <summary>
            MLine flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.Update">
            <summary>
            Calculates the internal information of the multiline vertexes.
            </summary>
            <remarks>
            <para>
            This function needs to be called manually when any modification is done that affects the final shape of the multiline.
            </para>
            <para>
            If the vertex distance list needs to be edited to represent trimmed multilines this function needs to be called prior to any modification.
            It will calculate the minimum information needed to build a correct multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.Explode">
            <summary>
            Decompose the actual multiline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the multiline.</returns>
        </member>
        <member name="M:netDxf.Entities.MLine.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported for multilines.
            Explode the entity and, in case round end caps has been applied, convert the arcs into ellipse arcs and transform them instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.Clone">
            <summary>
            Creates a new MLine that is a copy of the current instance.
            </summary>
            <returns>A new MLine that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MLineFlags">
            <summary>
            Flags (bit-coded values).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Has">
            <summary>
            Has at least one vertex (code 72 is greater than 0).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoStartCaps">
            <summary>
            Suppress start caps.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoEndCaps">
            <summary>
            Suppress end caps.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineJustification">
            <summary>
            Justification.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.MLine">multiline</see> vertex.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Position">
            <summary>
            Gets the MLine vertex position.
            </summary>
            <remarks>
            If this property is modified the function MLine.Update() will need to be called manually to update the internal information.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Direction">
            <summary>
            Gets the MLine vertex direction.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Miter">
            <summary>
            Gets the MLine vertex miter.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Distances">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MLine">multiline</see> vertex distances lists.
            </summary>
            <remarks>
            <para>
            There is a list for every MLineStyle element, and every list contains an array of real values
            that parametrize the start and end point of every element of the style.
            </para>
            <para>
            The first value (index 0) represents the distance from the segment vertex along the miter vector to the
            point where the line element's path intersects the miter vector.<br />
            The second value (index 1) is the distance along the line element's direction from the point,
            defined by the first value, to the actual start of the line element.<br />
            The successive values list the start and stop points of the line element breaks or cuts in this segment of the multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.Clone">
            <summary>
            Creates a new MLineVertex that is a copy of the current instance.
            </summary>
            <returns>A new MLineVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MText">
            <summary>
            Represents a multiline text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Formatting codes for MText, you can use them directly while setting the text value or use the Write() and EndParagraph() methods.<br />
            \L Start underline<br />
            \l Stop underline<br />
            \O Start overstrike<br />
            \o Stop overstrike<br />
            \K Start strike-through<br />
            \k Stop strike-through<br />
            \P New paragraph (new line)<br />
            \pxi Control codes for bullets, numbered paragraphs and columns<br />
            \X Paragraph wrap on the dimension line (only in dimensions)<br />
            \Q Slanting (obliquing) text by angle - e.g. \Q30;<br />
            \H Text height - e.g. \H3x;<br />
            \W Text width - e.g. \W0.8x;<br />
            \F Font selection<br />
            <br />
            e.g. \Fgdt;o - GDT-tolerance<br />
            e.g. \Fkroeger|b0|i0|c238|p10; - font Kroeger, non-bold, non-italic, code page 238, pitch 10<br />
            <br />
            \S Stacking, fractions<br />
            <br />
            e.g. \SA^B;<br />
            A<br />
            B<br />
            e.g. \SX/Y<br />
            X<br />
            -<br />
            Y<br />
            e.g. \S1#4;<br />
            1/4<br />
            <br />
            \A Alignment<br />
            \A0; = bottom<br />
            \A1; = center<br />
            \A2; = top<br />
            <br />
            \C Color change<br />
            \C1; = red<br />
            \C2; = yellow<br />
            \C3; = green<br />
            \C4; = cyan<br />
            \C5; = blue<br />
            \C6; = magenta<br />
            \C7; = white<br />
            <br />
            \T Tracking, char.spacing - e.g. \T2;<br />
            \~ Non-wrapping space, hard space<br />
            {} Braces - define the text area influenced by the code<br />
            \ Escape character - e.g. \\ = "\", \{ = "{"<br />
            <br />
            Codes and braces can be nested up to 8 levels deep.<br />
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.MText.DefaultMirrText">
            <summary>
            Gets or sets if the text will be mirrored when a symmetry is performed, when the current MText entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Rotation">
            <summary>
            Gets or sets the text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Height">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.LineSpacingFactor">
            <summary>
            Gets or sets the line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.0, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.LineSpacingStyle">
            <summary>
            Get or sets the <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
            <remarks>
            The only available options are AtLeast and Exact, Default and Multiple are only applicable to MTextParagraphOptions objects.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.DrawingDirection">
            <summary>
            Get or sets the <see cref="T:netDxf.Entities.MTextDrawingDirection">text drawing direction</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.RectangleWidth">
            <summary>
            Gets or sets the text reference rectangle width.
            </summary>
            <remarks>
            This value defines the width of the box where the text will fit.<br/>
            If a paragraph width is longer than the rectangle width it will be broken in several lines, using the word spaces as breaking points.<br/>
            If you specify a width of 0, word wrap is turned off and the width of the multiline text object is as wide as the longest line of text.
             </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.AttachmentPoint">
            <summary>
            Gets or sets the text <see cref="T:netDxf.Entities.MTextAttachmentPoint">attachment point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Position">
            <summary>
            Gets or sets the Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Value">
            <summary>
            Gets or sets the raw text string.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.WriteFraction(System.String,System.String,netDxf.Units.FractionFormatType)">
            <summary>
            Formats a text string to represent a fraction.
            </summary>
            <param name="numerator">Fraction numerator.</param>
            <param name="denominator">Fraction denominator.</param>
            <param name="fractionType">Style of the fraction.</param>
            <returns>A text string that represents the fraction.</returns>
            <remarks>
            In fractions the characters '/' and '#' are reserved if you need to write them you must write "\/" and "\#", respectively.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.WriteFraction(System.String,System.String,netDxf.Units.FractionFormatType,netDxf.Entities.MTextFormattingOptions)">
            <summary>
            Formats a text string to represent a fraction.
            </summary>
            <param name="numerator">Fraction numerator.</param>
            <param name="denominator">Fraction denominator.</param>
            <param name="fractionType">Style of the fraction.</param>
            <param name="options">Text formatting options.</param>
            <returns>A text string that represents the fraction.</returns>
            <remarks>
            In fractions the characters '/' and '#' are reserved if you need to write them you must write "\/" and "\#", respectively.<br />
            Do not combine fractions with super or subscript options, it is not supported (stacking commands cannot be nested).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.Write(System.String)">
            <summary>
            Adds the text to the current paragraph. 
            </summary>
            <param name="txt">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.MText.Write(System.String,netDxf.Entities.MTextFormattingOptions)">
            <summary>
            Adds the text to the current paragraph. 
            </summary>
            <param name="txt">Text string.</param>
            <param name="options">Text formatting options.</param>
        </member>
        <member name="M:netDxf.Entities.MText.EndParagraph">
            <summary>
            Ends the current paragraph. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.StartParagraph">
            <summary>
            Starts a new paragraph. 
            </summary>
            <remarks>
            When no paragraph options are used, strictly speaking, there is no need to call this method, the previous paragraph options will be inherited.<br />
            When there is no need to change the paragraph options from the previous, it is no necessary to pass again the same instance,
            the paragraph characteristics are inherited from the previous one.
            This way no codes needs to be written and it will save some characters in the final string.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.StartParagraph(netDxf.Entities.MTextParagraphOptions)">
            <summary>
            Starts a new paragraph. 
            </summary>
            <param name="options">Paragraph options.</param>
            <remarks>
            When no paragraph options are used, strictly speaking, there is no need to call this method, the previous paragraph options will be inherited.<br />
            When there is no need to change the paragraph options from the previous, it is no necessary to pass again the same instance,
            the paragraph characteristics are inherited from the previous one.
            This way no codes needs to be written and it will save some characters in the final string.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.PlainText">
            <summary>
            Obtains the MText text value without the formatting codes, control characters like tab '\t' will be preserved in the result,
            the new paragraph command "\P" will be converted to new line feed '\r\n'.
            </summary>
            <returns>MText text value without the formatting codes.</returns>
        </member>
        <member name="M:netDxf.Entities.MText.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, it would require to decompose each line into independent Text entities.
            When the current Text entity does not belong to a DXF document, the text will use the DefaultMirrText when a symmetry is performed;
            otherwise, the drawing variable MirrText will be used.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.Clone">
            <summary>
            Creates a new MText that is a copy of the current instance.
            </summary>
            <returns>A new MText that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MTextAttachmentPoint">
            <summary>
            Defines the multiline text attachment point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextDrawingDirection">
            <summary>
            Drawing direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextDrawingDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextDrawingDirection.TopToBottom">
            <summary>
            Top to bottom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextDrawingDirection.ByStyle">
            <summary>
            By style (the flow direction is inherited from the associated text style).
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextFormattingOptions">
            <summary>
            Options for the <see cref="T:netDxf.Entities.MText">multiline text</see> entity text formatting.
            </summary>
            <remarks>Old DXF versions might not support all available formatting codes.</remarks>
        </member>
        <member name="M:netDxf.Entities.MTextFormattingOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>MTextFormattingOptions</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Bold">
            <summary>
            Gets or sets if the text is bold.
            </summary>
            <remarks>The font style must support bold characters.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Italic">
            <summary>
            Gets or sets if the text is italic.
            </summary>
            <remarks>The font style must support italic characters.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Overline">
            <summary>
            Gets or sets the over line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Underline">
            <summary>
            Gets or sets underline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.StrikeThrough">
            <summary>
            Gets or sets strike-through.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Superscript">
            <summary>
            Get or set if the text is superscript.
            </summary>
            <remarks>
            The Superscript and subscript properties are mutually exclusive, if it is set to true the Subscript property will be set to false automatically.<br />
            Internally, superscripts and subscripts are written as stacking text (like fractions);
            therefore the characters '/' and '#' are reserved if you need to write them you must write '\/' and '\#' respectively.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Subscript">
            <summary>
            Get or set if the text is subscript.
            </summary>
            <remarks>
            The Superscript and Subscript properties are mutually exclusive, if it is set to true the Superscript property will be set to false automatically.<br />
            Internally, superscripts and subscripts are written as stacking text (like fractions);
            therefore the characters '/' and '#' are reserved if you need to write them you must write '\/' and '\#' respectively.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.SuperSubScriptHeightFactor">
            <summary>
            Gets or sets the superscript and subscript text height as a multiple of the current text height.
            </summary>
            <remarks>By default it is set as 0.7 the current text height.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Color">
            <summary>
            Gets or sets the text color.
            </summary>
            <remarks>
            Set as null to apply the default color defined by the MText entity.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.FontName">
            <summary>
            Gets or sets the font that will override the default defined in the TextStyle. 
            </summary>
            <remarks>
            Set as null or empty to apply the default font.<br />
            When using SHX fonts use the font file with the SHX extension,
            when using TTF fonts use the font family name.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.HeightFactor">
            <summary>
            Gets or sets the text height as a multiple of the current text height.
            </summary>
            <remarks>Set as 1.0 to apply the default height factor.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.ObliqueAngle">
            <summary>
            Gets or sets the obliquing angle in degrees.
            </summary>
            <remarks>Set as 0.0 to apply the default obliquing angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.CharacterSpaceFactor">
            <summary>
             Gets or sets the space between characters as a multiple of the original spacing between characters.
            </summary>
            <remarks>
            Valid values range from a minimum of .75 to 4 times the original spacing between characters.
            Set as 1.0 to apply the default character space factor.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.WidthFactor">
            <summary>
            Gets or sets the width factor to produce wide text.
            </summary>
            <remarks>Set as 1.0 to apply the default width factor.</remarks>
        </member>
        <member name="T:netDxf.Entities.MTextLineSpacingStyle">
            <summary>
            MText line spacing style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Default">
            <summary>
            Default (only applicable in MTextParagraphOptions).
            </summary>
            <remarks>
            The default value defined by the MText property will be applied.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.AtLeast">
            <summary>
            At least (taller characters will override)
            </summary>
            <remarks>
            Takes both the user specified arbitrary value and the text height to determine spacing.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Exact">
            <summary>
            Exact (taller characters will not override)
            </summary>
            <remarks>
            Defines the space with an arbitrary unit value the user specifies. Changing text height will not affect line spacing.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Multiple">
            <summary>
            Multiple (only applicable in MTextParagraphOptions).
            </summary>
            <remarks>
            Instead of assigning a value to line spacing, you specify spacing according to text height.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.MTextParagraphAlignment">
            <summary>
            Paragraph text horizontal alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Justified">
            <summary>
            Justified.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Distribute">
            <summary>
            Distribute.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextParagraphOptions">
            <summary>
            Options for the <see cref="T:netDxf.Entities.MText">multiline text</see> entity paragraph formatting.
            </summary>
            <remarks>Old DXF versions might not support all available formatting codes.</remarks>
        </member>
        <member name="M:netDxf.Entities.MTextParagraphOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>MTextParagraphOptions</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.HeightFactor">
            <summary>
            Gets or sets the paragraph height factor.
            </summary>
            <remarks>Set as 1.0 to apply the default height factor.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.Alignment">
            <summary>
            Gets or sets the paragraph justification (text horizontal alignment).
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.VerticalAlignment">
            <summary>
            Gets or sets the paragraph line vertical alignment.
            </summary>
            <remarks>
            The vertical alignment affects how fractions, superscripts, subscripts, and characters of different heights are placed in a paragraph line.
            By default the paragraph vertical alignment is Center.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.SpacingBefore">
            <summary>
            Specifies the spacing before the paragraphs.
            </summary>
            <remarks>
            If set to zero no value will be applied and the default will be inherited. When it is non zero, valid values range from 0.25 to 4.0.<br />
            The distance between two paragraphs is determined by the total of the after paragraph spacing value of the upper paragraph
            and the before paragraph spacing value of the lower paragraph.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.SpacingAfter">
            <summary>
            Specifies the spacing before or after the paragraph.
            </summary>
            <remarks>
            If set to zero no value will be applied and the default will be inherited. When it is non zero, valid values range from 0.25 to 4.0.<br />
            The distance between two paragraphs is determined by the total of the after paragraph spacing value of the upper paragraph
            and the before paragraph spacing value of the lower paragraph.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.FirstLineIndent">
            <summary>
            Gets or sets the indent value for the first line of the paragraph.
            </summary>
            <remarks>
            Valid values range from -10000.0 to 10000.0, the default value 0.0.<br />
            Negative first line indent values are limited by the left indent,
            in the case its absolute value is larger than the left indent, when applied to the paragraph it will be automatically adjusted .
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.LeftIndent">
            <summary>
            Gets or sets the left indent of the current paragraph.
            </summary>
            <remarks>
            Valid values range from 0.0 to 10000.0, the default value 0.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.RightIndent">
            <summary>
            Gets or sets the right indent value of the paragraphs.
            </summary>
            <remarks>
            Valid values range from 0.0 to 10000.0, the default value 0.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.LineSpacingFactor">
            <summary>
            Gets or sets the paragraph line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.0, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.LineSpacingStyle">
            <summary>
            Get or sets the paragraph <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextParagraphVerticalAlignment">
            <summary>
            Paragraph text vertical alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphVerticalAlignment.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphVerticalAlignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphVerticalAlignment.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="T:netDxf.Entities.OrdinateDimension">
            <summary>
            Represents an ordinate dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="leaderEndPoint">Leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension</param>
            <remarks>
            Uses the difference between the feature location and the leader endpoint to determine whether it is an X or a Y ordinate dimension.
            If the difference in the Y ordinate is greater, the dimension measures the X ordinate. Otherwise, it measures the Y ordinate.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="leaderEndPoint">Leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>
            Uses the difference between the feature location and the leader endpoint to determine whether it is an X or a Y ordinate dimension.
            If the difference in the Y ordinate is greater, the dimension measures the X ordinate. Otherwise, it measures the Y ordinate.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Entities.OrdinateDimensionAxis,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="leaderEndPoint">Leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,System.Double)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="rotation">Angle of rotation in degrees of the dimension lines.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector3">point</see> in world coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Local axis that measures the ordinate dimension.</param>
            <param name="rotation">Angle of rotation in degrees of the dimension lines.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Origin">
            <summary>
            Gets or sets the origin <see cref="T:netDxf.Vector2">point</see> in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.FeaturePoint">
            <summary>
            Gets or set the base <see cref="T:netDxf.Vector2">point</see> in local coordinates, a point on a feature such as an endpoint, intersection, or center of an object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.LeaderEndPoint">
            <summary>
            Gets or sets the leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Rotation">
            <summary>
            Gets or sets the angle of rotation in degrees of the ordinate dimension local coordinate system.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Axis">
            <summary>
            Gets or sets the local axis that measures the ordinate dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.Clone">
            <summary>
            Creates a new OrdinateDimension that is a copy of the current instance.
            </summary>
            <returns>A new OrdinateDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.OrdinateDimensionAxis">
            <summary>
            Defines the axis that measures the ordinate dimension.
            </summary>
        </member>
        <member name="F:netDxf.Entities.OrdinateDimensionAxis.X">
            <summary>
            The ordinate dimension measure the X distance and the dimension line is aligned to the Y axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.OrdinateDimensionAxis.Y">
            <summary>
            The ordinate dimension measure the Y distance and the dimension line is aligned to the X axis.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Point">
            <summary>
            Represents a point <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="position">Point <see cref="T:netDxf.Vector3">position</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="position">Point <see cref="T:netDxf.Vector2">position</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Position">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Thickness">
            <summary>
            Gets or sets the point thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Rotation">
            <summary>
            Gets or sets the point local rotation in degrees along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Point.Clone">
            <summary>
            Creates a new Point that is a copy of the current instance.
            </summary>
            <returns>A new Point that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMesh">
            <summary>
            Represents a polyface mesh <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int16[]})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
            <param name="vertexes">Polyface mesh <see cref="T:netDxf.Vector3">vertex</see> list.</param>
            <param name="faces">Polyface mesh faces list, a maximum of 4 indexes per face.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{netDxf.Entities.PolyfaceMeshFace})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
            <param name="vertexes">Polyface mesh <see cref="T:netDxf.Vector3">vertex</see> list.</param>
            <param name="faces">Polyface mesh faces list, a maximum of 4 indexes per face.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Vertexes">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Vector3">vertexes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Faces">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Flags">
            <summary>
            Gets the polyface mesh flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.Explode">
            <summary>
            Decompose the actual polyface mesh faces in <see cref="T:netDxf.Entities.Point">points</see> (one vertex polyface mesh face),
            <see cref="T:netDxf.Entities.Line">lines</see> (two vertexes polyface mesh face) and <see cref="T:netDxf.Entities.Face3D">3d faces</see> (three or four vertexes polyface mesh face).
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Face3D">3d faces</see> that made up the polyface mesh.</returns>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.Clone">
            <summary>
            Creates a new PolyfaceMesh that is a copy of the current instance.
            </summary>
            <returns>A new PolyfaceMesh that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshFace">
            <summary>
            Represents a polyface mesh face. 
            </summary>
            <remarks>
            The way the vertex indexes for a polyface mesh are defined follows the DXF documentation.
            The values of the vertex indexes specify one of the previously defined vertexes by the index in the list plus one.
            If the index is negative, the edge that begins with that vertex is invisible.
            For example if the vertex index in the list is 0 the vertex index for the face will be 1, and
            if the edge between the vertexes 0 and 1 is hidden the vertex index for the face will be -1.<br/>
            The maximum number of vertexes per face is 4.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <remarks>
            By default the face is made up of four vertexes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <param name="vertexIndexes">Array of indexes to the vertex list of a polyface mesh that makes up the face.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.VertexIndexes">
            <summary>
            Gets the list of indexes to the vertex list of a polyface mesh that makes up the face.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Color">
            <summary>
            Gets or sets the face color. Set to null to inherit from its parent polyface mesh.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Layer">
            <summary>
            Gets or sets the face layer. Set to null to inherit from its parent polyface mesh.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.Clone">
            <summary>
            Creates a new PolyfaceMeshFace that is a copy of the current instance.
            </summary>
            <returns>A new PolyfaceMeshFace that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolygonMesh">
            <summary>
            Represents a mesh grid <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.#ctor(System.Int16,System.Int16,System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>PolygonMesh</c> class.
            </summary>
            <param name="u">Number of vertexes along the U direction (local X axis).</param>
            <param name="v">Number of vertexes along the V direction (local Y axis).</param>
            <param name="vertexes">Array of UxV vertexes that represents the mesh grid.</param>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.Vertexes">
            <summary>
            Gets the mesh vertexes.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.SetVertex(System.Int32,System.Int32,netDxf.Vector3)">
            <summary>
            Set a PolygonMesh vertex by its indexes.
            </summary>
            <param name="i0">Index of the vertex in the U direction.</param>
            <param name="i1">Index of the vertex in the V direction.</param>
            <param name="vertex">A Vector3.</param>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.GetVertex(System.Int32,System.Int32)">
            <summary>
            Gets a PolygonMesh vertex by its indexes.
            </summary>
            <param name="i0">Index of the vertex in the U direction.</param>
            <param name="i1">Index of the vertex in the V direction.</param>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.U">
            <summary>
            Gets the number of vertexes along the U direction (local X axis).
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.V">
            <summary>
            Gets the number of vertexes along the V direction (local Y axis).
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.DensityU">
            <summary>
            Smooth surface U density.
            </summary>
            <remarks>Valid values range from 3 to 201.</remarks>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.DensityV">
            <summary>
            Smooth surface V density
            </summary>
            <remarks>Valid values range from 3 to 201.</remarks>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.IsClosedInU">
            <summary>
            Gets or sets if the polygon mesh is closed along the U direction (local X axis).
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.IsClosedInV">
            <summary>
            Gets or sets if the polygon mesh is closed along the V direction (local Y axis).
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.SmoothType">
            <summary>
            Gets or sets the polyline smooth type.
            </summary>
            <remarks>
            The additional polygon meshes vertexes corresponding to the SplineFit will be created when writing the DXF file.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.DefaultSurfU">
            <summary>
            Gets or sets if the default SurfU value.
            </summary>
            <remarks>
            This value is used by smoothed polygon meshes when they not belong to a DXF document and the density values are left at the default 0.<br/>
            The minimum vertexes generated for smoothed polygon meshes is 3.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.DefaultSurfV">
            <summary>
            Gets or sets if the default SurfV value.
            </summary>
            <remarks>
            This value is used by smoothed polygon meshes when they not belong to a DXF document and the density values are left at the default 0.<br/>
            The minimum vertexes generated for smoothed polygon meshes is 3.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.PolygonMesh.Flags">
            <summary>
            Gets the polygon mesh flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.MeshVertexes">
            <summary>
            Obtains a list of vertexes that represent the polygon mesh approximating the surface faces as necessary.
            </summary>
            <returns>A list of vertexes that represent the mesh.</returns>
            <remarks>
            The minimum vertexes generated for smoothed polygon meshes is 3 in each direction.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.MeshVertexes(System.Int32,System.Int32)">
            <summary>
            Obtains a list of vertexes that represent the polygon mesh approximating the surface faces as necessary.
            </summary>
            <param name="precisionU">Number of vertexes created along the U direction.</param>
            <param name="precisionV">Number of vertexes created along the V direction.</param>
            <returns>A list of vertexes that represent the mesh.</returns>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.ToMesh">
            <summary>
            Converts the actual polygon mesh into a mesh entity approximating the surface faces as necessary.
            </summary>
            <returns>A <see cref="T:netDxf.Entities.Mesh">Mesh entity</see>.</returns>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.ToMesh(System.Int32,System.Int32)">
            <summary>
            Converts the actual polygon mesh into a mesh entity approximating the surface faces as necessary.
            </summary>
            <param name="precisionU">Number of vertexes created along the U direction.</param>
            <param name="precisionV">Number of vertexes created along the V direction.</param>
            <returns>A <see cref="T:netDxf.Entities.Mesh">Mesh entity</see>.</returns>
            <remarks>
            The minimum vertexes generated for smoothed polygon meshes is 3 in each direction.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.Explode">
            <summary>
            Decompose the actual polygon mesh into <see cref="T:netDxf.Entities.Face3D">faces 3D</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Face3D">faces 3D</see> that made up the polygon mesh.</returns>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.PolygonMesh.Clone">
            <summary>
            Creates a new PolygonMesh that is a copy of the current instance.
            </summary>
            <returns>A new PolygonMesh that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Polyline">
            <summary>
            Represents a DXF Polyline.
            </summary>
            <remarks>
            Under the POLYLINE data the DXF stores information about smoothed Polylines2D (non-smoothed Polylines2D are stored as LWPOLYLINE,
            Polylines3D (smoothed and non-smoothed), and PolyfaceMeshes.<br />
            For internal use only.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.SubclassMarker">
            <summary>
            Gets or sets the polyline subclass marker.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Layer">
            <summary>
            Gets or sets the polyline layer.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Thickness">
            <summary>
            Gets or sets the polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Elevation">
            <summary>
            Gets or sets the polyline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Normal">
            <summary>
            Gets or sets the polyline normal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Color">
            <summary>
            Gets or sets the polyline color.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.EndSequence">
            <summary>
            Gets or sets the polyline EndSequence object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Vertexes">
            <summary>
            Gets or sets the polyline vertexes list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Flags">
            <summary>
            Gets or sets the polyline flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.SmoothType">
            <summary>
            Gets or sets the polyline smooth type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.M">
            <summary>
            Polygon mesh M vertex count.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.N">
            <summary>
            Polygon mesh N vertex count.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.DensityM">
            <summary>
            Polygon mesh smooth surface M density.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.DensityN">
            <summary>
            Polygon mesh smooth surface N density.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Polyline2D">
            <summary>
            Represents a two dimensional polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Two dimensional polylines can hold information about the width of the lines and arcs that compose them.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline2D</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Polyline2D</c> class.
            </summary>
            <param name="vertexes">Polyline2D <see cref="T:netDxf.Vector2">vertex</see> list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline2D</c> class.
            </summary>
            <param name="vertexes">Polyline2D <see cref="T:netDxf.Vector2">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed, by default it will create an open polyline.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2DVertex})">
            <summary>
            Initializes a new instance of the <c>Polyline2D</c> class.
            </summary>
            <param name="vertexes">Polyline2D <see cref="T:netDxf.Entities.Polyline2DVertex">vertex</see> list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2DVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline2D</c> class.
            </summary>
            <param name="vertexes">Polyline2D <see cref="T:netDxf.Entities.Polyline2DVertex">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed (default: false).</param>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.DefaultSplineSegs">
            <summary>
            Gets or sets if the default SplineSegs value.
            </summary>
            <remarks>
            This value is used by the Explode method when the current Polyline2D does not belong to a DXF document.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.Vertexes">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Entities.Polyline2DVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.IsClosed">
            <summary>
            Gets or sets if the polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.Thickness">
            <summary>
            Gets or sets the polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.Elevation">
            <summary>
            Gets or sets the polyline elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the light weight polyline.</remarks>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.LinetypeGeneration">
            <summary>
            Enable or disable if the linetype pattern is generated continuously around the vertexes of the polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.SmoothType">
            <summary>
            Gets or sets the polyline smooth type.
            </summary>
            <remarks>
            The additional polyline vertexes corresponding to the SplineFit will be created when writing the DXF file.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Polyline2D.Flags">
            <summary>
            Gets the polyline flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.Reverse">
            <summary>
            Switch the polyline direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.SetConstantWidth(System.Double)">
            <summary>
            Sets a constant width for all the polyline segments.
            </summary>
            <param name="width">Polyline width.</param>
            <remarks>
            Smoothed polylines can only have a constant width, the start width of the first vertex will be used.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.PolygonalVertexes(System.Int32)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="precision">The number of vertexes created for curve segments.</param>
            <returns>A list of vertexes expressed in object coordinate system.</returns>
            <remarks>
            For polylines containing arc segments the precision value defines the number of divisions for a full circle,
            therefore, the final number of divisions for the arc will depend on the angle of the arc.<br />
            For vertexes with bulge values different than zero a precision of zero means that no approximation will be made.<br />
            For smoothed polylines the minimum number of vertexes generated is 2.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.PolygonalVertexes(System.Int32,System.Double,System.Double)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="precision">The number of vertexes created for curve segments.</param>
            <param name="weldThreshold">Tolerance to consider if two new generated vertexes are equal.</param>
            <param name="bulgeThreshold">Minimum distance from which approximate curved segments of the polyline.</param>
            <returns>A list of vertexes expressed in object coordinate system.</returns>
            <remarks>
            For polylines containing arc segments the precision value defines the number of divisions for a full circle,
            therefore, the final number of divisions for the arc will depend on the angle of the arc.<br />
            For vertexes with bulge values different than zero a precision of zero means that no approximation will be made.<br />
            For smoothed polylines the minimum number of vertexes generated is 2.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported if a bulge different than zero is applied to any of the Polyline2D vertexes,
            a non-uniform scaling cannot be applied to the arc segments. Explode the entity and convert the arcs into ellipse arcs and transform them instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline2D.Clone">
            <summary>
            Creates a new Polyline2D that is a copy of the current instance.
            </summary>
            <returns>A new Polyline2D that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Polyline2DVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline2DVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Polyline2DVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Polyline2DVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="bulge">Vertex bulge (default: 0.0).</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Polyline2DVertex</c> class.
            </summary>
            <param name="position">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Polyline2DVertex</c> class.
            </summary>
            <param name="position">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="bulge">Vertex bulge (default: 0.0).</param>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.#ctor(netDxf.Entities.Polyline2DVertex)">
            <summary>
            Copy constructor.
            </summary>
            <param name="vertex">A Polyline2D vertex.</param>
        </member>
        <member name="P:netDxf.Entities.Polyline2DVertex.Position">
            <summary>
            Gets or sets the polyline 2D vertex <see cref="T:netDxf.Vector2">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline2DVertex.StartWidth">
            <summary>
            Gets or sets the polyline 2D vertex start segment width.
            </summary>
            <remarks>Widths greater than zero produce wide lines.</remarks>
        </member>
        <member name="P:netDxf.Entities.Polyline2DVertex.EndWidth">
            <summary>
            Gets or sets the polyline 2D vertex end segment width.
            </summary>
            <remarks>Widths greater than zero produce wide lines.</remarks>
        </member>
        <member name="P:netDxf.Entities.Polyline2DVertex.Bulge">
            <summary>
            Gets or set the polyline 2D vertex bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline2DVertex.Clone">
            <summary>
            Creates a new Polyline2DVertex that is a copy of the current instance.
            </summary>
            <returns>A new Polyline2DVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Polyline3D">
            <summary>
            Represents a generic polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Vector3">vertex</see> list.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Vector3">vertex</see> list.</param>
            <param name="isClosed">Sets if the polyline is closed, by default it will create an open polyline.</param>
        </member>
        <member name="P:netDxf.Entities.Polyline3D.DefaultSplineSegs">
            <summary>
            Gets or sets if the default SplineSegs value, this value is used by the Explode method when the current Polyline2D does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3D.Vertexes">
            <summary>
            Gets the polyline <see cref="T:netDxf.Vector3">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3D.IsClosed">
            <summary>
            Gets or sets if the polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3D.LinetypeGeneration">
            <summary>
            Enable or disable if the line type pattern is generated continuously around the vertexes of the polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3D.SmoothType">
            <summary>
            Gets or sets the curve smooth type.
            </summary>
            <remarks>
            The additional polyline vertexes corresponding to the SplineFit will be created when writing the DXF file.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Polyline3D.Flags">
            <summary>
            Gets the Polyline3D flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.Reverse">
            <summary>
            Switch the polyline direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.Explode">
            <summary>
            Decompose the actual polyline in a list of <see cref="T:netDxf.Entities.Line">lines</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the polyline in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated, only applicable for smoothed polylines.</param>
            <returns>A list vertexes that represents the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.ToPolyline2D(System.Int32)">
            <summary>
            Converts the actual Polyline3D in a Polyline2D.
            </summary>
            <param name="precision">Number of vertexes generated, only applicable for smoothed polylines.</param>
            <returns>A Polyline2D that represents the polyline.</returns>
            <remarks>
            The resulting Polyline2D will be a projection of the actual polyline into the plane defined by its normal vector.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline3D.Clone">
            <summary>
            Creates a new Polyline3D that is a copy of the current instance.
            </summary>
            <returns>A new Polyline3D that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolylineSmoothType">
            <summary>
            Defines the smooth type of the polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.NoSmooth">
            <summary>
            No smooth curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Quadratic">
            <summary>
            Quadratic B-spline curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Cubic">
            <summary>
            Cubic B-spline curve.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineTypeFlags">
            <summary>
            Defines the polyline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.OpenPolyline">
            <summary>
            Default (open polyline).
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM">
            <summary>
            This is a closed polyline (or a polygon mesh closed in the M direction).
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.CurveFit">
            <summary>
            Curve-fit vertexes have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.SplineFit">
            <summary>
            Spline-fit vertexes have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.Polyline3D">
            <summary>
            This is a 3D polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolygonMesh">
            <summary>
            This is a 3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolygonMeshInN">
            <summary>
            The polygon mesh is closed in the N direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolyfaceMesh">
            <summary>
            The polyline is a polyface mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ContinuousLinetypePattern">
            <summary>
            The line type pattern is generated continuously around the vertexes of this polyline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.RadialDimension">
            <summary>
            Represents a radial dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the circumference in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.ReferencePoint">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector2">point</see> on circumference or arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the reference point and dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting center and reference points are the same.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.Clone">
            <summary>
            Creates a new RadialDimension that is a copy of the current instance.
            </summary>
            <returns>A new RadialDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Ray">
            <summary>
            Represents a ray <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>A ray is a line in three-dimensional space that starts in the specified origin and extends to infinity.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ray.#ctor">
            <summary>
            Initializes a new instance of the <c>Ray</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ray.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Ray</c> class.
            </summary>
            <param name="origin">Ray <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="direction">Ray <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Ray.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Ray</c> class.
            </summary>
            <param name="origin">Ray start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="direction">Ray end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Ray.Origin">
            <summary>
            Gets or sets the ray <see cref="T:netDxf.Vector3">origin</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ray.Direction">
            <summary>
            Gets or sets the ray <see cref="T:netDxf.Vector3">direction</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ray.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ray.Clone">
            <summary>
            Creates a new Ray that is a copy of the current instance.
            </summary>
            <returns>A new Ray that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Shape">
            <summary>
            Represents a shape entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Shape.#ctor(System.String,netDxf.Tables.ShapeStyle)">
            <summary>
            Initializes a new instance of the <c>Shape</c> class.
            </summary>
            <param name="name">Name of the shape which geometry is defined in the shape <see cref="T:netDxf.Tables.ShapeStyle">style</see>.</param>
            <param name="style">Shape <see cref="T:netDxf.Tables.ShapeStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Shape.#ctor(System.String,netDxf.Tables.ShapeStyle,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Shape</c> class.
            </summary>
            <param name="name">Name of the shape which geometry is defined in the shape <see cref="T:netDxf.Tables.ShapeStyle">style</see>.</param>
            <param name="style">Shape <see cref="T:netDxf.Tables.ShapeStyle">style</see>.</param>
            <param name="position">Shape insertion point.</param>
            <param name="size">Shape size.</param>
            <param name="rotation">Shape rotation.</param>
        </member>
        <member name="P:netDxf.Entities.Shape.Name">
            <summary>
            Gets the shape name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.Style">
            <summary>
            Gets the <see cref="T:netDxf.Tables.ShapeStyle">shape style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.Position">
            <summary>
            Gets or sets the shape <see cref="T:netDxf.Vector3">insertion point</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.Size">
            <summary>
            Gets or sets the size of the shape.
            </summary>
            <remarks>
            The shape size is relative to the actual size of the shape definition.
            The size value works as an scale value applied to the dimensions of the shape definition.
            The DXF allows for negative values but that is the same as rotating the shape 180 degrees.<br />
            Size values must be greater than zero. Default: 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Shape.Rotation">
            <summary>
            Gets or sets the shape rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.ObliqueAngle">
            <summary>
            Gets or sets the shape oblique angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.WidthFactor">
            <summary>
            Gets or sets the shape width factor.
            </summary>
            <remarks>Width factor values cannot be zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Shape.Thickness">
            <summary>
            Gets or set the shape thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Shape.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Shape.Clone">
            <summary>
            Creates a new Shape that is a copy of the current instance.
            </summary>
            <returns>A new Shape that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Solid">
            <summary>
            Represents a solid <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
            <param name="fourthVertex">Solid <see cref="T:netDxf.Vector2">fourth vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="P:netDxf.Entities.Solid.FirstVertex">
            <summary>
            Gets or sets the first solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.SecondVertex">
            <summary>
            Gets or sets the second solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.ThirdVertex">
            <summary>
            Gets or sets the third solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.FourthVertex">
            <summary>
            Gets or sets the fourth solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Elevation">
            <summary>
            Gets or sets the solid elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the solid.</remarks>
        </member>
        <member name="P:netDxf.Entities.Solid.Thickness">
            <summary>
            Gets or sets the thickness of the solid.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Solid.Clone">
            <summary>
            Creates a new Solid that is a copy of the current instance.
            </summary>
            <returns>A new Solid that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Spline">
            <summary>
            Represents a spline curve <see cref="T:netDxf.Entities.EntityObject">entity</see> (NURBS Non-Uniform Rational B-Splines).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="fitPoints">Spline fit points.</param>
            <remarks>
            The resulting spline curve will be created from a list of cubic bezier curves that passes through the specified fit points.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.BezierCurveQuadratic})">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="curves">List of cubic bezier curves.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.BezierCurveCubic})">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="curves">List of cubic bezier curves.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="weights">Spline control weights. Pass null to set the default weights as 1.0.</param>
            <remarks>By default the degree of the spline is equal three.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Double},System.Int16)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="weights">Spline control weights. Pass null to set the default weights as 1.0.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="weights">Spline control weights.  If null the weights vector will be automatically initialized with 1.0.</param>
            <param name="closedPeriodic">Sets if the spline as periodic closed (default false).</param>
            <remarks>By default the degree of the spline is equal three.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Double},System.Int16,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="weights">Spline control weights.  If null the weights vector will be automatically initialized with 1.0.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
            <param name="closedPeriodic">Sets if the spline as periodic closed (default false).</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int16,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="weigths">Spline control weights.  If null the weights vector will be automatically initialized with 1.0.</param>
            <param name="knots">Spline knot vector.</param>
            <param name="degree">Degree of the spline curve. Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
            <param name="closedPeriodic">Sets if the spline as periodic closed (default false).</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int16,System.Collections.Generic.IEnumerable{netDxf.Vector3},netDxf.Entities.SplineCreationMethod,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="weights">Spline control weights.  If null the weights vector will be automatically initialized with 1.0.</param>
            <param name="knots">Spline knot vector.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
            <param name="fitPoints">Spine fit points.</param>
            <param name="method">Spline creation method.</param>
            <param name="closedPeriodic">Sets if the spline as periodic closed (default false).</param>
        </member>
        <member name="P:netDxf.Entities.Spline.FitPoints">
            <summary>
            Gets the spline <see cref="T:netDxf.Vector3">fit points</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.StartTangent">
            <summary>
            Gets or sets the spline curve start tangent.
            </summary>
            <remarks>Only applicable to splines created with fit points.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.EndTangent">
            <summary>
            Gets or sets the spline curve end tangent.
            </summary>
            <remarks>Only applicable to splines created with fit points.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.KnotParameterization">
            <summary>
            Gets or set the knot parameterization computational method.
            </summary>
            <remarks>
            Not usable. When initializing a Spline through a set of fit points, the resulting spline is approximated creating a list of cubic bezier curves.
            It is only informative for splines that has been loaded from a DXF file.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.CreationMethod">
            <summary>
            Gets the spline creation method.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.KnotTolerance">
            <summary>
            Gets or sets the knot tolerance.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.CtrlPointTolerance">
            <summary>
            Gets or sets the control point tolerance.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.FitTolerance">
            <summary>
            Gets or sets the fit point tolerance.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Degree">
            <summary>
            Gets or sets the polynomial degree of the resulting spline.
            </summary>
            <remarks>
            Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.IsClosed">
            <summary>
            Gets if the spline is closed.
            </summary>
            <remarks>
            An Spline is closed when the start and end control points are the same.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.IsClosedPeriodic">
            <summary>
            Gets or sets if the spline is closed and periodic.
            </summary>
            <remarks>
            A periodic spline is always closed creating a smooth continuity at the end points. <br />
            Changing the property will rebuild the knot vector.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.ControlPoints">
            <summary>
            Gets the spline <see cref="T:netDxf.Vector3">control points</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Weights">
            <summary>
            Gets the spline control points weights list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Knots">
            <summary>
            Gets the spline knot vector.
            </summary>
            <remarks>By default a uniform knot vector is created.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.Reverse">
            <summary>
            Switch the spline direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Spline.SetUniformWeights(System.Double)">
            <summary>
            Sets all control point weights to the specified number.
            </summary>
            <param name="weight">Control point weight.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the spline in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the spline.</returns>
        </member>
        <member name="M:netDxf.Entities.Spline.ToPolyline3D(System.Int32)">
            <summary>
            Converts the spline in a Polyline3D.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline3D">Polyline3D</see> that represents the spline.</returns>
        </member>
        <member name="M:netDxf.Entities.Spline.ToPolyline2D(System.Int32)">
            <summary>
            Converts the spline in a Polyline2D.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline2D">Polyline2D</see> that represents the spline.</returns>
            <remarks>
            The resulting polyline will be a projection of the actual spline into the plane defined by its normal vector.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.NurbsEvaluator(netDxf.Vector3[],System.Double[],System.Double[],System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Calculate points along a NURBS curve.
            </summary>
            <param name="controls">List of spline control points.</param>
            <param name="weights">Spline control weights. If null the weights vector will be automatically initialized with 1.0.</param>
            <param name="knots">List of spline knot points. If null the knot vector will be automatically generated.</param>
            <param name="degree">Spline degree.</param>
            <param name="isClosed">Specifies if the spline is closed.</param>
            <param name="isClosedPeriodic">Specifies if the spline is closed and periodic.</param>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the spline.</returns>
            <remarks>
            NURBS evaluator provided by mikau16 based on Michael V. implementation, roughly follows the notation of http://cs.mtu.edu/~shene/PUBLICATIONS/2004/NURBS.pdf
            Added a few modifications to make it work for open, closed, and periodic closed splines.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.Clone">
            <summary>
            Creates a new Spline that is a copy of the current instance.
            </summary>
            <returns>A new Spline that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.SplineCreationMethod">
            <summary>
            Defines how the spline entity was created.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineCreationMethod.FitPoints">
            <summary>
            Creates a degree 3 (cubic) B-spline by specifying fit points that the spline must pass through.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineCreationMethod.ControlPoints">
            <summary>
            Creates a spline by specifying control points.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineKnotParameterization">
            <summary>
            Specifies the knot parameterization, computational methods that determines how the component curves between successive fit points within a spline are blended.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitChord">
            <summary>
            Chord-Length method.
            </summary>
            <remarks>
            Spaces the knots connecting each component curve to be proportional to the distances between each associated pair of fit points.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitSqrtChord">
            <summary>
            Centripetal method.
            </summary>
            <remarks>
            Spaces the knots connecting each component curve to be proportional to the square root of the distance between each associated pair of fit points.
            This method usually produces "gentler" curves.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitUniform">
            <summary>
            Equidistant method.
            </summary>
            <remarks>
            Spaces the knots of each component curve to be equal, regardless of the spacing of the fit points.
            This method often produces curves that overshoot the fit points.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitCustom">
            <summary>
            Only applicable when a spline has been converted from the control points  to the fit point creation method.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineTypeFlags">
            <summary>
            Defines the spline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Open">
            <summary>
            Default (open spline).
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Closed">
            <summary>
            Closed spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Periodic">
            <summary>
            Periodic spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Rational">
            <summary>
            Rational spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Planar">
            <summary>
            Planar.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Linear">
            <summary>
            Linear (planar bit is also set).
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.FitPointCreationMethod">
            <summary>
            Used by splines created by fit points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.ClosedPeriodicSpline">
            <summary>
            Used for closed periodic splines.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Text">
            <summary>
            Represents a Text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Text.DefaultMirrText">
            <summary>
            Gets or sets if the text will be mirrored when a symmetry is performed, when the current Text entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Position">
            <summary>
            Gets or sets Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Rotation">
            <summary>
            Gets or sets the text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Text.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Text.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Text.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Text.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Value">
            <summary>
            Gets or sets the text string.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            When the current Text entity does not belong to a DXF document, the text will use the DefaultMirrText when a symmetry is performed;
            otherwise, the drawing variable MirrText will be used.<br />
            A symmetry around the X axis when the text uses an Alignment.BaseLineLeft, Alignment.BaseLineCenter, Alignment.BaseLineRight, Alignment.Fit or an Alignment.Aligned.
            A symmetry around the Y axis when the text uses an Alignment.Fit or an Alignment.Aligned.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Text.Clone">
            <summary>
            Creates a new Text that is a copy of the current instance.
            </summary>
            <returns>A new Text that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.TextAlignment">
            <summary>
            Defines the text alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleCenter">
            <summary>
            Middle center (uses the center of the text as uppercase characters).
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineLeft">
            <summary>
            Baseline left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineCenter">
            <summary>
            Baseline center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineRight">
            <summary>
            Baseline right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Aligned">
            <summary>
            Aligned.
            </summary>
            <remarks>The text height will be automatically adjusted so the text will fit in the specified width.</remarks>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Middle">
            <summary>
            Middle (uses the center of the text including descenders).
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Fit">
            <summary>
            Fit.
            </summary>
            <remarks>The text width factor will be automatically adjusted so the text will fit in the specified width.</remarks>
        </member>
        <member name="T:netDxf.Entities.Tolerance">
            <summary>
            Represents a tolerance <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor(netDxf.Entities.ToleranceEntry)">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
            <param name="tolerance"></param>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor(netDxf.Entities.ToleranceEntry,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
            <param name="tolerance"></param>
            <param name="position"></param>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor(netDxf.Entities.ToleranceEntry,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
            <param name="tolerance"></param>
            <param name="position"></param>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Entry1">
            <summary>
            Gets or sets the first tolerance entry.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Entry2">
            <summary>
            Gets or sets the second tolerance entry.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.TextHeight">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero.
            By default it initially uses the text height defined in the style, when saved in the DXF this value is stored as extended data information.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Tolerance.ProjectedToleranceZoneValue">
            <summary>
            Gets or sets the projected tolerance zone value.
            </summary>
            <remarks>
            A projected tolerance zone controls the variation in height of the extended portion of a fixed perpendicular part
            and refines the tolerance to that specified by positional tolerances.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Tolerance.ShowProjectedToleranceZoneSymbol">
            <summary>
            Gets or sets if the projected tolerance zone symbol will be shown after the projected tolerance zone value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.DatumIdentifier">
            <summary>
            Gets or sets the datum identifying symbol.
            </summary>
            <remarks>
            A datum is a theoretically exact geometric reference from which you can establish the location and tolerance zones of other features.
            A point, line, plane, cylinder, or other geometry can serve as a datum.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.DimensionStyle">leader style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Position">
            <summary>
            Gets or sets the leader <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Rotation">
            <summary>
            Gets or sets the leader rotation in degrees.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Tolerance.ToStringRepresentation">
            <summary>
            Converts the actual tolerance to its string representation.
            </summary>
            <returns>The tolerance string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.Tolerance.ParseStringRepresentation(System.String)">
            <summary>
            Converts the string representation of a tolerance to its tolerance entity equivalent.
            </summary>
            <param name="s">A string that represents a tolerance to convert.</param>
            <returns>The Tolerance entity equivalent to the tolerance contained in s.</returns>
        </member>
        <member name="M:netDxf.Entities.Tolerance.TryParseStringRepresentation(System.String,netDxf.Entities.Tolerance@)">
            <summary>
            Tries to convert the specified string representation of a tolerance to its tolerance entity equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string that represents the tolerance to convert.</param>
            <param name="result">If the conversion has been successful, it contains the tolerance entity equivalent to the string representation; otherwise, null.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Entities.Tolerance.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, also is not possible to make a symmetry of a Tolerance.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.ToleranceEntry">
            <summary>
            Represents an entry in a tolerance entity.
            </summary>
            <remarks>
            Each entry can be made of up to two tolerance values and three datum references, plus a symbol that represents the geometric characteristics.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.ToleranceEntry.#ctor">
            <summary>
            Initializes a new instance of the <c>ToleranceEntry</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.GeometricSymbol">
            <summary>
            Gets or sets the geometric characteristics symbol.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Tolerance1">
            <summary>
            Gets or sets the first tolerance value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Tolerance2">
            <summary>
            Gets or sets the second tolerance value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Datum1">
            <summary>
            Gets or sets the first datum reference value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Datum2">
            <summary>
            Gets or sets the second datum reference value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Datum3">
            <summary>
            Gets or sets the third datum reference value.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceEntry.Clone">
            <summary>
            Creates a new ToleranceEntry that is a copy of the current instance.
            </summary>
            <returns>A new ToleranceEntry that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ToleranceGeometricSymbol">
            <summary>
            Defines the geometric characteristic symbols for location, orientation, form, profile, and runout.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.None">
            <summary>
            No geometric symbol.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Position">
            <summary>
            Position, type location.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Concentricity">
            <summary>
            Concentricity or coaxiality, type location.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Symmetry">
            <summary>
            Symmetry, type location.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Parallelism">
            <summary>
            Parallelism, type orientation.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Perpendicularity">
            <summary>
            Perpendicularity, type orientation.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Angularity">
            <summary>
            Angularity, type orientation.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Cylindricity">
            <summary>
            Cylindricity, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Flatness">
            <summary>
            Flatness, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Roundness">
            <summary>
            Circularity or roundness, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Straightness">
            <summary>
            Straightness, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.ProfileSurface">
            <summary>
            Profile of a surface, type profile.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.ProfileLine">
            <summary>
            Profile of a line, type profile.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.CircularRunout">
            <summary>
            Circular runout, type runout.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.TotalRunOut">
            <summary>
            Total runout, type runout.
            </summary>
        </member>
        <member name="T:netDxf.Entities.ToleranceMaterialCondition">
            <summary>
            Tolerance Material Condition.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.None">
            <summary>
            No material condition.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.Maximum">
            <summary>
            Maximum Material Condition (MMC). A feature contains the maximum amount of material stated in the limits. 
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.Least">
            <summary>
            Least Material Condition (LMC). A feature contains the minimum amount of material stated in the limits. 
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.Regardless">
            <summary>
            Regardless of feature size. A feature can be any size within the stated limits. 
            </summary>
        </member>
        <member name="T:netDxf.Entities.ToleranceValue">
            <summary>
            Represents a tolerance, indicates the amount by which the geometric characteristic can deviate from a perfect form.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceValue.#ctor">
            <summary>
            Initializes a new instance of the <c>ToleranceValue</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceValue.#ctor(System.Boolean,System.String,netDxf.Entities.ToleranceMaterialCondition)">
            <summary>
            Initializes a new instance of the <c>ToleranceValue</c> class.
            </summary>
            <param name="showDiameterSymbol">Show a diameter symbol before the tolerance value.</param>
            <param name="value">Tolerance value.</param>
            <param name="materialCondition">Tolerance material condition.</param>
        </member>
        <member name="P:netDxf.Entities.ToleranceValue.ShowDiameterSymbol">
            <summary>
            Gets or sets if the tolerance diameter symbol will be shown.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceValue.Value">
            <summary>
            Gets or sets the tolerance value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceValue.MaterialCondition">
            <summary>
            Gets or sets the tolerance material condition.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceValue.Clone">
            <summary>
            Creates a new ToleranceValue that is a copy of the current instance.
            </summary>
            <returns>A new ToleranceValue that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Trace">
            <summary>
            Represents a trace <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The trace entity has exactly the same graphical representation as the Solid, and its functionality is exactly the same.
            It is recommended to use the more common Solid entity instead.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Trace.#ctor">
            <summary>
            Initializes a new instance of the <c>Trace</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Trace.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Trace</c> class.
            </summary>
            <param name="firstVertex">Trace <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Trace <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Trace <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="M:netDxf.Entities.Trace.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Trace</c> class.
            </summary>
            <param name="firstVertex">Trace <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Trace <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Trace <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
            <param name="fourthVertex">Trace <see cref="T:netDxf.Vector2">fourth vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="P:netDxf.Entities.Trace.FirstVertex">
            <summary>
            Gets or sets the first trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.SecondVertex">
            <summary>
            Gets or sets the second trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.ThirdVertex">
            <summary>
            Gets or sets the third trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.FourthVertex">
            <summary>
            Gets or sets the fourth trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.Elevation">
            <summary>
            Gets or sets the trace elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the trace.</remarks>
        </member>
        <member name="P:netDxf.Entities.Trace.Thickness">
            <summary>
            Gets or sets the thickness of the trace.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Trace.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Trace.Clone">
            <summary>
            Creates a new Trace that is a copy of the current instance.
            </summary>
            <returns>A new Trace that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Underlay">
            <summary>
            Represents an underlay <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Underlay.#ctor(netDxf.Objects.UnderlayDefinition)">
            <summary>
            Initializes a new instance of the <c>Underlay</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Objects.UnderlayDefinition">Underlay definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Underlay.#ctor(netDxf.Objects.UnderlayDefinition,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Underlay</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Objects.UnderlayDefinition">Underlay definition</see>.</param>
            <param name="position">Underlay <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Underlay.#ctor(netDxf.Objects.UnderlayDefinition,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Underlay</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Objects.UnderlayDefinition">Underlay definition</see>.</param>
            <param name="position">Underlay <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="scale">Underlay scale.</param>
        </member>
        <member name="P:netDxf.Entities.Underlay.Definition">
            <summary>
            Gets the underlay definition.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.Position">
            <summary>
            Gets or sets the underlay position in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.Scale">
            <summary>
            Gets or sets the underlay scale.
            </summary>
            <remarks>
            Any of the vector scale components cannot be zero.<br />
            Even thought the DXF has a code for the Z scale it seems that it has no use.
            The X and Y components multiplied by the original size of the PDF page represent the width and height of the final underlay.
            The Z component even thought it is present in the DXF it seems it has no use.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Underlay.Rotation">
            <summary>
            Gets or sets the underlay rotation around its normal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.Contrast">
            <summary>
            Gets or sets the underlay contrast.
            </summary>
            <remarks>Valid values range from 20 to 100.</remarks>
        </member>
        <member name="P:netDxf.Entities.Underlay.Fade">
            <summary>
            Gets or sets the underlay fade.
            </summary>
            <remarks>Valid values range from 0 to 80.</remarks>
        </member>
        <member name="P:netDxf.Entities.Underlay.DisplayOptions">
            <summary>
            Gets or sets the underlay display options.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.ClippingBoundary">
            <summary>
            Gets or sets the underlay clipping boundary.
            </summary>
            <remarks>
            Set as null to restore the default clipping boundary, show the full underlay without clipping.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Underlay.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling for rotated underlays is not supported.
            This is not a limitation of the code but the DXF format, unlike the Image there is no way to define the local UV vectors.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Underlay.Clone">
            <summary>
            Creates a new Underlay that is a copy of the current instance.
            </summary>
            <returns>A new Underlay that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.UnderlayDisplayFlags">
            <summary>
            Underlay display options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.ClippingOn">
            <summary>
            Clipping is on.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.ShowUnderlay">
            <summary>
            Underlay is on.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.Monochrome">
            <summary>
            Show as monochrome.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.AdjustForBackground">
            <summary>
            Adjust for background.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.ClipInsideMode">
            <summary>
            Clip is inside mode.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Vertex">
            <summary>
            Represents a DXF Vertex.
            </summary>
            <remarks>
            Under the VERTEX data the DXF stores information about the vertexes of smoothed Polylines2D (non-smoothed Polylines2D are stored as LWPOLYLINE,
            Polylines3D (smoothed and non-smoothed), and PolyfaceMeshes.<br />
            For internal use only.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Position">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.VertexIndexes">
            <summary>
            Gets or sets the indexes, only applicable when the vertex represents a face of a polyface mesh.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.StartWidth">
            <summary>
            Gets or sets the light weight polyline start segment width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end segment width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.Accepted values range from 0 to 1.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Flags">
            <summary>
            Gets or sets the vertex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Layer">
            <summary>
            Gets or sets the entity layer.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Linetype">
            <summary>
            Gets or sets the entity line type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.SubclassMarker">
            <summary>
            Gets or sets the subclass marker
            </summary>
        </member>
        <member name="T:netDxf.Entities.VertexTypeFlags">
            <summary>
            Defines the vertex type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polyline2DVertex">
            <summary>
            Default (2D polyline vertex).
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFittingExtraVertex">
            <summary>
            Extra vertex created by curve-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFitTangent">
            <summary>
            Curve-fit tangent defined for this vertex.
            A curve-fit tangent direction of 0 may be omitted from DXF output but is significant if this bit is set.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.NotUsed">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineVertexFromSplineFitting">
            <summary>
            Spline vertex created by spline-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineFrameControlPoint">
            <summary>
            Spline frame control point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polyline3DVertex">
            <summary>
            3D polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polygon3DMeshVertex">
            <summary>
            3D polygon mesh vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Viewport">
            <summary>
            Represents a view in paper space of the model.
            </summary>
            <remarks>
            The viewport with id equals 1 is the view of the paper space layout itself and it does not show the model.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Viewport.#ctor">
            <summary>
            Initializes a new viewport object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Center">
            <summary>
            Gets or sets the center point in paper space units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Width">
            <summary>
            Gets or sets the width in paper space units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Height">
            <summary>
            Gets or sets the height in paper space units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Stacking">
            <summary>
            Viewport status field:<br />
            -1 = On, but is fully off screen, or is one of the viewports that is not active because the $MAXACTVP count is currently being exceeded.<br />
            0 = Off<br />
            1 = Stacking value reserved for the layout view.
            positive value = On and active. The value indicates the order of stacking for the viewports, where 1 is the active viewport, 2 is the next, and so forth.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Id">
            <summary>
            Gets or sets the viewport ID.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewCenter">
            <summary>
            Gets or sets the view center point (in DCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.SnapBase">
            <summary>
            Gets or sets the snap base point.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.SnapSpacing">
            <summary>
            Gets or sets the snap spacing.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.GridSpacing">
            <summary>
            Gets or sets the grid spacing.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewDirection">
            <summary>
            Gets or sets the view direction vector (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewTarget">
            <summary>
            Gets or sets the view target point (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.LensLength">
            <summary>
            Gets or sets the perspective lens length.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.FrontClipPlane">
            <summary>
            Gets or sets the front clip plane Z value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.BackClipPlane">
            <summary>
            Gets or sets the back clip plane Z value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewHeight">
            <summary>
            Gets or sets the view height (in model space units).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.SnapAngle">
            <summary>
            Gets or sets the snap angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.TwistAngle">
            <summary>
            Gets or sets the view twist angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.CircleZoomPercent">
            <summary>
            Gets or sets the circle zoom percent.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.FrozenLayers">
            <summary>
            Gets the list of layers that are frozen in this viewport.
            </summary>
            <remarks>
            The FrozenLayers list cannot contain null items and layers that belong to different documents.
            Even if duplicate items should not cause any problems, it is not allowed to have two layers with the same name in the list.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Viewport.Status">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.ViewportStatusFlags">viewport status flags</see>:
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.UcsOrigin">
            <summary>
            Gets or sets the UCS origin.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.UcsXAxis">
            <summary>
            Gets or sets the UCS X axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.UcsYAxis">
            <summary>
            Gets or sets the UCS Y axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ClippingBoundary">
            <summary>
            Entity that serves as the viewport clipping boundary (only present if viewport is non-rectangular).
            </summary>
            <remarks>
            AutoCad does not allow the creation of viewports from open shapes such as LwPolylines, Polylines, or ellipse arcs;
            but if they are edited afterward, making them open, it will not complain, and they will work without problems.
            So, it is possible to use open shapes as clipping boundaries, even if it is not recommended.
            It might not be supported by all programs that read DXF files and a redraw of the layout might be required to show them correctly inside AutoCad.<br />
            Only X and Y coordinates will be used the entity normal will be considered as UnitZ.<br />
            When the viewport is added to the document this entity will be added too.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Viewport.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Viewport.Clone">
            <summary>
            Creates a new viewport that is a copy of the current instance.
            </summary>
            <returns>A new viewport that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ViewportStatusFlags">
            <summary>
            viewport status flags
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.PerspectiveMode">
            <summary>
            Enables perspective mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.FrontClipping">
            <summary>
            Enables front clipping.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.BackClipping">
            <summary>
            Enables back clipping.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.UcsFollow">
            <summary>
            Enables UCS follow.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.FrontClipNotAtEye">
            <summary>
            Enables front clip not at eye.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.UcsIconVisibility">
            <summary>
            Enables UCS icon visibility.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.UcsIconAtOrigin">
            <summary>
            Enables UCS icon at origin.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.FastZoom">
            <summary>
            Enables fast zoom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.SnapMode">
            <summary>
            Enables snap mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.GridMode">
            <summary>
            Enables grid mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.IsometricSnapStyle">
            <summary>
            Enables isometric snap style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.HidePlotMode">
            <summary>
            Enables hide plot mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.IsoPairTop">
            <summary>
            If set and IsoPairRight is not set, then isopair top is enabled. If both IsoPairTop and IsoPairRight are set, then isopair left is enabled
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.IsoPairRight">
            <summary>
            If set and IsoPairTop is not set, then isopair right is enabled.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.ViewportZoomLocking">
            <summary>
            Enables viewport zoom locking.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.CurrentlyAlwaysEnabled">
            <summary>
            Currently always enabled.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.NonRectangularClipping">
            <summary>
            Enables non-rectangular clipping.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.ViewportOff">
            <summary>
            Turns the viewport off.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.DisplayGridBeyondDrawingLimits">
            <summary>
            Enables the display of the grid beyond the drawing limits.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.AdaptiveGridDisplay">
            <summary>
            Enable adaptive grid display.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.SubdivisionGridBelowSpacing">
            <summary>
            Enables subdivision of the grid below the set grid spacing when the grid display is adaptive.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Wipeout">
            <summary>
            Represents a wipeout <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The Wipeout DXF definition includes three variables for brightness, contrast, and fade but those variables have no effect; in AutoCad you cannot even change them.<br/>
            The Wipeout entity is related with the system variable WIPEOUTFRAME but this variable is not saved in a DXF.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class as a rectangular wipeout.
            </summary>
            <param name="x">Rectangle x-coordinate of the bottom-left corner in local coordinates.</param>
            <param name="y">Rectangle y-coordinate of the bottom-left corner in local coordinates.</param>
            <param name="width">Rectangle width in local coordinates.</param>
            <param name="height">Rectangle height in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class as a rectangular wipeout from two opposite corners.
            </summary>
            <param name="firstCorner">Rectangle firstCorner in local coordinates.</param>
            <param name="secondCorner">Rectangle secondCorner in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class as a polygonal wipeout.
            </summary>
            <param name="vertexes">The list of vertexes of the wipeout.</param>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(netDxf.ClippingBoundary)">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class.
            </summary>
            <param name="clippingBoundary">The wipeout clipping boundary.</param>
        </member>
        <member name="P:netDxf.Entities.Wipeout.ClippingBoundary">
            <summary>
            Gets or sets the wipeout clipping boundary.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Wipeout.Elevation">
            <summary>
            Gets or sets the wipeout elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the wipeout boundary.</remarks>
        </member>
        <member name="M:netDxf.Entities.Wipeout.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Wipeout.Clone">
            <summary>
            Creates a new Wipeout that is a copy of the current instance.
            </summary>
            <returns>A new Wipeout that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.XLine">
            <summary>
            Represents an extension line <see cref="T:netDxf.Entities.EntityObject">entity</see> (aka construction line).
            </summary>
            <remarks>An extension line is a line in three-dimensional space that starts in the specified origin and extends to infinity in both directions.</remarks>
        </member>
        <member name="M:netDxf.Entities.XLine.#ctor">
            <summary>
            Initializes a new instance of the <c>XLine</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.XLine.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>XLine</c> class.
            </summary>
            <param name="origin">XLine <see cref="T:netDxf.Vector2">origin.</see></param>
            <param name="direction">XLine <see cref="T:netDxf.Vector2">direction.</see></param>
        </member>
        <member name="M:netDxf.Entities.XLine.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>XLine</c> class.
            </summary>
            <param name="origin">XLine <see cref="T:netDxf.Vector3">origin.</see></param>
            <param name="direction">XLine <see cref="T:netDxf.Vector3">direction.</see></param>
        </member>
        <member name="P:netDxf.Entities.XLine.Origin">
            <summary>
            Gets or sets the extension line <see cref="T:netDxf.Vector3">origin</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.XLine.Direction">
            <summary>
            Gets or sets the extension line <see cref="T:netDxf.Vector3">direction</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.XLine.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.XLine.Clone">
            <summary>
            Creates a new XLine that is a copy of the current instance.
            </summary>
            <returns>A new XLine that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Header.AttMode">
            <summary>
            Defines the attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:netDxf.Header.DxfVersion">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.Unknown">
            <summary>
            Unknown AutoCAD DXF file version.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad1_1">
            <summary>
            AutoCAD R1.1 DXF file. AutoCAD release 1.1.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad1_2">
            <summary>
            AutoCAD R1.2 DXF file. AutoCAD release 1.2.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad1_4">
            <summary>
            AutoCAD R1.4 DXF file. AutoCAD release 1.4.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2_0">
            <summary>
            AutoCAD R2.0 DXF file. AutoCAD release 2.0.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2_10">
            <summary>
            AutoCAD R2.10 DXF file. AutoCAD release 2.10.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2_5">
            <summary>
            AutoCAD R2.5 DXF file. AutoCAD release 2.5.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2_6">
            <summary>
            AutoCAD R2.6 DXF file. AutoCAD release 2.6.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad9">
            <summary>
            AutoCAD R9 DXF file. AutoCAD release 9.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad10">
            <summary>
            AutoCAD R10 DXF file. AutoCAD release 10.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad12">
            <summary>
            AutoCAD R11 and R12 DXF file. AutoCAD release 11/12 (LT R1/R2).
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad13">
            <summary>
            AutoCAD R13 DXF file. AutoCAD release 13 (LT95).
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad14">
            <summary>
            AutoCAD R14 DXF file. AutoCAD release 14, 14.01 (LT97/LT98).
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2000">
            <summary>
            AutoCAD 2000 DXF file. AutoCAD 2000/2000i/2002.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2004">
            <summary>
            AutoCAD 2004 DXF file. AutoCAD 2004/2005/2006.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2007">
            <summary>
            AutoCAD 2007 DXF file. AutoCAD 2007/2008/2009.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2010">
            <summary>
            AutoCAD 2010 DXF file. AutoCAD 2010/2011/2012.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2013">
            <summary>
            AutoCAD 2013 DXF file. AutoCAD 2013/2014/2015/2016/2017.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2018">
            <summary>
            AutoCAD 2018 DXF file. AutoCAD 2018/2019/2020/2021/2022/2023.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariable">
            <summary>
            Defines a header variable.
            </summary>
        </member>
        <member name="M:netDxf.Header.HeaderVariable.#ctor(System.String,System.Int16,System.Object)">
            <summary>
            Initializes a new instance of the <c>HeaderVariable</c> class.
            </summary>
            <param name="name">Header variable name.</param>
            <param name="groupCode">Header variable group code.</param>
            <param name="value">Header variable value.</param>
            <remarks>
            It is very important to match the group code with its corresponding value type,
            check the DXF documentation for details about what group code correspond to its associated type.
            For example, typical groups codes are 70, 40, and 2 that correspond to short, double, and string value types, respectively.<br />
            If the header value is a Vector3 use the group code 30, if it is a Vector2 use group code 20,
            when the variable is written to the DXF the codes 10, 20, and 30 will be added as necessary.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariable.Name">
            <summary>
            Gets the header variable name.
            </summary>
            <remarks>The header variable name is case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariable.GroupCode">
            <summary>
            Gets the header variable group code.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariable.Value">
            <summary>
            Gets the header variable stored value.
            </summary>
            <remarks>
            It is very important to match the group code with its corresponding value type,
            check the DXF documentation for details about what group code correspond to its associated type.
            For example, typical groups codes are 70, 40, and 2 that correspond to short, double, and string value types, respectively.<br />
            If the header value is a Vector3 use the group code 30, if it is a Vector2 use group code 20,
            when the variable is written to the DXF the codes 10, 20, and 30 will be added as necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariable.ToString">
            <summary>
            Obtains a string that represents the header variable.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Header.HeaderVariableCode">
            <summary>
            Strings system variables
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angbase">
            <summary>
            Angle 0 direction.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angdir">
            <summary>
            1 = Clockwise angles, 0 = Counterclockwise.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AttMode">
            <summary>
            Attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUnits">
            <summary>
            Units format for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUprec">
            <summary>
            Units precision for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeColor">
            <summary>
            Current entity color.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtScale">
            <summary>
            Current entity line type scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLweight">
            <summary>
            Current entity lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtype">
            <summary>
            Current entity line type name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CLayer">
            <summary>
            Current layer name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLJust">
            <summary>
            Current multiline justification.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLStyle">
            <summary>
            Current multiline style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DimStyle">
            <summary>
            Current dimension style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextSize">
            <summary>
            Default text height.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextStyle">
            <summary>
            Current text style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length, 
            and can include the letters A to Z, the numerals 0 to 9, spaces, 
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.InsBase">
            <summary>
            Insertion base point for the current drawing.
            </summary>
            <remarks>
            When you insert or externally reference the current drawing into other drawings, this base point is used as the insertion base point.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.InsUnits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
            <remarks>
            The US Surveyor Units were introduced in the AutoCad2018 DXF version (AC1032),
            they may be not supported if the file is loaded in earlier versions of AutoCad.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LwDisplay">
            <summary>
            Controls the display of lineweights on the Model or Layout tab.
            </summary>
            <remarks>
            0 = Lineweight is not displayed
            1 = Lineweight is displayed
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LtScale">
            <summary>
            Global line type scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.MirrText">
            <summary>
            Controls if the text will be mirrored during a symmetry.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size.<br />
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PLineGen">
            <summary>
            Governs the generation of line type patterns around the vertexes of a 2D polyline.
            </summary>
            <remarks>
            1 = Line type is generated in a continuous pattern around vertexes of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PsLtScale">
            <summary>
            Controls paper space line type scaling.
            </summary>
            <remarks>
            1 = No special line type scaling.<br />
            0 = Viewport scaling governs line type scaling.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.SplineSegs">
            <summary>
            Defines number of line segments generated for smoothed out polylines.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.SurfU">
            <summary>
            Define the number of segments generated for smoothed polygon meshes in M direction.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.SurfV">
            <summary>
            Define the number of segments generated for smoothed polygon meshes in N direction.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TdCreate">
            <summary>
            Local date/time of drawing creation.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TduCreate">
            <summary>
            Universal date/time the drawing was created.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TdUpdate">
            <summary>
            Local date/time of last drawing update.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TduUpdate">
            <summary>
            Universal date/time of the last update/save.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TdinDwg">
            <summary>
            Cumulative editing time for this drawing.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.UcsOrg">
            <summary>
            Origin of current UCS (in WCS).
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.UcsXDir">
            <summary>
            Direction of the current UCS X axis (in WCS).
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.UcsYDir">
            <summary>
            Direction of the current UCS Y axis (in WCS).
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariables">
            <summary>
            Represents the header variables of a DXF document.
            </summary>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.#ctor">
            <summary>
            Initializes a new instance of the <c>SystemVariables</c>.
            </summary>
            <remarks>The default values are the same ones that are apply to a new AutoCad drawing.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
            <remarks>Only AutoCad2000 and higher DXF versions are supported.</remarks>
            <exception cref="T:System.NotSupportedException">Only AutoCad2000 and higher DXF versions are supported.</exception>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angbase">
            <summary>
            Angle 0 base.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angdir">
            <summary>
            The angle direction.
            </summary>
            <remarks>Default value: CCW.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AttMode">
            <summary>
            Attribute visibility.
            </summary>
            <remarks>Default value: Normal.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUnits">
            <summary>
            Units format for angles.
            </summary>
            <remarks>Default value: Decimal degrees.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUprec">
            <summary>
            Units precision for angles.
            </summary>
            <remarks>Valid values are integers from 0 to 8. Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeColor">
            <summary>
            Current entity color.
            </summary>
            <remarks>Default value: 256 (ByLayer). This header variable only supports indexed colors.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtScale">
            <summary>
            Current entity line type scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLweight">
            <summary>
            Current entity line weight.
            </summary>
            <remarks>Default value: -1 (ByLayer).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtype">
            <summary>
            Current entity line type name.
            </summary>
            <remarks>Default value: ByLayer.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CLayer">
            <summary>
            Current layer name.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLJust">
            <summary>
            Current multiline justification.
            </summary>
            <remarks>Default value: 0 (Top).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
            <remarks>Default value: 20.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLStyle">
            <summary>
            Current multiline style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DimStyle">
            <summary>
            Current dimension style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextSize">
            <summary>
            Default text height.
            </summary>
            <remarks>Default value: 2.5.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextStyle">
            <summary>
            Current text style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
            <remarks>
            Default value: Decimal.<br />
            If the LUnits is set to Architectural or Engineering the InsUnits variable will be set to Inches automatically.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
            <remarks>Valid values are integers from 0 to 8. Default value: 4.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Default value: 1.<br />
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length, 
            and can include the letters A to Z, the numerals 0 to 9, spaces, 
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.InsBase">
            <summary>
            Insertion base point for the current drawing.
            </summary>
            <remarks>
            When you insert or externally reference the current drawing into other drawings, this base point is used as the insertion base point.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.InsUnits">
            <summary>
            Specifies a drawing units value for automatic scaling of blocks, images, or xRefs when inserted or attached to a drawing.
            </summary>
            <remarks>
            Default value: Unitless.<br />
            It is not recommend to change this value, if the LUnits variable has been set to Architectural or Engineering, they require the InsUnits to be set at Inches.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
            <remarks>
            By default it uses the user name of the person who is currently logged on to the Windows operating system.<br />
            This header variable is not compatible with AutoCad2000 or lower versions.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LtScale">
            <summary>
            Global line type scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LwDisplay">
            <summary>
            Controls the display of line weights on the Model or Layout tab.
            </summary>
            <remarks>
            Default value: false.<br />
            false = Line weight is not displayed.<br />
            true = Line weight is displayed.<br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.MirrText">
            <summary>
            Controls if the text will be mirrored during a symmetry.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
            <remarks>Default value: PointShape.Dot.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            Default value: 0.<br />
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size. <br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PLineGen">
            <summary>
            Governs the generation of line type patterns around the vertexes of a 2D polyline.
            </summary>
            <remarks>
            Default value: 0.<br />
            1 = Line type is generated in a continuous pattern around vertexes of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PsLtScale">
            <summary>
            Controls paper space line type scaling.
            </summary>
            <remarks>
            Default value: 1.<br />
            1 = No special line type scaling.<br />
            0 = Viewport scaling governs line type scaling.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.SplineSegs">
            <summary>
            Defines number of line segments generated for smoothed polylines.
            </summary>
            <remarks>
            Accepted values must be greater than 0. Default value: 6.<br />
            Even thought AutoCad accepts negative values for the SplineSegs header values only positive ones are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.SurfU">
            <summary>
            Define the number of segments generated for smoothed polygon meshes in U direction (local X axis).
            </summary>
            <remarks>
            Accepted value range from 0 to 200. Default value: 6.<br />
            Although in AutoCAD the header variable SurfU accepts values less than 2, the minimum vertexes generated is 3 equivalent to a SurfV value of 2.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.SurfV">
            <summary>
            Define the number of segments generated for smoothed polygon meshes in V direction (local Y axis).
            </summary>
            <remarks>
            Accepted value range from 0 to 200. Default value: 6.<br />
            Although in AutoCAD the header variable SurfV accepts values less than 2, the minimum vertexes generated is 3 equivalent to a SurfV value of 2.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TdCreate">
            <summary>
            Local date/time of drawing creation.
            </summary>
            <remarks>
            This date/time is local to the time zone where the file was created.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TduCreate">
            <summary>
            Universal date/time the drawing was created.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TdUpdate">
            <summary>
            Local date/time of last drawing update.
            </summary>
            <remarks>This date/time is local to the time zone where the file was created.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TduUpdate">
            <summary>
            Universal date/time the drawing was created.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TdinDwg">
            <summary>
            Cumulative editing time for this drawing.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CurrentUCS">
            <summary>
            Gets ore sets the current/active UCS of the drawing.
            </summary>
            <remarks>
            This field encapsulates the three drawing variables UcsOrg, UcsXDir, and UcsYDir.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.KnownValues">
            <summary>
            Gets a collection of the known header variables.
            </summary>
            <returns>A list with the known header variables.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.KnownNames">
            <summary>
            Gets a collection of the known header variables names.
            </summary>
            <returns>A list with the known header variables names.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.CustomValues">
            <summary>
            Gets a collection of the custom header variables.
            </summary>
            <returns>A list with the custom header variables.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.CustomNames">
            <summary>
            Gets a collection of the custom header variables names.
            </summary>
            <returns>A list with the custom header variables names.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.AddCustomVariable(netDxf.Header.HeaderVariable)">
            <summary>
            Adds a custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> to the list.
            </summary>
            <param name="variable">Header variable to add to the list.</param>
            <remarks>
            All header variable names must start with the character '$'.<br />
            Header variable names that already exists in the known list cannot be added.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.ContainsCustomVariable(System.String)">
            <summary>
            Checks if a custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> name exits in the list.
            </summary>
            <param name="name">Header variable name.</param>
            <returns>True if a header variable name exits in the list; otherwise, false.</returns>
            <remarks>The header variable name is case insensitive.</remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.TryGetCustomVariable(System.String,netDxf.Header.HeaderVariable@)">
            <summary>Gets the header variable associated with the specified name.</summary>
            <param name="name">The name of the header variable to get.</param>
            <param name="variable">When this method returns, contains the header variable associated with the specified name, if the name is found; otherwise, it contains null.</param>
            <returns>True if the list contains a header variable with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.RemoveCustomVariable(System.String)">
            <summary>
            Removes a custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> from the list.
            </summary>
            <param name="name">Header variable to add to the list.</param>
            <returns>True if the element is successfully found and removed; otherwise, false.</returns>
            <remarks>The header variable name is case insensitive.</remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.ClearCustomVariables">
            <summary>
            Removes all custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> from the list.
            </summary>
        </member>
        <member name="T:netDxf.Header.PointShape">
            <summary>
            Defines the shape of the point entities.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Dot">
            <summary>
            A dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Empty">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Plus">
            <summary>
            Plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Cross">
            <summary>
            Cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Line">
            <summary>
            A line going upwards.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleDot">
            <summary>
            A circle and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleEmpty">
            <summary>
            Only a circle shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CirclePlus">
            <summary>
            A circle and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleCross">
            <summary>
            A circle and a cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleLine">
            <summary>
            A circle and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareDot">
            <summary>
            A square and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareEmpty">
            <summary>
            Only a square shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquarePlus">
            <summary>
            A square and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareCross">
            <summary>
            A square and a cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareLine">
            <summary>
            A square and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareDot">
            <summary>
            A circle, a square, and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareEmpty">
            <summary>
            A circle and a square.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquarePlus">
            <summary>
            A circle, a square, and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareCross">
            <summary>
            A circle, a square, and a cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareLine">
            <summary>
            A circle, a square, and a line.
            </summary>
        </member>
        <member name="T:netDxf.IO.DxfReader">
            <summary>
            Low level DXF reader
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfReader.Read(System.IO.Stream,netDxf.Collections.SupportFolders)">
            <summary>
            Reads the whole stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="T:netDxf.IO.DxfVersionNotSupportedException">
            <summary>
            Represents an error that occur when trying to load a DXF file which <see cref="T:netDxf.Header.DxfVersion">version</see> is not supported.
            </summary>
            <remarks>netDxf only supports DXF file versions AutoCad2000 and higher.</remarks>
        </member>
        <member name="M:netDxf.IO.DxfVersionNotSupportedException.#ctor(netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of <c>DxfVersionNotSupportedException</c>
            </summary>
            <param name="version">DXF file version.</param>
        </member>
        <member name="M:netDxf.IO.DxfVersionNotSupportedException.#ctor(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of <c>DxfVersionNotSupportedException</c>
            </summary>
            <param name="message">Exception message.</param>
            <param name="version">DXF file version.</param>
        </member>
        <member name="P:netDxf.IO.DxfVersionNotSupportedException.Version">
            <summary>
            Gets the DXF file version that generated the exception.
            </summary>
        </member>
        <member name="T:netDxf.IO.DxfWriter">
            <summary>
            Low level DXF writer.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.Close">
            <summary>
            Closes the DXF writer.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.BeginSection(System.String)">
            <summary>
            Opens a new section.
            </summary>
            <param name="section">Section type to open.</param>
            <remarks>There can be only one type section.</remarks>
        </member>
        <member name="M:netDxf.IO.DxfWriter.EndSection">
            <summary>
            Closes the active section.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.BeginTable(System.String,System.String,System.Int16,netDxf.Collections.XDataDictionary)">
            <summary>
            Opens a new table.
            </summary>
            <param name="table">Table type to open.</param>
            <param name="handle">Handle assigned to this table</param>
            <param name="numEntries">Number of entries in the table (obsolete).</param>
            <param name="xdata">Extended data information of the table.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.EndTable">
            <summary>
            Closes the active table.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteApplicationRegistry(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Writes a new extended data application registry to the table section.
            </summary>
            <param name="appReg">Name of the application registry.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteVPort(netDxf.Tables.VPort)">
            <summary>
            Writes a new viewport to the table section.
            </summary>
            <param name="vp">viewport.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteDimensionStyle(netDxf.Tables.DimensionStyle)">
            <summary>
            Writes a new dimension style to the table section.
            </summary>
            <param name="style">DimensionStyle.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteBlockRecord(netDxf.Blocks.BlockRecord)">
            <summary>
            Writes a new block record to the table section.
            </summary>
            <param name="blockRecord">Block.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteLinetype(netDxf.Tables.Linetype)">
            <summary>
            Writes a new line type to the table section.
            </summary>
            <param name="linetype">Line type.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteLayer(netDxf.Tables.Layer)">
            <summary>
            Writes a new layer to the table section.
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Writes a new text style to the table section.
            </summary>
            <param name="style">TextStyle.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteShapeStyle(netDxf.Tables.ShapeStyle)">
            <summary>
            Writes a new shape style to the table section.
            </summary>
            <param name="style">ShapeStyle.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteUCS(netDxf.Tables.UCS)">
            <summary>
            Writes a new user coordinate system to the table section.
            </summary>
            <param name="ucs">UCS.</param>
        </member>
        <member name="P:netDxf.IO.ICodeValueReader.Code">
            <summary>
            Gets the DXF code.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueReader.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueReader.CurrentPosition">
            <summary>
            Gets the line that has been read.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueWriter.Code">
            <summary>
            Gets the DXF code.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueWriter.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueWriter.CurrentPosition">
            <summary>
            Gets the line that has been written.
            </summary>
        </member>
        <member name="T:netDxf.Lineweight">
            <summary>
            Represents the line weight of a layer or an entity.
            </summary>
            <remarks>The enum numeric value correspond to 1/100 mm.</remarks>
        </member>
        <member name="F:netDxf.Lineweight.Default">
            <summary>
            Default lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.ByBlock">
            <summary>
            Lineweight defined by block.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.ByLayer">
            <summary>
            Lineweight defined by layer.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W0">
            <summary>
            Lineweight value 0.00 mm (hairline).
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W5">
            <summary>
            Lineweight value 0.05 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W9">
            <summary>
            Lineweight value 0.09 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W13">
            <summary>
            Lineweight value 0.13 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W15">
            <summary>
            Lineweight value 0.15 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W18">
            <summary>
            Lineweight value 0.18 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W20">
            <summary>
            Lineweight value 0.20 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W25">
            <summary>
            Lineweight value 0.25 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W30">
            <summary>
            Lineweight value 0.30 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W35">
            <summary>
            Lineweight value 0.35 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W40">
            <summary>
            Lineweight value 0.40 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W50">
            <summary>
            Lineweight value 0.50 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W53">
            <summary>
            Lineweight value 0.53 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W60">
            <summary>
            Lineweight value 0.60 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W70">
            <summary>
            Lineweight value 0.70 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W80">
            <summary>
            Lineweight value 0.80 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W90">
            <summary>
            Lineweight value 0.90 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W100">
            <summary>
            Lineweight value 1.00 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W106">
            <summary>
            Lineweight value 1.06 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W120">
            <summary>
            Lineweight value 1.20 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W140">
            <summary>
            Lineweight value 1.40 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W158">
            <summary>
            Lineweight value 1.58 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W200">
            <summary>
            Lineweight value 2.00 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W211">
            <summary>
            Lineweight value 2.11 mm.
            </summary>
        </member>
        <member name="T:netDxf.MathHelper">
            <summary>
            Utility math functions and constants.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToRad">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.RadToDeg">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToGrad">
            <summary>
            Constant to transform an angle between degrees and gradians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.GradToDeg">
            <summary>
            Constant to transform an angle between degrees and gradians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.HalfPI">
            <summary>
            PI/2 (90 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.PI">
            <summary>
            PI (180 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.ThreeHalfPI">
            <summary>
            3*PI/2 (270 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.TwoPI">
            <summary>
            2*PI (360 degrees)
            </summary>
        </member>
        <member name="P:netDxf.MathHelper.Epsilon">
            <summary>
            Represents the smallest number used for comparison purposes.
            </summary>
            <remarks>
            The epsilon value must be a positive number greater than zero.
            </remarks>
        </member>
        <member name="M:netDxf.MathHelper.Sign(System.Double)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="number">Double precision number.
            </param>
            <returns>
            A number that indicates the sign of value.
            Return value, meaning:<br />
            -1 value is less than zero.<br />
            0 value is equal to zero.<br />
            1 value is greater than zero.
            </returns>
            <remarks>This method will test for values of numbers very close to zero.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.Sign(System.Double,System.Double)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>
            A number that indicates the sign of value.
            Return value, meaning:<br />
            -1 value is less than zero.<br />
            0 value is equal to zero.<br />
            1 value is greater than zero.
            </returns>
            <remarks>This method will test for values of numbers very close to zero.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double,System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double,System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector2,System.Double,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Point list to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transformed point list.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector3,netDxf.Vector3,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector3},netDxf.Vector3,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Points to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Points coordinate system.</param>
            <param name="to">Coordinate system of the transformed points.</param>
            <returns>Transformed point list.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector2,netDxf.Vector3,System.Double)">
            <summary>
            Transform a 2d point from object coordinates to world coordinates.
            </summary>
            <param name="point">Points to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="elevation">Object elevation.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Vector3,System.Double)">
            <summary>
            Transform a 2d point list from object coordinates to world coordinates.
            </summary>
            <param name="points">Point to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="elevation">Object elevation.</param>
            <returns>Transformed points.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector3,netDxf.Vector3,System.Double@)">
            <summary>
            Transform a 3d point from world coordinates to object coordinates.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="elevation">Z axis value of the transformed point.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector3},netDxf.Vector3,System.Double@)">
            <summary>
            Transform a 3d point list from world coordinates to object coordinates.
            </summary>
            <param name="points">Points to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="elevation">Average Z axis value of the transformed points.</param>
            <returns>Transformed points.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArbitraryAxis(netDxf.Vector3)">
            <summary>
            Gets the rotation matrix from the normal vector (extrusion direction) of an entity.
            </summary>
            <param name="zAxis">Normal vector.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointLineDistance(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Calculates the minimum distance between a point and a line.
            </summary>
            <param name="p">A point.</param>
            <param name="origin">Line origin point.</param>
            <param name="dir">Line direction.</param>
            <returns>The minimum distance between the point and the line.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointLineDistance(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Calculates the minimum distance between a point and a line.
            </summary>
            <param name="p">A point.</param>
            <param name="origin">Line origin point.</param>
            <param name="dir">Line direction.</param>
            <returns>The minimum distance between the point and the line.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointInSegment(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Checks if a point is inside a line segment.
            </summary>
            <param name="p">A point.</param>
            <param name="start">Segment start point.</param>
            <param name="end">Segment end point.</param>
            <returns>Zero if the point is inside the segment, 1 if the point is after the end point, and -1 if the point is before the start point.</returns>
            <remarks>
            For testing purposes a point is considered inside a segment,
            if it falls inside the volume from start to end of the segment that extends infinitely perpendicularly to its direction.
            Later, if needed, you can use the PointLineDistance method, if the distance is zero the point is along the line defined by the start and end points.
            </remarks>
        </member>
        <member name="M:netDxf.MathHelper.PointInSegment(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Checks if a point is inside a line segment.
            </summary>
            <param name="p">A point.</param>
            <param name="start">Segment start point.</param>
            <param name="end">Segment end point.</param>
            <returns>Zero if the point is inside the segment, 1 if the point is after the end point, and -1 if the point is before the start point.</returns>
            <remarks>
            For testing purposes a point is considered inside a segment,
            if it falls inside the area from start to end of the segment that extends infinitely perpendicularly to its direction.
            Later, if needed, you can use the PointLineDistance method, if the distance is zero the point is along the line defined by the start and end points.
            </remarks>
        </member>
        <member name="M:netDxf.MathHelper.FindIntersection(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Calculates the intersection point of two lines.
            </summary>
            <param name="point0">First line origin point.</param>
            <param name="dir0">First line direction.</param>
            <param name="point1">Second line origin point.</param>
            <param name="dir1">Second line direction.</param>
            <returns>The intersection point between the two lines.</returns>
            <remarks>If the lines are parallel the method will return a <see cref="P:netDxf.Vector2.NaN">Vector2.NaN</see>.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.FindIntersection(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Calculates the intersection point of two lines.
            </summary>
            <param name="point0">First line origin point.</param>
            <param name="dir0">First line direction.</param>
            <param name="point1">Second line origin point.</param>
            <param name="dir1">Second line direction.</param>
            <param name="threshold">Tolerance.</param>
            <returns>The intersection point between the two lines.</returns>
            <remarks>If the lines are parallel the method will return a <see cref="P:netDxf.Vector2.NaN">Vector2.NaN</see>.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.NormalizeAngle(System.Double)">
            <summary>
            Normalizes the value of an angle in degrees between [0, 360[.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>The equivalent angle in the range [0, 360[.</returns>
            <remarks>Negative angles will be converted to its positive equivalent.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.RoundToNearest(System.Double,System.Double)">
            <summary>
            Round off a numeric value to the nearest of another value.
            </summary>
            <param name="number">Number to round off.</param>
            <param name="roundTo">The number will be rounded to the nearest of this value.</param>
            <returns>The number rounded to the nearest value.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArcFromBulge(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Obtains the data for an arc that has a start point, an end point, and a bulge value.
            </summary>
            <param name="startPoint">Arc start point.</param>
            <param name="endPoint">Arc end point.</param>
            <param name="bulge">Arc bulge value.</param>
            <returns>A Tuple(center, radius, startAngle in degrees, endAngle in degrees) with the arc data.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArcToBulge(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Obtains the start point, end point, and bulge value from an arc.
            </summary>
            <param name="center">Arc center.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
            <returns>A Tuple(start point, end point, bulge value) for the specified arc data.</returns>
        </member>
        <member name="T:netDxf.Matrix2">
            <summary>
            Represents a 2x2 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix2.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
        </member>
        <member name="P:netDxf.Matrix2.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the component at the given row and column index in the matrix.</summary>
            <param name="row">The row index of the matrix.</param>
            <param name="column">The column index of the matrix.</param>
            <returns>The component at the given row and column index in the matrix.</returns>
        </member>
        <member name="P:netDxf.Matrix2.IsIdentity">
            <summary>
            Gets if the actual matrix is the identity.
            </summary>
            <remarks>
            The checks to see if the matrix is the identity uses the MathHelper.Epsilon as a the threshold for testing values close to one and zero.
            </remarks>
        </member>
        <member name="M:netDxf.Matrix2.op_Addition(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Add(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Subtraction(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Subtract(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Multiply(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Multiply(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Multiply(netDxf.Matrix2,netDxf.Vector2)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="u">Vector2.</param>
            <returns>Matrix2.</returns>
            <remarks>Matrix2 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix2.Multiply(netDxf.Matrix2,netDxf.Vector2)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="u">Vector2.</param>
            <returns>Matrix2.</returns>
            <remarks>Matrix2 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix2.op_Multiply(netDxf.Matrix2,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix2.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Multiply(netDxf.Matrix2,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix2.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Equality(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are equal.
            </summary>
            <param name="u">Matrix2.</param>
            <param name="v">Matrix2.</param>
            <returns>True if the matrix components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Inequality(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are different.
            </summary>
            <param name="u">Matrix2.</param>
            <param name="v">Matrix2.</param>
            <returns>True if the matrix components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determinant.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Rotation(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix2 instance.</returns>
            <remarks>Matrix2 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix2.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Single scale factor for x and y axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Scale(netDxf.Vector2)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Scale factors for x and y axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Scale(System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2,netDxf.Matrix2,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="other">Matrix2.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="obj">Matrix2.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Matrix2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Matrix2.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Matrix3">
            <summary>
            Represents a 3x3 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix3.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,2].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
        </member>
        <member name="P:netDxf.Matrix3.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the component at the given row and column index in the matrix.</summary>
            <param name="row">The row index of the matrix.</param>
            <param name="column">The column index of the matrix.</param>
            <returns>The component at the given row and column index in the matrix.</returns>
        </member>
        <member name="P:netDxf.Matrix3.IsIdentity">
            <summary>
            Gets if the actual matrix is the identity.
            </summary>
            <remarks>
            The checks to see if the matrix is the identity uses the MathHelper.Epsilon as a the threshold for testing values close to one and zero.
            </remarks>
        </member>
        <member name="M:netDxf.Matrix3.op_Addition(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Add(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Subtraction(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Subtract(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3.</param>
            <returns>Matrix3.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3.</param>
            <returns>Matrix3.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Equality(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are equal.
            </summary>
            <param name="u">Matrix3.</param>
            <param name="v">Matrix3.</param>
            <returns>True if the matrix components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Inequality(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are different.
            </summary>
            <param name="u">Matrix3.</param>
            <param name="v">Matrix3.</param>
            <returns>True if the matrix components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determinant.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.RotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.RotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.RotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Single scale factor for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Scale(netDxf.Vector3)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Scale factors for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <param name="z">Scale factor for z-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Reflection(netDxf.Vector3)">
            <summary>
            Build the reflection matrix of a mirror plane that passes through the origin.
            </summary>
            <param name="normal">Mirror plane normal vector.</param>
            <returns>A mirror plane reflection matrix that passes through the origin.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3,netDxf.Matrix3,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="other">Matrix3.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="obj">Matrix3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Matrix3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Matrix4">
            <summary>
            Represents a 4x4 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix4.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,2].</param>
            <param name="m14">Element [0,3].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m24">Element [1,3].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
            <param name="m34">Element [2,3].</param>
            <param name="m41">Element [3,0].</param>
            <param name="m42">Element [3,1].</param>
            <param name="m43">Element [3,2].</param>
            <param name="m44">Element [3,3].</param>
        </member>
        <member name="P:netDxf.Matrix4.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M14">
            <summary>
            Gets or sets the matrix element [0,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M24">
            <summary>
            Gets or sets the matrix element [1,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M34">
            <summary>
            Gets or sets the matrix element [2,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M41">
            <summary>
            Gets or sets the matrix element [3,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M42">
            <summary>
            Gets or sets the matrix element [3,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M43">
            <summary>
            Gets or sets the matrix element [3,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M44">
            <summary>
            Gets or sets the matrix element [3,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the component at the given row and column index in the matrix.</summary>
            <param name="row">The row index of the matrix.</param>
            <param name="column">The column index of the matrix.</param>
            <returns>The component at the given row and column index in the matrix.</returns>
        </member>
        <member name="P:netDxf.Matrix4.IsIdentity">
            <summary>
            Gets if the actual matrix is the identity.
            </summary>
            <remarks>
            The checks to see if the matrix is the identity uses the MathHelper.Epsilon as a the threshold for testing values close to one and zero.
            </remarks>
        </member>
        <member name="M:netDxf.Matrix4.op_Addition(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Add(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Subtraction(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Subtract(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Multiply(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Multiply(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Multiply(netDxf.Matrix4,netDxf.Vector4)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="u">Vector4.</param>
            <returns>Matrix4.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Multiply(netDxf.Matrix4,netDxf.Vector4)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="u">Vector4.</param>
            <returns>Matrix4.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent three dimensional points.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.op_Multiply(netDxf.Matrix4,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix4.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Multiply(netDxf.Matrix4,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix4.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Equality(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are equal.
            </summary>
            <param name="u">Matrix4.</param>
            <param name="v">Matrix4.</param>
            <returns>True if the matrix components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Inequality(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are different.
            </summary>
            <param name="u">Matrix4.</param>
            <param name="v">Matrix4.</param>
            <returns>True if the matrix components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determinant.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.RotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.RotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.RotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Single scale factor for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Scale(netDxf.Vector3)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Scale factors for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <param name="z">Scale factor for z-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Translation(netDxf.Vector3)">
            <summary>
            Build a translation matrix.
            </summary>
            <param name="vector">Translation vector along the X, Y, and Z axis.</param>
            <returns>A translation matrix.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Build a translation matrix.
            </summary>
            <param name="x">Translation along the X axis.</param>
            <param name="y">Translation along the Y axis.</param>
            <param name="z">Translation along the Z axis.</param>
            <returns>A translation matrix.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Reflection(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Build the reflection matrix of a mirror plane that passes through a point.
            </summary>
            <param name="normal">Mirror plane normal vector.</param>
            <param name="point">A point on the mirror plane.</param>
            <returns>A mirror plane reflection matrix that passes through a point.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4,netDxf.Matrix4,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="other">Matrix4.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="obj">Matrix4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Matrix4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Matrix4.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix4.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Objects.DictionaryCloningFlags">
            <summary>
            Duplicate record cloning flag (determines how to merge duplicate entries).
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.NotApplicable">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.KeepExisting">
            <summary>
            Keep existing.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.UseClone">
            <summary>
            Use clone.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.XrefName">
            <summary>
            External reference name.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.UnmangleName">
            <summary>
            Unmangle name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.Entries">
            <summary>
            Gets the entries dictionary (key: owner entry handle, value: name)
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.IsHardOwner">
            <summary>
            Gets or sets if the dictionary object is hard owner.
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.Cloning">
            <summary>
            Gets or sets the dictionary object cloning flags.
            </summary>
        </member>
        <member name="T:netDxf.Objects.Group">
            <summary>
            Represents a group of entities.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor">
            <summary>
            Initialized a new unnamed empty group.
            </summary>
            <remarks>
            A unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.String)">
            <summary>
            Initialized a new empty group.
            </summary>
            <param name="name">Group name.</param>
            <remarks>
            If the name is set to null or empty, a unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initialized a new group with the specified entities.
            </summary>
            <param name="entities">The list of entities contained in the group.</param>
            <remarks>
            A unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initialized a new group with the specified entities.
            </summary>
            <param name="name">Group name (optional).</param>
            <param name="entities">The list of entities contained in the group.</param>
            <remarks>
            If the name is set to null or empty, a unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsUnnamed">
            <summary>
            Gets if the group has an automatic generated name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsSelectable">
            <summary>
            Gets or sets if the group is selectable.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.Entities">
            <summary>
            Gets the list of entities contained in the group.
            </summary>
            <remarks>
            When the group is added to the document the entities in it will be automatically added too.<br/>
            An entity may be contained in different groups.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Group.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.Clone(System.String)">
            <summary>
            Creates a new Group that is a copy of the current instance.
            </summary>
            <param name="newName">Group name of the copy.</param>
            <returns>A new Group that is a copy of this instance.</returns>
            <remarks>The entities that belong to the group will also be cloned.</remarks>
        </member>
        <member name="M:netDxf.Objects.Group.Clone">
            <summary>
            Creates a new Group that is a copy of the current instance.
            </summary>
            <returns>A new Group that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.GroupEntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>BlockEntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Objects.GroupEntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Objects.ImageDefinition">
            <summary>
            Represents an image definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.#ctor(System.String,System.Int32,System.Double,System.Int32,System.Double,netDxf.Units.ImageResolutionUnits)">
            <summary>
            Initializes a new instance of the <c>ImageDefinition</c> class.
            </summary>
            <param name="file">Image file name with full or relative path.</param>
            <param name="width">Image width in pixels.</param>
            <param name="horizontalResolution">Image horizontal resolution in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="verticalResolution">Image vertical resolution in pixels.</param>
            <param name="units">Image resolution units.</param>
            <remarks>
            <para>
            The name of the file without extension will be used as the name of the image definition.
            </para>
            <para>
            This is a generic constructor for all image formats supported by AutoCAD, note that not all AutoCAD versions support the same image formats.
            </para>
            <para>
            Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
            with the exception of English language versions sold in the US and Canada.<br />
            If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
            you must save the TIFF files with LZW compression disabled.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.#ctor(System.String,System.String,System.Int32,System.Double,System.Int32,System.Double,netDxf.Units.ImageResolutionUnits)">
            <summary>
            Initializes a new instance of the <c>ImageDefinition</c> class.
            </summary>
            <param name="name">Image definition name.</param>
            <param name="file">Image file name with full or relative path.</param>
            <param name="width">Image width in pixels.</param>
            <param name="horizontalResolution">Image horizontal resolution in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="verticalResolution">Image vertical resolution in pixels.</param>
            <param name="units">Image resolution units.</param>
            <remarks>
            <para>
            The name assigned to the image definition must be unique.
            </para>
            <para>
            This is a generic constructor for all image formats supported by AutoCAD, note that not all AutoCAD versions support the same image formats.
            </para>
            <para>
            Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
            with the exception of English language versions sold in the US and Canada.<br />
            If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
            you must save the TIFF files with LZW compression disabled.
            </para>
            </remarks>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.File">
            <summary>
            Gets or sets the image file.
            </summary>
            <remarks>
            When changing the image file the other properties should also be modified accordingly to avoid distortions in the final image.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.Width">
            <summary>
            Gets or sets the image width in pixels.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.Height">
            <summary>
            Gets or sets the image height in pixels.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.HorizontalResolution">
            <summary>
            Gets or sets the image horizontal resolution in pixels per unit.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.VerticalResolution">
            <summary>
            Gets or sets the image vertical resolution in pixels per unit.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.ResolutionUnits">
            <summary>
            Gets or sets the image resolution units.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.Owner">
            <summary>
            Gets the owner of the actual image definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.Clone(System.String)">
            <summary>
            Creates a new ImageDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">ImageDefinition name of the copy.</param>
            <returns>A new ImageDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.Clone">
            <summary>
            Creates a new ImageDefinition that is a copy of the current instance.
            </summary>
            <returns>A new ImageDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.ImageDisplayQuality">
            <summary>
            Image display quality (screen only).
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageDisplayQuality.Draft">
            <summary>
            Draft quality.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageDisplayQuality.High">
            <summary>
            High quality.
            </summary>
        </member>
        <member name="T:netDxf.Objects.LayerPropertiesFlags">
            <summary>
            Layer properties flags.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.None">
            <summary>
            No flags equivalent to layer On / Thawed / Unlocked / No Plot / No NewVpFreeze / No VpFreeze.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.Hidden">
            <summary>
            Layer visibility flag On/Off.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.Frozen">
            <summary>
            Layer freeze flag Frozen/Thawed.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.Locked">
            <summary>
            Layer lock flag Locked/Unlocked.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.Plot">
            <summary>
            Layer plot flag Plot/NoPlot.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.NewVpFrozen">
            <summary>
            Freeze layer in newly created viewports.
            </summary>
            <remarks>
            Not currently implemented. To freeze a layer in a viewport add it to its FrozenLayers list.
            </remarks>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesFlags.VpFrozen">
            <summary>
            Freeze layer in current viewport.
            </summary>
            <remarks>
            Not currently implemented. To freeze a layer in a viewport add it to its FrozenLayers list.
            </remarks>
        </member>
        <member name="T:netDxf.Objects.LayerPropertiesRestoreFlags">
            <summary>
            Layer properties to update when restoring the LayerState to the Layers list and vice versa.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.None">
            <summary>
            No flags, do not restore anything.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Hidden">
            <summary>
            Layer visibility flag On/Off.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Frozen">
            <summary>
            Layer freeze flag Frozen/Thawed.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Locked">
            <summary>
            Layer lock flag Locked/Unlocked.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Plot">
            <summary>
            Layer plot flag Plot/NoPlot.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.NewVpFrozen">
            <summary>
            Freeze layer in newly created viewports.
            </summary>
            <remarks>
            Not implemented. To freeze a layer in a viewport add it to its FrozenLayers list.
            </remarks>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.VpFrozen">
            <summary>
            Freeze layer in current viewport.
            </summary>
            <remarks>
            Not implemented. To freeze a layer in a viewport add it to its FrozenLayers list.
            </remarks>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Color">
            <summary>
            Layer color.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Linetype">
            <summary>
            Layer linetype.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Lineweight">
            <summary>
            Layer lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.Transparency">
            <summary>
            Layer transparency.
            </summary>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.PlotStyle">
            <summary>
            Layer plot style.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="F:netDxf.Objects.LayerPropertiesRestoreFlags.All">
            <summary>
            All flags, restore all layer properties.
            </summary>
        </member>
        <member name="T:netDxf.Objects.LayerState">
            <summary>
            Represents a layer state.
            </summary>
        </member>
        <member name="M:netDxf.Objects.LayerState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>LayerState</c> class.
            </summary>
            <param name="name">Layer state name.</param>
        </member>
        <member name="M:netDxf.Objects.LayerState.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Tables.Layer})">
            <summary>
            Initializes a new instance of the <c>LayerState</c> class from a specified list of layers.
            </summary>
            <param name="name">Layer state name.</param>
            <param name="layers">List of layers.</param>
        </member>
        <member name="P:netDxf.Objects.LayerState.Description">
            <summary>
            Gets or sets the layer state description.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerState.CurrentLayer">
            <summary>
            Gets or sets the current layer name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerState.PaperSpace">
            <summary>
            Gets or sets if the layer state belongs to a paper space layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerState.Properties">
            <summary>
            Gets the list of layer state properties.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerState.Owner">
            <summary>
            Gets the owner of the actual layer state.
            </summary>
        </member>
        <member name="M:netDxf.Objects.LayerState.Load(System.String)">
            <summary>
            Loads a layer state from an LAS file.
            </summary>
            <param name="file">LAS file to load.</param>
            <returns>A layer state.</returns>
        </member>
        <member name="M:netDxf.Objects.LayerState.Save(System.String)">
            <summary>
            Saves the current layer state to a LAS file.
            </summary>
            <param name="file">LAS file to save.</param>
            <returns>Returns true if the file has been successfully saved, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Objects.LayerState.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.LayerState.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.LayerState.Clone(System.String)">
            <summary>
            Creates a new LayerState that is a copy of the current instance.
            </summary>
            <param name="newName">LayerState name of the copy.</param>
            <returns>A new LayerState that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.LayerState.Clone">
            <summary>
            Creates a new LayerState that is a copy of the current instance.
            </summary>
            <returns>A new LayerState that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.LayerStateProperties">
            <summary>
            Represents the state of the properties of a layer.
            </summary>
        </member>
        <member name="M:netDxf.Objects.LayerStateProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>LayerStateProperties</c> class.
            </summary>
            <param name="name">Name of the layer state properties.</param>
        </member>
        <member name="M:netDxf.Objects.LayerStateProperties.#ctor(netDxf.Tables.Layer)">
            <summary>
            Initializes a new instance of the <c>LayerStateProperties</c> class.
            </summary>
            <param name="layer">Layer from which copy the properties.</param>
        </member>
        <member name="P:netDxf.Objects.LayerStateProperties.Name">
            <summary>
            Gets the layer properties name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerStateProperties.Flags">
            <summary>
            Layer properties flags.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerStateProperties.LinetypeName">
            <summary>
            Layer properties linetype name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerStateProperties.Color">
            <summary>
            Layer properties color.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerStateProperties.Lineweight">
            <summary>
            Layer properties lineweight.
            </summary>
        </member>
        <member name="P:netDxf.Objects.LayerStateProperties.Transparency">
            <summary>
            Layer properties transparency.
            </summary>
        </member>
        <member name="M:netDxf.Objects.LayerStateProperties.CopyFrom(netDxf.Tables.Layer,netDxf.Objects.LayerPropertiesRestoreFlags)">
            <summary>
            Copy the layer to the current layer state properties.
            </summary>
            <param name="layer">Layer from which copy the properties.</param>
            <param name="options">Layer properties to copy.</param>
        </member>
        <member name="M:netDxf.Objects.LayerStateProperties.CopyTo(netDxf.Tables.Layer,netDxf.Objects.LayerPropertiesRestoreFlags)">
            <summary>
            Copy the current layer state properties to a layer.
            </summary>
            <param name="layer">Layer to which copy the properties.</param>
            <param name="options">Layer properties to copy.</param>
        </member>
        <member name="M:netDxf.Objects.LayerStateProperties.CompareWith(netDxf.Tables.Layer)">
            <summary>
            Compares the stored properties with the specified layer.
            </summary>
            <param name="layer">Layer to compare with.</param>
            <returns>If the stored properties are the same as the specified layer it returns true, false otherwise.</returns>
        </member>
        <member name="T:netDxf.Objects.Layout">
            <summary>
            Represents a layout.
            </summary>
        </member>
        <member name="F:netDxf.Objects.Layout.ModelSpaceName">
            <summary>
            Layout ModelSpace name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.ModelSpace">
            <summary>
            Gets the ModelSpace layout.
            </summary>
            <remarks>
            There can be only one model space layout and it is always called "Model".
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.#ctor(System.String)">
            <summary>
            Initializes a new layout.
            </summary>
            <param name="name">Layout name.</param>
        </member>
        <member name="P:netDxf.Objects.Layout.TabOrder">
            <summary>
            Gets or sets the tab order.
            </summary>
            <remarks>
            This number is an ordinal indicating this layout's ordering in the tab control that is
            attached to the AutoCAD drawing frame window. Note that the "Model" tab always appears
            as the first tab regardless of its tab order (always zero).
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Layout.PlotSettings">
            <summary>
            Gets or sets the plot settings
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MinLimit">
            <summary>
            Gets or sets the minimum limits for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MaxLimit">
            <summary>
            Gets or sets the maximum limits for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MinExtents">
            <summary>
            Gets or sets the maximum extents for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MaxExtents">
            <summary>
            Gets or sets the maximum extents for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.BasePoint">
            <summary>
            Gets or sets the insertion base point for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.UcsOrigin">
            <summary>
            Gets or sets the UCS origin.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.UcsXAxis">
            <summary>
            Gets or sets the UCS X axis.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.UcsYAxis">
            <summary>
            Gets or sets the UCS Y axis.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.IsPaperSpace">
            <summary>
            Defines if this layout is a paper space.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.Viewport">
            <summary>
            Gets the viewport associated with this layout. This is the viewport with Id 1 that represents the paper space itself,
            it has no graphical representation, and does not show the model.
            </summary>
            <remarks>The ModelSpace layout does not require a viewport and it will always return null.</remarks>
        </member>
        <member name="P:netDxf.Objects.Layout.Owner">
            <summary>
            Gets the owner of the actual layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.AssociatedBlock">
            <summary>
            Gets the associated ModelSpace or PaperSpace block.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Layout.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.Clone(System.String)">
            <summary>
            Creates a new Layout that is a copy of the current instance.
            </summary>
            <param name="newName">Layout name of the copy.</param>
            <returns>A new Layout that is a copy of this instance.</returns>
            <remarks>
            The Model Layout cannot be cloned.<br />
            When cloning a PaperSpace layout the contents of the layout will not be cloned.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.Clone">
            <summary>
            Creates a new Layout that is a copy of the current instance.
            </summary>
            <returns>A new Layout that is a copy of this instance.</returns>
            <remarks>
            The Model Layout cannot be cloned.<br />
            When cloning a PaperSpace layout the contents of the layout will not be cloned.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.CompareTo(netDxf.Objects.Layout)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="T:netDxf.Objects.MLineStyle">
            <summary>
            Represents as MLine style.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyle.DefaultName">
            <summary>
            Default multiline style name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Default">
            <summary>
            Gets the default MLine style.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <remarks>By default the multiline style has to elements with offsets 0.5 y -0.5.</remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="description">MLine style description.</param>
            <remarks>By default the multiline style has to elements with offsets 0.5 y -0.5.</remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Objects.MLineStyleElement})">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="elements">Elements of the multiline, if null two default elements will be added.</param>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Objects.MLineStyleElement},System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="elements">Elements of the multiline, if null two default elements will be added.</param>
            <param name="description">MLine style description (optional).</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Flags">
            <summary>
            Gets or sets the MLine style flags.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Description">
            <summary>
            Gets or sets the line type description (optional).
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.FillColor">
            <summary>
            Gets or sets the MLine fill color.
            </summary>
            <remarks>
            AutoCad2000 DXF version does not support true colors for MLineStyle fill color.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.StartAngle">
            <summary>
            Gets or sets the MLine start angle in degrees.
            </summary>
            <remarks>Valid values range from 10.0 to 170.0 degrees. Default: 90.0.</remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.EndAngle">
            <summary>
            Gets or sets the MLine end angle in degrees.
            </summary>
            <remarks>Valid values range from 10.0 to 170.0 degrees. Default: 90.0.</remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Elements">
            <summary>
            Gets the list of elements that make up the multiline.
            </summary>
            <remarks>
            The elements list must be ordered from larger to smaller <see cref="P:netDxf.Objects.MLineStyleElement.Offset">offset</see> values.
            During the initialization process the list will be sorted automatically,
            but if new elements are added individually to the list or the offset values of individual elements are modified,
            it will have to be sorted manually calling the Sort() method.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Owner">
            <summary>
            Gets the owner of the actual multi line style.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.Clone(System.String)">
            <summary>
            Creates a new MLineStyle that is a copy of the current instance.
            </summary>
            <param name="newName">MLineStyle name of the copy.</param>
            <returns>A new MLineStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.Clone">
            <summary>
            Creates a new MLineStyle that is a copy of the current instance.
            </summary>
            <returns>A new MLineStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.MLineStyleElement">
            <summary>
            Represent each of the elements that make up a MLineStyle.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <c>MLineStyleElement</c> class.
            </summary>
            <param name="offset">Element offset.</param>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.#ctor(System.Double,netDxf.AciColor,netDxf.Tables.Linetype)">
            <summary>
            Initializes a new instance of the <c>MLineStyleElement</c> class.
            </summary>
            <param name="offset">Element offset.</param>
            <param name="color">Element color.</param>
            <param name="linetype">Element line type.</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Offset">
            <summary>
            Gets or sets the element offset.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Color">
            <summary>
            Gets or sets the element color.
            </summary>
            <remarks>
            AutoCad2000 DXF version does not support true colors for MLineStyleElement color.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Linetype">
            <summary>
            Gets or sets the element line type.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.CompareTo(netDxf.Objects.MLineStyleElement)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            The MLineStyleElements are ordered from larger to smaller offset values.
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.Equals(System.Object)">
            <summary>
            Check if two MLineStyleElement are equal.
            </summary>
            <param name="other">Another MLineStyleElement to compare to.</param>
            <returns>True if two MLineStyleElement are equal or false in any other case.</returns>
            <remarks>
            Two MLineStyleElement are considered equals if their offsets are the same.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.Equals(netDxf.Objects.MLineStyleElement)">
            <summary>
            Check if two MLineStyleElement are equal.
            </summary>
            <param name="other">Another MLineStyleElement to compare to.</param>
            <returns>True if two MLineStyleElement are equal or false in any other case.</returns>
            <remarks>
            Two MLineStyleElement are considered equals if their offsets are the same.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.Clone">
            <summary>
            Creates a MLineStyleElement that is a copy of the current instance.
            </summary>
            <returns>A new MLineStyleElement is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElementChangeEventArgs.#ctor(netDxf.Objects.MLineStyleElement)">
            <summary>
            Initializes a new instance of <c>MLineStyleElementChangeEventArgs</c>.
            </summary>
            <param name="item">The item that is being added or removed from the MLineStyle elements list.</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElementChangeEventArgs.Item">
            <summary>
            Gets the item that is being added or removed from the MLineStyle elements list.
            </summary>
        </member>
        <member name="T:netDxf.Objects.MLineStyleFlags">
            <summary>
            Flags (bit-coded).
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.FillOn">
            <summary>
            Fill on.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.DisplayJoints">
            <summary>
            Display miters at the joints (inner vertexes).
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartSquareCap">
            <summary>
            Start square (line) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartInnerArcsCap">
            <summary>
            Start inner arcs cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartRoundCap">
            <summary>
            Start round (outer arcs) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndSquareCap">
            <summary>
            End square (line) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndInnerArcsCap">
            <summary>
            End inner arcs cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndRoundCap">
            <summary>
            End round (outer arcs) cap.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PaperMargin">
            <summary>
            Represents the unprintable margins of a paper. 
            </summary>
        </member>
        <member name="M:netDxf.Objects.PaperMargin.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <c>PaperMargin</c>.
            </summary>
            <param name="left">Margin on left side of paper.</param>
            <param name="bottom">Margin on bottom side of paper.</param>
            <param name="right">Margin on right side of paper.</param>
            <param name="top">Margin on top side of paper.</param>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Left">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on left side of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Bottom">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on bottom side of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Right">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on right side of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Top">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on top side of paper.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotFlags">
            <summary>
            Defines the plot settings flag.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotViewportBorders">
            <summary>
            Plot viewport borders.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ShowPlotStyles">
            <summary>
            Show plot styles.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotCentered">
            <summary>
            Plot centered.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotHidden">
            <summary>
            Plot hidden.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.UseStandardScale">
            <summary>
            Use standard scale.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotPlotStyles">
            <summary>
            Plot styles.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ScaleLineweights">
            <summary>
            Scale line weights.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PrintLineweights">
            <summary>
            Print line weights.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.DrawViewportsFirst">
            <summary>
            Draw viewports first.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ModelType">
            <summary>
            Model type.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.UpdatePaper">
            <summary>
            Update paper.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ZoomToPaperOnUpdate">
            <summary>
            Soon to paper on update.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.Initializing">
            <summary>
            Initializing.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PrevPlotInit">
            <summary>
            Preview plot initialization.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotPaperUnits">
            <summary>
            Plot paper units.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotPaperUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotPaperUnits.Milimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotPaperUnits.Pixels">
            <summary>
            Pixels, only applicable for raster outputs.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotRotation">
            <summary>
            Plot rotation
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.NoRotation">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.Degrees90">
            <summary>
            90 degrees counterclockwise.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.Degrees180">
            <summary>
            Upside-down.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.Degrees270">
            <summary>
            90 degrees clockwise.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotSettings">
            <summary>
            Represents the plot settings of a layout.
            </summary>
        </member>
        <member name="M:netDxf.Objects.PlotSettings.#ctor">
            <summary>
            Initializes a new instance of <c>PlotSettings</c>.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PageSetupName">
            <summary>
            Gets or sets the page setup name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PlotterName">
            <summary>
            Gets or sets the name of system printer or plot configuration file.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperSizeName">
            <summary>
            Gets or set the paper size name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ViewName">
            <summary>
            Gets or sets the plot view name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.CurrentStyleSheet">
            <summary>
            Gets or sets the current style sheet name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperMargin">
            <summary>
            Gets or set the size, in millimeters, of unprintable margins of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperSize">
            <summary>
            Gets or sets the plot paper size: physical paper width and height in millimeters.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.Origin">
            <summary>
            Gets or sets the plot origin in millimeters.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.WindowUpRight">
            <summary>
            Gets or sets the plot upper-right window corner.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.WindowBottomLeft">
            <summary>
            Gets or sets the plot lower-left window corner.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ScaleToFit">
            <summary>
            Gets or sets if the plot scale will be automatically computed show the drawing fits the media.
            </summary>
            <remarks>
            If <c>ScaleToFit</c> is set to false the values specified by <c>PrintScaleNumerator</c> and <c>PrintScaleDenomiator</c> will be used.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PrintScaleNumerator">
            <summary>
            Gets or sets the numerator of custom print scale: real world paper units.
            </summary>
            <remarks>
            The paper units used are specified by the <c>PaperUnits</c> value.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PrintScaleDenominator">
            <summary>
            Gets or sets the denominator of custom print scale: drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PrintScale">
            <summary>
            Gets the scale factor.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.Flags">
            <summary>
            Gets or sets the plot layout flags.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PlotType">
            <summary>
            Gets or sets the portion of paper space to output to the media.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperUnits">
            <summary>
            Gets or sets the paper units.
            </summary>
            <remarks>This value is only applicable to the scale parameter <c>PrintScaleNumerator</c>.</remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperRotation">
            <summary>
            Gets or sets the paper rotation.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ShadePlotMode">
            <summary>
            Gets or sets the shade plot mode.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ShadePlotResolutionMode">
            <summary>
            Gets or sets the plot resolution mode.
            </summary>
            <remarks>
            if the <c>ShadePlotResolutionMode</c> is set to Custom the value specified by the <c>ShadPloDPI</c> will be used.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ShadePlotDPI">
            <summary>
            Gets or sets the shade plot custom DPI.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperImageOrigin">
            <summary>
            Gets or sets the paper image origin.
            </summary>
        </member>
        <member name="M:netDxf.Objects.PlotSettings.Clone">
            <summary>
            Creates a new plot settings that is a copy of the current instance.
            </summary>
            <returns>A new plot settings that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.PlotType">
            <summary>
            Defines the portion of paper space to output to the media.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.LastScreenDisplay">
            <summary>
            Last screen display
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.DrawingExtents">
            <summary>
            Drawing extents.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.DrawingLimits">
            <summary>
            Drawing limits.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.View">
            <summary>
            View specified by the plot view name.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.Window">
            <summary>
            Window specified by the upper-right and bottom-left window corners.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.LayoutInformation">
            <summary>
            Layout information.
            </summary>
        </member>
        <member name="T:netDxf.Objects.RasterVariables">
            <summary>
            Represents the variables applied to bitmaps.
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.DisplayFrame">
            <summary>
            Gets or sets if the image frame is shown.
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.DisplayQuality">
            <summary>
            Gets or sets the image display quality (screen only).
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.Units">
            <summary>
            Gets or sets the AutoCAD units for inserting images.
            </summary>
            <remarks>
            Default: None<br />
            This is what one AutoCAD unit is equal to for the purpose of inserting and scaling images with an associated resolution.
            It is recommended to use the same units as the header variable InsUnits, or just use none to avoid any unwanted scaling when inserting images into the drawing.
            </remarks>
        </member>
        <member name="T:netDxf.Objects.ShadePlotMode">
            <summary>
            Defines the shade plot mode
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.AsDisplayed">
            <summary>
            As displayed.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.Wireframe">
            <summary>
            Wireframe.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.Rendered">
            <summary>
            Rendered.
            </summary>
        </member>
        <member name="T:netDxf.Objects.ShadePlotResolutionMode">
            <summary>
            Defines the shade plot resolution mode.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Draft">
            <summary>
            Draft.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Preview">
            <summary>
            Preview.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Presentation">
            <summary>
            Presentation.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Maximum">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Custom">
            <summary>
            Custom as specified by the shade plot DPI.
            </summary>
        </member>
        <member name="T:netDxf.Objects.SupportedImageFormats">
            <summary>
            Supported image formats.
            </summary>
            <remarks>
            These are the image formats in common between the net framework and AutoCAD.
            </remarks>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Bmp">
            <summary>
            BMP image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Jpeg">
            <summary>
            JPG image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Png">
            <summary>
            PNG image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Tiff">
            <summary>
            Tiff image format.
            </summary>
        </member>
        <member name="T:netDxf.Objects.UnderlayDefinition">
            <summary>
            Represents an underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDefinition.#ctor(System.String,System.String,netDxf.Objects.UnderlayType)">
            <summary>
            Initializes a new instance of the <c>UnderlayDefinition</c> class.
            </summary>
            <param name="name">Underlay name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
            <param name="type">Underlay type.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.UnderlayDefinition.Type">
            <summary>
            Get the underlay type.
            </summary>
        </member>
        <member name="P:netDxf.Objects.UnderlayDefinition.File">
            <summary>
            Gets or sets the underlay file.
            </summary>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="T:netDxf.Objects.UnderlayDgnDefinition">
            <summary>
            Represents a DGN underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDgnDefinition</c> class.
            </summary>
            <param name="file">Underlay file name with full or relative path.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDgnDefinition</c> class.
            </summary>
            <param name="name">Underlay definition name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.UnderlayDgnDefinition.Layout">
            <summary>
            Gets or sets the layout name to show.
            </summary>
        </member>
        <member name="P:netDxf.Objects.UnderlayDgnDefinition.Owner">
            <summary>
            Gets the owner of the actual underlay DGN definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.Clone(System.String)">
            <summary>
            Creates a new UnderlayDgnDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">UnderlayDgnDefinition name of the copy.</param>
            <returns>A new UnderlayDgnDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.Clone">
            <summary>
            Creates a new UnderlayDgnDefinition that is a copy of the current instance.
            </summary>
            <returns>A new UnderlayDgnDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.UnderlayDwfDefinition">
            <summary>
            Represents a DWF underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDwfDefinition</c> class.
            </summary>
            <param name="file">Underlay file name with full or relative path.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDwfDefinition</c> class.
            </summary>
            <param name="name">Underlay definition name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.UnderlayDwfDefinition.Owner">
            <summary>
            Gets the owner of the actual underlay DWF definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.Clone(System.String)">
            <summary>
            Creates a new UnderlayDwfDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">UnderlayDwfDefinition name of the copy.</param>
            <returns>A new UnderlayDwfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.Clone">
            <summary>
            Creates a new UnderlayDwfDefinition that is a copy of the current instance.
            </summary>
            <returns>A new UnderlayDwfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.UnderlayPdfDefinition">
            <summary>
            Represents a PDF underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayPdfDefinition</c> class.
            </summary>
            <param name="file">Underlay file name with full or relative path.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayPdfDefinition</c> class.
            </summary>
            <param name="name">Underlay definition name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
            <remarks>
            The file extension must match the underlay type.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.UnderlayPdfDefinition.Page">
            <summary>
            Gets or sets the PDF page to show.
            </summary>
        </member>
        <member name="P:netDxf.Objects.UnderlayPdfDefinition.Owner">
            <summary>
            Gets the owner of the actual underlay PDF definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.Clone(System.String)">
            <summary>
            Creates a new UnderlayPdfDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">UnderlayPdfDefinition name of the copy.</param>
            <returns>A new UnderlayPdfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.Clone">
            <summary>
            Creates a new UnderlayPdfDefinition that is a copy of the current instance.
            </summary>
            <returns>A new UnderlayPdfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.UnderlayType">
            <summary>
            Defines the different underlay documents available.
            </summary>
        </member>
        <member name="F:netDxf.Objects.UnderlayType.DGN">
            <summary>
            DGN
            </summary>
        </member>
        <member name="F:netDxf.Objects.UnderlayType.DWF">
            <summary>
            DWF
            </summary>
        </member>
        <member name="F:netDxf.Objects.UnderlayType.PDF">
            <summary>
            PDF
            </summary>
        </member>
        <member name="T:netDxf.StringEnum`1">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:netDxf.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:netDxf.StringEnum`1.#ctor">
            <summary>
            Creates a new <see cref="T:netDxf.StringEnum`1"/> instance.
            </summary>
        </member>
        <member name="P:netDxf.StringEnum`1.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="M:netDxf.StringEnum`1.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.GetValues">
            <summary>
            Gets the enum entry and string value pairs.
            </summary>
            <returns>A dictionary containing each enum entry with its corresponding string value.</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="value">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.IsStringDefined(System.String,System.StringComparison)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="value">String value.</param>
            <param name="comparisonType">Specifies how to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.GetStringValue(`0)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:netDxf.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.Parse(System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="value">String value.</param>
            <returns>Enum value associated with the string value, if not found the default enum will be returned.</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.Parse(System.String,System.StringComparison)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="value">String value.</param>
            <param name="comparisonType">Specifies how to conduct a case-insensitive match on the supplied string value.</param>
            <returns>Enum value associated with the string value, if not found the default enum will be returned.</returns>
        </member>
        <member name="T:netDxf.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:netDxf.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:netDxf.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:netDxf.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:netDxf.SubclassMarker">
            <summary>
            DXF object subclass string markers (code 100).
            </summary>
        </member>
        <member name="T:netDxf.Symbols">
            <summary>
            Symbols for dxf text strings.
            </summary>
            <remarks>
            These special strings translates to symbols in AutoCad. They are obsolete since Unicode characters are supported.
            </remarks>
        </member>
        <member name="F:netDxf.Symbols.Diameter">
            <summary>
            Text string that shows as a diameter 'Ø' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.Degree">
            <summary>
            Text string that shows as a degree '°' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.PlusMinus">
            <summary>
            Text string that shows as a plus-minus '±' character.
            </summary>
        </member>
        <member name="T:netDxf.Tables.ApplicationRegistry">
            <summary>
            Represents a registered application name to which the <see cref="T:netDxf.XData">extended data</see> is associated.
            </summary>
            <remarks>
            Do not use the default "ACAD" application registry name for your own extended data, it is sometimes used by AutoCad to store internal data.
            Instead, create your own application registry name and store your extended data there.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.ApplicationRegistry.DefaultName">
            <summary>
            Default application registry name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Default">
            <summary>
            Gets the default application registry.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ApplicationRegistry</c> class.
            </summary>
            <param name="name">Application registry name.</param>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Clone(System.String)">
            <summary>
            Creates a new ApplicationRegistry that is a copy of the current instance.
            </summary>
            <param name="newName">ApplicationRegistry name of the copy.</param>
            <returns>A new ApplicationRegistry that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Clone">
            <summary>
            Creates a new ApplicationRegistry that is a copy of the current instance.
            </summary>
            <returns>A new ApplicationRegistry that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyle">
            <summary>
            Represents a dimension style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyle.DefaultName">
            <summary>
            Default dimension style name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Default">
            <summary>
            Gets the default dimension style.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Iso25">
            <summary>
            Gets the ISO-25 dimension style as defined in AutoCad.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DimensionStyle</c> class.
            </summary>
            <param name="name">The dimension style name.</param>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineColor">
            <summary>
            Gets or set the color assigned to dimension lines, arrowheads, and dimension leader lines. (DIMCLRD)
            </summary>
            <remarks>
            Default: ByBlock<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineLinetype">
            <summary>
            Gets or sets the line type of the dimension line. (DIMLTYPE)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineLineweight">
            <summary>
            Gets or sets the line weight to dimension lines. (DIMLWD)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLine1Off">
            <summary>
            Suppresses display of the first dimension line. (DIMSD1)
            </summary>
            <remarks>
            Default: false<br />
            To completely suppress the dimension line set both <c>DimLine1Off</c> and <c>DimLine2Off</c> to false.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLine2Off">
            <summary>
            Suppresses display of the second dimension line. (DIMSD2)
            </summary>
            <remarks>
            Default: false<br />
            To completely suppress the dimension line set both <c>DimLine1Off</c> and <c>DimLine2Off</c> to false.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineExtend">
            <summary>
            Gets or sets the distance the dimension line extends beyond the extension line when
            oblique, architectural tick, integral, or no marks are drawn for arrowheads. (DIMDLE)
            </summary>
            <remarks>
            Default: 0.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimBaselineSpacing">
            <summary>
            Gets or sets the spacing of the dimension lines in baseline dimensions. (DIMDLI)
            </summary>
            <remarks>
            Default: 0.38<br />
            This value is stored only for information purposes.
            Base dimensions are a compound entity made of several dimensions, there is no actual DXF entity that represents that.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineColor">
            <summary>
            Gets or sets the color assigned to extension lines, center marks, and centerlines. (DIMCLRE)
            </summary>
            <remarks>
            Default: ByBlock<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine1Linetype">
            <summary>
            Gets or sets the line type of the first extension line. (DIMLTEX1)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine2Linetype">
            <summary>
            Gets or sets the line type of the second extension line. (DIMLTEX2)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineLineweight">
            <summary>
            Gets or sets line weight of extension lines. (DIMLWE)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine1Off">
            <summary>
            Suppresses display of the first extension line. (DIMSE1)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine2Off">
            <summary>
            Suppresses display of the second extension line. (DIMSE2)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineOffset">
            <summary>
            Gets or sets how far extension lines are offset from origin points. (DIMEXO)
            </summary>
            <remarks>
            Default: 0.0625
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineExtend">
            <summary>
            Gets or sets how far to extend the extension line beyond the dimension line. (DIMEXE)
            </summary>
            <remarks>
            Default: 0.18
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineFixed">
            <summary>
            Enables fixed length extension lines. (DIMFXLON)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineFixedLength">
            <summary>
            Gets or sets the total length of the extension lines starting from the dimension line toward the dimension origin. (DIMFXL)
            </summary>
            <remarks>
            Default: 1.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimArrow1">
            <summary>
            Gets or sets the arrowhead block for the first end of the dimension line. (DIMBLK1)
            </summary>
            <remarks>
            Default: null. Closed filled.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimArrow2">
            <summary>
            Gets or sets the arrowhead block for the second end of the dimension line. (DIMBLK2)
            </summary>
            <remarks>
            Default: null. Closed filled.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.LeaderArrow">
            <summary>
            Gets or sets the arrowhead block for leaders. (DIMLDRBLK)
            </summary>
            <remarks>
            Default: null. Closed filled.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ArrowSize">
            <summary>
            Controls the size of dimension line and leader line arrowheads. Also controls the size of hook lines. (DIMASZ)
            </summary>
            <remarks>
            Default: 0.18
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.CenterMarkSize">
            <summary>
            Controls the drawing of circle or arc center marks and centerlines. (DIMCEN)
            </summary>
            <remarks>
            Default: 0.09<br/>
            0 - No center marks or lines are drawn.<br />
            greater than 0 - Center marks are drawn.<br />
            lower than 0 - Center marks and centerlines are drawn.<br />
            The absolute value specifies the size of the center mark or center line. 
            The size of the center line is the length of the center line segment that extends outside the circle or arc.
            It is also the size of the gap between the center mark and the start of the center line. 
            The size of the center mark is the distance from the center of the circle or arc to the end of the center mark.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextStyle">
            <summary>
            Gets or sets the text style of the dimension. (DIMTXTSTY)
            </summary>
            <remarks>
            Default: Standard
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextColor">
            <summary>
            Gets or set the color of dimension text. (DIMCLRT)
            </summary>
            <remarks>
            Default: ByBlock<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextFillColor">
            <summary>
            Gets or set the background color of dimension text. Set to null to specify no color. (DIMTFILLCLR)
            </summary>
            <remarks>
            Default: null<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextHeight">
            <summary>
            Gets or sets the height of dimension text, unless the current text style has a fixed height. (DIMTXT)
            </summary>
            <remarks>
            Default: 0.18
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextHorizontalPlacement">
            <summary>
            Gets or sets the horizontal positioning of dimension text. (DIMJUST)
            </summary>
            <remarks>
            Default: Centered
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextVerticalPlacement">
            <summary>
            Gets or sets the vertical position of text in relation to the dimension line. (DIMTAD)
            </summary>
            <remarks>
            Default: Centered
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextOffset">
            <summary>
            Gets or sets the distance around the dimension text when the dimension line breaks to accommodate dimension text. (DIMGAP)
            </summary>
            <remarks>
            Default: 0.09<br />
            Displays a rectangular frame around the dimension text when negative values are used.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextInsideAlign">
            <summary>
            Gets or sets if the dimension text is placed horizontally when inside extension lines. (DIMTIH)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextOutsideAlign">
            <summary>
            Gets or sets if the dimension text is placed horizontally when outside extension lines. (DIMTOH)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextDirection">
            <summary>
            Gets or sets the direction of the dimension text. (DIMTXTDIRECTION)
            </summary>
            <remarks>
            Default: LeftToRight
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextFractionHeightScale">
            <summary>
            Gets or sets the scale of fractions relative to dimension text height. (DIMTFAC)
            </summary>
            <remarks>
            Default: 1.0<br />
            This value is only applicable to Architectural and Fractional units, and also
            controls the height factor applied to the tolerance text in relation with the dimension text height.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitDimLineForce">
            <summary>
            Gets or sets the drawing of a dimension line between the extension lines even when the text is placed outside the extension lines. (DIMTOFL)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitDimLineInside">
            <summary>
            Gets or sets the drawing of the dimension line and arrowheads even if not enough space is available inside the extension lines. (DIMSOXD)
            </summary>
            <remarks>
            Default: true<br />
            If not enough space is available inside the extension lines and FitTextInside is true,
            setting FitDimLineInside to false suppresses the arrowheads. If FitDimLineInside is false,
            FitDimLineInside has no effect.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimScaleOverall">
            <summary>
            Get or set the overall scale factor applied to dimensioning variables that specify sizes, distances, or offsets. (DIMSCALE)
            </summary>
            <remarks>
            Default: 1.0<br/>
            DIMSCALE does not affect measured lengths, coordinates, or angles.<br/>
            DIMSCALE values of zero are not supported, any imported drawing with a zero value will set the scale to the default 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitOptions">
            <summary>
            Gets or sets the placement of text and arrowheads based on the space available between the extension lines. (DIMATFIT)
            </summary>
            <remarks>
            Default: BestFit<br/>
            Not implemented in the dimension drawing.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitTextInside">
            <summary>
            Gets or sets the drawing of text between the extension lines. (DIMTIX)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitTextMove">
            <summary>
            Gets or sets the position of the text when it's moved either manually or automatically. (DIMTMOVE)
            </summary>
            <remarks>
            Default: BesideDimLine
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.AngularPrecision">
            <summary>
            Gets or sets the number of precision places displayed in angular dimensions. (DIMADEC)
            </summary>
            <remarks>
            Default: 0<br/>
            If set to -1 angular dimensions display the number of decimal places specified by LengthPrecision.
            It is recommended to use values in the range 0 to 8.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.LengthPrecision">
            <summary>
            Gets or sets the number of decimal places displayed for the primary units of a dimension. (DIMDEC)
            </summary>
            <remarks>
            Default: 2<br/>
            It is recommended to use values in the range 0 to 8.<br/>
            For architectural and fractional the precision used for the minimum fraction is 1/2^LinearDecimalPlaces.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimPrefix">
            <summary>
            Gets or sets the text prefix for the dimension. (DIMPOST)
            </summary>
            <remarks>
            Default: string.Empty
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimSuffix">
            <summary>
            Gets or sets the text suffix for the dimension. (DIMPOST)
            </summary>
            <remarks>
            Default: string.Empty
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DecimalSeparator">
            <summary>
            Gets or sets a single-character decimal separator to use when creating dimensions whose unit format is decimal. (DIMDSEP)
            </summary>
            <remarks>
            Default: "."
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimScaleLinear">
            <summary>
            Gets or sets a scale factor for linear dimension measurements. (DIMLFAC)
            </summary>
            <remarks>
            All linear dimension distances, including radii, diameters, and coordinates, are multiplied by DimScaleLinear before being converted to dimension text.<br />
            Positive values of DimScaleLinear are applied to dimensions in both model space and paper space; negative values are applied to paper space only.<br />
            DimScaleLinear has no effect on angular dimensions.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLengthUnits">
            <summary>
            Gets or sets the units for all dimension types except angular. (DIMLUNIT)
            </summary>
            <remarks>
            Scientific<br/>
            Decimal<br/>
            Engineering<br/>
            Architectural<br/>
            Fractional
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimAngularUnits">
            <summary>
            Gets or sets the units format for angular dimensions. (DIMAUNIT)
            </summary>
            <remarks>
            Decimal degrees<br/>
            Degrees/minutes/seconds<br/>
            Gradians<br/>
            Radians
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FractionType">
            <summary>
            Gets or sets the fraction format when DIMLUNIT is set to Architectural or Fractional. (DIMFRAC)
            </summary>
            <remarks>
            Horizontal stacking<br/>
            Diagonal stacking<br/>
            Not stacked (for example, 1/2)
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal dimensions; for example, 0.5000 becomes .5000. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressAngularLeadingZeros">
            <summary>
            Suppresses leading zeros in angular decimal dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMAZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressAngularTrailingZeros">
            <summary>
            Suppresses trailing zeros in angular decimal dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMAZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimRoundoff">
            <summary>
            Gets or sets the value to round all dimensioning distances. (DIMRND)
            </summary>
            <remarks>
            Default: 0 (no rounding off).<br/>
            If DIMRND is set to 0.25, all distances round to the nearest 0.25 unit.
            If you set DIMRND to 1.0, all distances round to the nearest integer.
            Note that the number of digits edited after the decimal point depends on the precision set by DIMDEC.
            DIMRND does not apply to angular dimensions.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.AlternateUnits">
            <summary>
            Gets or sets the alternate units format for dimensions.
            </summary>
            <remarks>Alternative units are not applicable for angular dimensions.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Tolerances">
            <summary>
            Gets or sets the tolerances format for dimensions.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Owner">
            <summary>
            Gets the owner of the actual dimension style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.Clone(System.String)">
            <summary>
            Creates a new DimensionStyle that is a copy of the current instance.
            </summary>
            <param name="newName">DimensionStyle name of the copy.</param>
            <returns>A new DimensionStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.Clone">
            <summary>
            Creates a new DimensionStyle that is a copy of the current instance.
            </summary>
            <returns>A new DimensionStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleAlternateUnits">
            <summary>
            Represents the way alternate units are formatted in dimension entities.
            </summary>
            <remarks>Alternative units are not applicable for angular dimensions.</remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleAlternateUnits.#ctor">
            <summary>
            Initializes a new instance of the <c>DimensionStyleUnitsFormat</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Enabled">
            <summary>
            Gets or sets if the alternate measurement units are added to the dimension text.  (DIMALT)
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.LengthPrecision">
            <summary>
            Sets the number of decimal places displayed for the alternate units of a dimension. (DIMALTD)
            </summary>
            <remarks>
            Default: 4<br/>
            It is recommended to use values in the range 0 to 8.<br/>
            For architectural and fractional the precision used for the minimum fraction is 1/2^LinearDecimalPlaces.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Prefix">
            <summary>
            Specifies the text prefix for the dimension. (DIMAPOST)
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Suffix">
            <summary>
            Specifies the text suffix for the dimension. (DIMAPOST)
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Multiplier">
            <summary>
            Gets or sets the multiplier used as the conversion factor between primary and alternate units. (DIMALTF)
            </summary>
            <remarks>
            to convert inches to millimeters, enter 25.4.
            The value has no effect on angular dimensions, and it is not applied to the rounding value or the plus or minus tolerance values. 
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.LengthUnits">
            <summary>
            Gets or sets the alternate units for all dimension types except angular. (DIMALTU)
            </summary>
            <remarks>
            Scientific<br/>
            Decimal<br/>
            Engineering<br/>
            Architectural<br/>
            Fractional
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.StackUnits">
            <summary>
            Gets or set if the Architectural or Fractional linear units will be shown stacked or not. (DIMALTU)
            </summary>
            <remarks>
            This value only is applicable if the <c>DimLengthUnits</c> property has been set to Architectural or Fractional,
            for any other value this parameter is not applicable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Roundoff">
            <summary>
            Gets or sets the value to round all dimensioning distances. (DIMALTRND)
            </summary>
            <remarks>
            Default: 0 (no rounding off).<br/>
            If DIMRND is set to 0.25, all distances round to the nearest 0.25 unit.
            If you set DIMRND to 1.0, all distances round to the nearest integer.
            Note that the number of digits edited after the decimal point depends on the precision set by DIMDEC.
            DIMRND does not apply to angular dimensions.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleAlternateUnits.Clone">
            <summary>
            Creates a new <c>DimensionStyle.DimensionStyleAlternateUnits</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>DimensionStyle.DimensionStyleAlternateUnits</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleFitOptions">
            <summary>
            Controls dimension text and arrow placement when space is not sufficient to place both within the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.TextAndArrows">
            <summary>
            Places both text and arrows outside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.Arrows">
            <summary>
            Moves arrows first, then text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.Text">
            <summary>
            Moves text first, then arrows.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.BestFit">
            <summary>
            Moves either text or arrows, whichever fits best.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleFitTextMove">
            <summary>
            Controls the placement of dimension text when it is moved from the default position, that is, the position defined by the dimension style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitTextMove.BesideDimLine">
            <summary>
            Moves the dimension line with dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitTextMove.OverDimLineWithLeader">
            <summary>
            Adds a leader when dimension text is moved.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitTextMove.OverDimLineWithoutLeader">
            <summary>
            Allows text to be moved freely without a leader.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleOverride">
            <summary>
            Represents a dimension style value that overrides a property of the style associated with a dimension.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleOverride.#ctor(netDxf.Tables.DimensionStyleOverrideType,System.Object)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverride</c>.
            </summary>
            <param name="type">Type of the dimension style to override.</param>
            <param name="value">Value of the dimension style to override.</param>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleOverride.ToString">
            <summary>
            Obtains a string that represents the actual dimension style override.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleOverride.Type">
            <summary>
            Gets the type of the dimension style to override.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleOverride.Value">
            <summary>
            Gets the value of the dimension style to override.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleOverrideChangeEventArgs.#ctor(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideChangeEventArgs</c>.
            </summary>
            <param name="item">The DimensionStyleOverride that is being added or removed from the insert.</param>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleOverrideChangeEventArgs.Item">
            <summary>
            Gets the DimensionStyleOverride that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleOverrideType">
            <summary>
            Dimension style override types.
            </summary>
            <remarks>
            There is one dimension style override type for each property of the <see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> class.
            The dimension style properties DIMBLK and DIMSAH are not available.
            The overrides always make use of the DIMBLK1 and DIMBLK2 setting the DIMSAH to true even when both arrow ends are the same.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineColor">
            <summary>
            Assigns colors to dimension lines, arrowheads, and dimension leader lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineLinetype">
            <summary>
            Linetype of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineLineweight">
            <summary>
            Lineweight to dimension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLine1Off">
            <summary>
            Suppresses display of the first dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLine2Off">
            <summary>
            Suppresses display of the second dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineExtend">
            <summary>
            Distance the dimension line extends beyond the extension line when oblique, architectural tick, integral, or no marks are drawn for arrowheads.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineColor">
            <summary>
            Colors to extension lines, center marks, and centerlines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine1Linetype">
            <summary>
            Linetype of the first extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine2Linetype">
            <summary>
            Linetype of the second extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineLineweight">
            <summary>
            Lineweight to extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine1Off">
            <summary>
            Suppresses display of the first extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine2Off">
            <summary>
            Suppresses display of the second extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineOffset">
            <summary>
            Specifies how far extension lines are offset from origin points.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineExtend">
            <summary>
            Specifies how far to extend the extension line beyond the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineFixed">
            <summary>
            Enables fixed length extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineFixedLength">
            <summary>
            Total length of the extension lines starting from the dimension line toward the dimension origin.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimArrow1">
            <summary>
            Arrowhead block for the first end of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimArrow2">
            <summary>
            Arrowhead block for the second end of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.LeaderArrow">
            <summary>
            Arrowhead block for leaders.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ArrowSize">
            <summary>
            Size of dimension line and leader line arrowheads. Also controls the size of hook lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.CenterMarkSize">
            <summary>
            Drawing of circle or arc center marks and centerlines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextStyle">
            <summary>
            Text style of the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextColor">
            <summary>
            Color of dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextFillColor">
            <summary>
            Color of background dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextHeight">
            <summary>
            Height of dimension text, unless the current text style has a fixed height.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextVerticalPlacement">
            <summary>
            Vertical position of text in relation to the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextHorizontalPlacement">
            <summary>
            Horizontal positioning of dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextInsideAlign">
            <summary>
            Positioning of the dimension text inside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextOutsideAlign">
            <summary>
            Positioning of the dimension text outside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextOffset">
            <summary>
            Distance around the dimension text when the dimension line breaks to accommodate dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextDirection">
            <summary>
            Specifies the direction of the dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextFractionHeightScale">
            <summary>
            Controls the scale of fractions relative to dimension text height.
            </summary>
            <remarks>
            This value is only applicable to Architectural and Fractional units, and also
            controls the height factor applied to the tolerance text in relation with the dimension text height.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitDimLineForce">
            <summary>
            Controls the drawing of the dimension lines even when the text are placed outside the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitDimLineInside">
            <summary>
            Controls the drawing of dimension lines outside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimScaleOverall">
            <summary>
            Overall scale factor applied to dimensioning variables that specify sizes, distances, or offsets.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitOptions">
            <summary>
            Controls the placement of text and arrowheads based on the space available between the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitTextInside">
            <summary>
            Controls the drawing of text between the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitTextMove">
            <summary>
            Controls the position of the text when it's moved either manually or automatically.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AngularPrecision">
            <summary>
            Number of precision places displayed in angular dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.LengthPrecision">
            <summary>
            Number of decimal places displayed for the primary units of a dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimPrefix">
            <summary>
            Specifies the text prefix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimSuffix">
            <summary>
            Specifies the text suffix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DecimalSeparator">
            <summary>
            Single-character decimal separator to use when creating dimensions whose unit format is decimal.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimScaleLinear">
            <summary>
            Scale factor for linear dimension measurements
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLengthUnits">
            <summary>
            Units for all dimension types except angular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimAngularUnits">
            <summary>
            Units format for angular dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FractionalType">
            <summary>
            Fraction format when DIMLUNIT is set to Architectural or Fractional.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressAngularLeadingZeros">
            <summary>
            Suppresses leading zeros in angular decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressAngularTrailingZeros">
            <summary>
            Suppresses trailing zeros in angular decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimRoundoff">
            <summary>
            Value to round all dimensioning distances.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsEnabled">
            <summary>
            Controls the display of the alternate units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsLengthUnits">
            <summary>
            Alternate units for all dimension types except angular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsStackedUnits">
            <summary>
            Controls if the Architectural or Fractional linear units will be shown stacked or not.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsLengthPrecision">
            <summary>
            Number of decimal places displayed for the alternate units of a dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsMultiplier">
            <summary>
            Multiplier used as the conversion factor between primary and alternate units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsRoundoff">
            <summary>
            Value to round all alternate units of a dimension  except angular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsPrefix">
            <summary>
            Specifies the alternate units text prefix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuffix">
            <summary>
            Specifies the alternate units text suffix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressLinearLeadingZeros">
            <summary>
            Suppresses alternate units leading zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressLinearTrailingZeros">
            <summary>
            Suppresses alternate units trailing zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressZeroFeet">
            <summary>
            Suppresses alternate units zero feet in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressZeroInches">
            <summary>
            Suppresses alternate units zero inches in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesDisplayMethod">
            <summary>
            Method for calculating the tolerance.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesUpperLimit">
            <summary>
            Maximum or upper tolerance value. When you select Symmetrical in DisplayMethod, this value is used for the tolerance.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesLowerLimit">
            <summary>
            Minimum or lower tolerance value.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesVerticalPlacement">
            <summary>
            Text vertical placement for symmetrical and deviation tolerances.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesPrecision">
            <summary>
            Gets or sets the number of decimal places.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal tolerance units (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal tolerance units (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural tolerance units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural tolerance units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAlternatePrecision">
            <summary>
            Number of decimal places of the tolerance alternate units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal alternate tolerance units (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal alternate tolerance units (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural alternate tolerance units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural alternate tolerance units.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTextDirection">
            <summary>
            Specifies the direction of the dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextDirection.LeftToRight">
            <summary>
            Displays dimension text in a Left-to-Right reading style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextDirection.RightToLeft">
            <summary>
            Displays dimension text in a Right-to-Left reading style.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTextHorizontalPlacement">
            <summary>
            Controls the vertical placement of dimension text in relation to the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.Centered">
            <summary>
            Centers the dimension text along the dimension line between the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.AtExtLines1">
            <summary>
            Left-justifies the text with the first extension line along the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.AtExtLine2">
            <summary>
            Right-justifies the text with the second extension line along the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.OverExtLine1">
            <summary>
            Positions the text over or along the first extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.OverExtLine2">
            <summary>
            Positions the text over or along the second extension line.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTextVerticalPlacement">
            <summary>
            Controls the placement of dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Centered">
            <summary>
            Centers the dimension text between the two parts of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Above">
            <summary>
            Places the dimension text above the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Outside">
            <summary>
            Places the dimension text on the side of the dimension line farthest away from the first defining point.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.JIS">
            <summary>
            Places the dimension text to conform to a Japanese Industrial Standards (JIS) representation.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Below">
            <summary>
            Places the dimension text under the dimension line.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTolerances">
            <summary>
            Represents the way tolerances are formatted in dimension entities
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleTolerances.#ctor">
            <summary>
            Initializes a new instance of the <c>TolerancesFormat</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.DisplayMethod">
            <summary>
            Gets or sets the method for calculating the tolerance. (DIMTOL)
            </summary>
            <remarks>
            Default: None
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.UpperLimit">
            <summary>
            Gets or sets the maximum or upper tolerance value. When you select Symmetrical in DisplayMethod, this value is used for the tolerance. (DIMTP)
            </summary>
            <remarks>
            Default: 0.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.LowerLimit">
            <summary>
            Gets or sets the minimum or lower tolerance value. (DIMTM)
            </summary>
            <remarks>
            Default: 0.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.VerticalPlacement">
            <summary>
            Gets or sets the text vertical placement for symmetrical and deviation tolerances. (DIMTOLJ)
            </summary>
            <remarks>
            Default: Middle
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.Precision">
            <summary>
            Gets or sets the number of decimal places. (DIMTDEC)
            </summary>
            <remarks>
            Default: 4<br/>
            It is recommended to use values in the range 0 to 8.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternatePrecision">
            <summary>
            Gets or sets the number of decimal places of the tolerance alternate units. (DIMALTTD)
            </summary>
            <remarks>
            Default: 2<br/>
            It is recommended to use values in the range 0 to 8.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleTolerances.Clone">
            <summary>
            Creates a new <c>DimensionStyle.TolerancesFormat</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>DimensionStyle.TolerancesFormat</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTolerancesDisplayMethod">
            <summary>
            Defines the method for calculating the tolerance.
            </summary>
            <remarks>
            The Basic method for displaying tolerances in dimensions is not available,
            use a negative number for the <c>TextOffset</c> of the dimension style. The result is exactly the same.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.None">
            <summary>
            Does not add a tolerance.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.Symmetrical">
            <summary>
            Adds a plus/minus expression of tolerance in which a single value of variation is applied to the dimension measurement.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.Deviation">
            <summary>
            Adds a plus/minus tolerance expression. Different plus and minus values of variation are applied to the dimension measurement.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.Limits">
            <summary>
            Creates a limit dimension. A maximum and a minimum value are displayed, one over the other.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement">
            <summary>
            Controls text justification for symmetrical and deviation tolerances.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement.Bottom">
            <summary>
            Aligns the tolerance text with the bottom of the main dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement.Middle">
            <summary>
            Aligns the tolerance text with the middle of the main dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement.Top">
            <summary>
            Aligns the tolerance text with the top of the main dimension text.
            </summary>
        </member>
        <member name="T:netDxf.Tables.FontStyle">
            <summary>
            Represent the font character formatting, such as italic, bold, or regular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.FontStyle.Regular">
            <summary>
            Regular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.FontStyle.Italic">
            <summary>
            Italic or oblique.
            </summary>
        </member>
        <member name="F:netDxf.Tables.FontStyle.Bold">
            <summary>
            Bold.
            </summary>
        </member>
        <member name="T:netDxf.Tables.Layer">
            <summary>
            Represents a layer.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Layer.DefaultName">
            <summary>
            Default layer name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Default">
            <summary>
            Gets the default Layer 0.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Layer</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.Layer.Description">
            <summary>
            Gets or sets the layer description.
            </summary>
            <remarks>
            The layer description is saved in the extended data of the layer, it will be handle automatically when the file is saved or loaded.<br />
            New line characters are not allowed.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.Layer.Linetype">
            <summary>
            Gets or sets the layer <see cref="P:netDxf.Tables.Layer.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Color">
            <summary>
            Gets or sets the layer <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsVisible">
            <summary>
            Gets or sets the layer visibility.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsFrozen">
            <summary>
            Gets or sets if the layer is frozen; otherwise layer is thawed.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsLocked">
            <summary>
            Gets or sets if the layer is locked.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Plot">
            <summary>
            Gets or sets if the plotting flag.
            </summary>
            <remarks>If set to false, do not plot this layer.</remarks>
        </member>
        <member name="P:netDxf.Tables.Layer.Lineweight">
            <summary>
            Gets or sets the layer line weight, one unit is always 1/100 mm (default = Default).
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Transparency">
            <summary>
            Gets or sets layer transparency (default: 0, opaque).
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Owner">
            <summary>
            Gets the owner of the actual layer.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.Layer.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.Layer.Clone(System.String)">
            <summary>
            Creates a new Layer that is a copy of the current instance.
            </summary>
            <param name="newName">Layer name of the copy.</param>
            <returns>A new Layer that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.Layer.Clone">
            <summary>
            Creates a new Layer that is a copy of the current instance.
            </summary>
            <returns>A new Layer that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LayerFlags">
            <summary>
            Standard layer flags (bit-coded values).
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.Frozen">
            <summary>
            Layer is frozen; otherwise layer is thawed.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.FrozenNewViewports">
            <summary>
            Layer is frozen by default in new viewports.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.Locked">
            <summary>
            Layer is locked.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.XrefDependent">
            <summary>
            If set, table entry is externally dependent on an xRef.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.XrefResolved">
            <summary>
            If both this bit and bit 16 are set, the externally dependent xRef has been successfully resolved.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.Referenced">
            <summary>
            If set, the table entry was referenced by at least one entity in the drawing the last time the 
            drawing was edited. (This flag is for the benefit of AutoCAD commands. It can be ignored by 
            most programs that read DXF files and need not be set by programs that write DXF files)
            </summary>
        </member>
        <member name="T:netDxf.Tables.Linetype">
            <summary>
            Represents a line type. Simple and complex line types are supported.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Linetype.ByLayerName">
            <summary>
            ByLayer line type name.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Linetype.ByBlockName">
            <summary>
            ByBlock line type name.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Linetype.DefaultName">
            <summary>
            Default line type name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.ByLayer">
            <summary>
            Gets the ByLayer line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.ByBlock">
            <summary>
            Gets the ByBlock line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Continuous">
            <summary>
            Gets the predefined continuous line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Center">
            <summary>
            Gets a predefined center line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.DashDot">
            <summary>
            Gets a predefined dash dot line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Dashed">
            <summary>
            Gets a predefined dashed line
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Dot">
            <summary>
            Gets a predefined dot line
            </summary>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="description">Line type description.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Tables.LinetypeSegment})">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="segments">List of linetype segments.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Tables.LinetypeSegment},System.String)">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="segments">List of linetype segments.</param>
            <param name="description">Line type description.</param>
        </member>
        <member name="P:netDxf.Tables.Linetype.IsByLayer">
            <summary>
            Defines if the line type is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.IsByBlock">
            <summary>
            Defines if the line type is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Description">
            <summary>
            Gets or sets the line type description.
            </summary>
            <remarks>
            New line characters are not allowed.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.Linetype.Segments">
            <summary>
            Gets the list of line type segments.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.SegmentsPatternLength">
            <summary>
            Gets the or sets segments pattern total length of the line type.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Linetype.Length">
            <summary>
            Gets the total length of the line type.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Linetype.NamesFromFile(System.String)">
            <summary>
            Gets the list of linetype names defined in a LIN file.
            </summary>
            <param name="file">Linetype definitions file.</param>
            <returns>List of linetype names contained in the specified LIN file.</returns>
        </member>
        <member name="M:netDxf.Tables.Linetype.Load(System.String,System.String)">
            <summary>
            Creates a new line type from the definition in a LIN file.
            </summary>
            <param name="file">Lin file where the definition is located.</param>
            <param name="linetypeName">Name of the line type definition to read (ignore case).</param>
            <returns>The linetype defined in the LIN file with the specified name, null if the linetype has not been found in the linetype definitions file.</returns>
        </member>
        <member name="M:netDxf.Tables.Linetype.Save(System.String)">
            <summary>
            Saves the current linetype to the specified file, if the file does not exist it creates a new one.
            </summary>
            <param name="file">File where the current linetype will be saved.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.Linetype.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.Linetype.Clone(System.String)">
            <summary>
            Creates a new Linetype that is a copy of the current instance.
            </summary>
            <param name="newName">Linetype name of the copy.</param>
            <returns>A new Linetype that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.Linetype.Clone">
            <summary>
            Creates a new Linetype that is a copy of the current instance.
            </summary>
            <returns>A new Linetype that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LinetypeSegment">
            <summary>
            Base class for the three kinds of linetype segments simple, text, and shape.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeSegment.#ctor(netDxf.Tables.LinetypeSegmentType,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeSegment</c> class.
            </summary>
            <param name="type">Type of the linetype segment.</param>
            <param name="length">Dash or space length of the segment.</param>
        </member>
        <member name="P:netDxf.Tables.LinetypeSegment.Type">
            <summary>
            Gets the linetype segment simple, text, or shape.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeSegment.Length">
            <summary>
            Gets or sets the dash, dot or space length.
            </summary>
            <remarks>
            A positive decimal number denotes a pen-down (dash) segment of that length. 
            A negative decimal number denotes a pen-up (space) segment of that length. 
            A dash length of 0 draws a dot. 
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LinetypeSegment.Clone">
            <summary>
            Creates a new <c>LinetypeSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.LinetypeSegmentChangeEventArgs.#ctor(netDxf.Tables.LinetypeSegment)">
            <summary>
            Initializes a new instance of <c>LinetypeSegmentChangeEventArgs</c>.
            </summary>
            <param name="item">The item that is being added or removed from the line type segment list.</param>
        </member>
        <member name="P:netDxf.Tables.LinetypeSegmentChangeEventArgs.Item">
            <summary>
            Gets the item that is being added or removed from the line type segment list.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LinetypeSegmentRotationType">
            <summary>
            Define the type of rotation specified by the rotation value of the text or shape linetype segment.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentRotationType.Upright">
            <summary>
            Specifies upright or easy-to-read text.
            </summary>
            <remarks>The dxf seems to store the rotation value only as relative or absolute, therefore upright and relative will be considered equivalent.</remarks>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentRotationType.Relative">
            <summary>
            Specifies relative or tangential rotation with respect to the line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentRotationType.Absolute">
            <summary>
            Specifies absolute rotation of the text with respect to the origin; that is, all text has the same rotation regardless of its position relative to the line.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LinetypeSegmentType">
            <summary>
            Define the linetype segment type simple, text, or shape.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentType.Simple">
            <summary>
            Linetype segment made only of a simple dash, dot, or space.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentType.Text">
            <summary>
            Linetype segment made of a text string.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentType.Shape">
            <summary>
            Linetype segment made of a shape.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LinetypeShapeSegment">
            <summary>
            Represents a shape linetype segment.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.#ctor(System.String,netDxf.Tables.ShapeStyle)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="name">Shape name of the linetype segment.</param>
            <param name="style">File where the shape of the linetype segment is defined.</param>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.<br />
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.#ctor(System.String,netDxf.Tables.ShapeStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="name">Shape name of the linetype segment.</param>
            <param name="style">File where the shape of the linetype segment is defined.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.<br />
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.#ctor(System.String,netDxf.Tables.ShapeStyle,System.Double,netDxf.Vector2,netDxf.Tables.LinetypeSegmentRotationType,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="name">Shape name of the linetype segment.</param>
            <param name="style">File where the shape of the linetype segment is defined.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
            <param name="offset">Shift of the shape along the line.</param>
            <param name="rotationType">Type of rotation defined by the rotation value.</param>
            <param name="rotation">Rotation of the shape.</param>
            <param name="scale">Scale of the shape.</param>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.<br />
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Name">
            <summary>
            Gets or sets the name of the shape.
            </summary>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shx file.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Style">
            <summary>
            Gets the shape style.
            </summary>
            <remarks>
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Offset">
            <summary>
            Gets or sets the shift of the shape along the line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.RotationType">
            <summary>
            Gets or sets the type of rotation defined by the rotation value upright, relative, or absolute.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Rotation">
            <summary>
            Gets or sets the angle in degrees of the shape.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Scale">
            <summary>
            Gets or sets the scale of the shape relative to the scale of the line type.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.Clone">
            <summary>
            Creates a new <c>LinetypeShapeSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeShapeSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LinetypeSimpleSegment">
            <summary>
            Represents a simple linetype segment.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeSimpleSegment.#ctor">
            <summary>
            Initializes a new instance of the <c>LinetypeSimpleSegment</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeSimpleSegment.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeSimpleSegment</c> class.
            </summary>
            <param name="length">Dash or space length of the segment.</param>
        </member>
        <member name="M:netDxf.Tables.LinetypeSimpleSegment.Clone">
            <summary>
            Creates a new <c>LinetypeSimpleSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeSimpleSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LinetypeTextSegment">
            <summary>
            Represents a text linetype segment.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.#ctor">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.#ctor(System.String,netDxf.Tables.TextStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="text">Text to display on the linetype segment.</param>
            <param name="style">Name of the TextStyle.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.#ctor(System.String,netDxf.Tables.TextStyle,System.Double,netDxf.Vector2,netDxf.Tables.LinetypeSegmentRotationType,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="text">Text to display on the linetype segment.</param>
            <param name="style">Name of the TextStyle.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
            <param name="offset">Shift of the shape along the line.</param>
            <param name="rotationType">Type of rotation defined by the rotation value.</param>
            <param name="rotation">Rotation of the text.</param>
            <param name="scale">Scale of the text.</param>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Text">
            <summary>
            Gets or sets the text displayed by the linetype.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Style">
            <summary>
            Gets or sets the TextStyle of the text to be displayed by the linetype.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Offset">
            <summary>
            Gets or sets the shift of the text along the line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.RotationType">
            <summary>
            Gets or sets the type of rotation defined by the rotation value upright, relative, or absolute.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Rotation">
            <summary>
            Gets or sets the angle in degrees of the text.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Scale">
            <summary>
            Gets or sets the scale of the text relative to the scale of the linetype.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.Clone">
            <summary>
            Creates a new <c>LinetypeShapeSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeShapeSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.ShapeStyle">
            <summary>
            Represent a shape style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ShapeStyle.DefaultShapeFile">
            <summary>
            Default text style font.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.Default">
            <summary>
            Gets the default shape style.
            </summary>
            <remarks>AutoCad stores the shapes for the predefined complex linetypes in the ltypeshp.shx file.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>ShapeStyle</c> class.
            </summary>
            <param name="name">Shape style name.</param>
            <param name="file">Shape definitions SHX file.</param>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.File">
            <summary>
            Gets or sets the shape SHX file name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.Size">
            <summary>
            Gets the shape size.
            </summary>
            <remarks>This value seems to have no effect on shapes or complex line types with shapes. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.WidthFactor">
            <summary>
            Gets the shape width factor.
            </summary>
            <remarks>This value seems to have no effect on shapes or complex line types with shapes. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.ObliqueAngle">
            <summary>
            Gets the shape oblique angle in degrees.
            </summary>
            <remarks>This value seems to have no effect on shapes or complex line types with shapes. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.Owner">
            <summary>
            Gets the owner of the actual shape style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.NamesFromFile(System.String)">
            <summary>
            Gets the list of shapes names defined in a SHX file.
            </summary>
            <param name="file">Shape SHX file.</param>
            <returns>List of shape names contained in the specified SHX file.</returns>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ContainsShapeName(System.String,System.String)">
            <summary>
            Checks if the shape SHP file contains a shape with the specified name.
            </summary>
            <param name="file">Shape SHX file.</param>
            <param name="shapeName">Shape name.</param>
            <returns>True if the shape SHX file that contains a shape with the specified name, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.NamesFromShapeStyle">
            <summary>
            Gets the list of shapes names defined in the actual shape style (the shape SHX file must be accessible).
            </summary>
            <returns>List of shape names contained in the actual shape style.</returns>
            <remarks>
            If the actual shape style belongs to a document, it will look for the SHX file also in the document support folders.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ContainsShapeName(System.String)">
            <summary>
            Checks if the actual shape style contains a shape with the specified name (the shape SHX file must be accessible).
            </summary>
            <param name="name">Shape name.</param>
            <returns>True if the shape style that contains a shape with the specified name, false otherwise.</returns>
            <remarks>If the actual shape style belongs to a document, it will look for the SHX file also in the document support folders.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ShapeNumber(System.String)">
            <summary>
            Gets the number of the shape with the specified name.
            </summary>
            <param name="name">Name of the shape.</param>
            <returns>The number of the shape, 0 in case the shape has not been found.</returns>
            <remarks>If the actual shape style belongs to a document, it will look for the SHX file also in the document support folders.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ShapeName(System.Int16)">
            <summary>
            Gets the name of the shape with the specified number.
            </summary>
            <param name="number">Number of the shape.</param>
            <returns>The name of the shape, empty in case the shape has not been found.</returns>
            <remarks>If the actual shape style belongs to a document, it will look for the SHX file also in the document support folders.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.Clone(System.String)">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <param name="newName">TextStyle name of the copy.</param>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.Clone">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.TableObject">
            <summary>
            Defines classes that can be accessed by name. They are usually part of the DXF TABLE section but can also be part of the OBJECTS section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TableObject.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TableObject</c> class.
            </summary>
            <param name="name">Table name. The following characters \&lt;&gt;/?":;*|,=` are not supported for table object names.</param>
            <param name="codeName">Table <see cref="T:netDxf.DxfObjectCode">code name</see>.</param>
            <param name="checkName">Defines if the table object name needs to be checked for invalid characters.</param>
        </member>
        <member name="P:netDxf.Tables.TableObject.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Tables.TableObject.IsReserved">
            <summary>
            Gets if the table object is reserved and cannot be deleted.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TableObject.InvalidCharacters">
            <summary>
            Gets the array of characters not supported as table object names.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TableObject.IsValidName(System.String)">
            <summary>
            Checks if a string is valid as a table object name.
            </summary>
            <param name="name">String to check.</param>
            <returns>True if the string is valid as a table object name, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.CompareTo(System.Object)">
            <summary>
            Compares the current TableObject with another TableObject of the same type.
            </summary>
            <param name="other">A TableObject to compare with this TableObject.</param>
            <returns>
            An integer that indicates the relative order of the table objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
            <remarks>If both table objects are no of the same type it will return zero. The comparison is made by their names.</remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.CompareTo(netDxf.Tables.TableObject)">
            <summary>
            Compares the current TableObject with another TableObject of the same type.
            </summary>
            <param name="other">A TableObject to compare with this TableObject.</param>
            <returns>
            An integer that indicates the relative order of the table objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
            <remarks>If both table objects are not of the same type it will return zero. The comparison is made by their names.</remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.Equals(System.Object)">
            <summary>
            Check if two TableObject are equal.
            </summary>
            <param name="other">Another TableObject to compare to.</param>
            <returns>True if two TableObject are equal or false in any other case.</returns>
            <remarks>
            Two TableObjects are considered equals if their names are the same, regardless of their internal values.
            This is done this way because in a DXF two TableObjects cannot have the same name.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.Equals(netDxf.Tables.TableObject)">
            <summary>
            Check if two TableObject are equal.
            </summary>
            <param name="other">Another TableObject to compare to.</param>
            <returns>True if two TableObject are equal or false in any other case.</returns>
            <remarks>
            Two TableObjects are considered equals if their names are the same, regardless of their internal values.
            This is done this way because in a DXF two TableObjects cannot have the same name.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.Clone(System.String)">
            <summary>
            Creates a new table object that is a copy of the current instance.
            </summary>
            <param name="newName">TableObject name of the copy.</param>
            <returns>A new table object that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.Clone">
            <summary>
            Creates a new table object that is a copy of the current instance.
            </summary>
            <returns>A new table object that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.TableObjectChangedEventArgs`1">
            <summary>
            Event data for changes or substitutions of table objects in entities or other tables.
            </summary>
            <typeparam name="T">A table object</typeparam>
        </member>
        <member name="M:netDxf.Tables.TableObjectChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <c>TableObjectModifiedEventArgs</c>.
            </summary>
            <param name="oldTable">The previous table object.</param>
            <param name="newTable">The new table object.</param>
        </member>
        <member name="P:netDxf.Tables.TableObjectChangedEventArgs`1.OldValue">
            <summary>
            Gets the previous property value.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TableObjectChangedEventArgs`1.NewValue">
            <summary>
            Gets or sets the new property value.
            </summary>
        </member>
        <member name="T:netDxf.Tables.TextStyle">
            <summary>
            Represents a text style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.TextStyle.DefaultName">
            <summary>
            Default text style name.
            </summary>
        </member>
        <member name="F:netDxf.Tables.TextStyle.DefaultFont">
            <summary>
            Default text style font.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font file name with full or relative path.</param>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font file name with full or relative path.</param>
            <param name="checkName">Specifies if the style name has to be checked.</param>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String,netDxf.Tables.FontStyle)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class exclusively to be used with true type fonts.
            </summary>
            <param name="name">Text style name.</param>
            <param name="fontFamily">True type font family name.</param>
            <param name="fontStyle">True type font style.</param>
            <remarks>This constructor is to be use only with true type fonts.</remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String,netDxf.Tables.FontStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class exclusively to be used with true type fonts.
            </summary>
            <param name="name">Text style name.</param>
            <param name="fontFamily">True type font family name.</param>
            <param name="fontStyle">True type font style</param>
            <param name="checkName">Specifies if the style name has to be checked.</param>
            <remarks>This constructor is to be use only with true type fonts.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontFile">
            <summary>
            Gets or sets the text style font file name.
            </summary>
            <remarks>
            When this value is used for true type fonts should be present in the Font system folder.<br />
            When the style does not contain any information for the file the font information will be saved in the extended data when saved to a DXF,
            this is only applicable for true type fonts.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.BigFont">
            <summary>
            Gets or sets an Asian-language Big Font file.
            </summary>
            <remarks>Only ACAD compiled shape SHX fonts are valid for creating Big Fonts.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontFamilyName">
            <summary>
            Gets or sets the true type font family name.
            </summary>
            <remarks>
            When the font family name is manually specified the file font will not be used and it will be set to empty,
            the font style will also we set to FontStyle.Regular.
            In this case the font information will be stored in the style extended data when saved to a DXF.<br />
            This value is only applicable for true type fonts.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontStyle">
            <summary>
            Gets or sets the true type font style.
            </summary>
            <remarks>
            The font style value is ignored and will always return FontStyle.Regular when a font file has been specified.<br />
            All styles may not be available for the current font family.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Fixed text height; 0 if not fixed.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.WidthFactor">
            <summary>
            Gets or sets the text width factor.
            </summary>
            <remarks>Valid values range from 0.01 to 100. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle in degrees.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsVertical">
            <summary>
            Gets or sets the text is vertical.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Owner">
            <summary>
            Gets the owner of the actual text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.Clone(System.String)">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <param name="newName">TextStyle name of the copy.</param>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.TextStyle.Clone">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.UCS">
            <summary>
            Represents a User Coordinate System.
            </summary>
        </member>
        <member name="M:netDxf.Tables.UCS.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UCS</c> class.
            </summary>
            <param name="name">User coordinate system name.</param>
        </member>
        <member name="M:netDxf.Tables.UCS.#ctor(System.String,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>UCS</c> class.
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="xDirection">X-axis direction in WCS.</param>
            <param name="yDirection">Y-axis direction in WCS.</param>
            <remarks>
            The x-axis direction and y-axis direction must be perpendicular.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.UCS.Origin">
            <summary>
            Gets or sets the user coordinate system origin in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.XAxis">
            <summary>
            Gets the user coordinate system x-axis direction in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.YAxis">
            <summary>
            Gets the user coordinate system y-axis direction in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.ZAxis">
            <summary>
            Gets the user coordinate system z-axis direction in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.Owner">
            <summary>
            Gets the owner of the actual user coordinate system.
            </summary>
        </member>
        <member name="M:netDxf.Tables.UCS.SetAxis(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Sets the user coordinate system x-axis and y-axis direction.
            </summary>
            <param name="xDirection">X-axis direction in WCS.</param>
            <param name="yDirection">Y-axis direction in WCS.</param>
        </member>
        <member name="M:netDxf.Tables.UCS.FromXAxisAndPointOnXYplane(System.String,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Creates a new user coordinate system from the x-axis and a point on XY plane.
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="xDirection">X-axis direction in WCS.</param>
            <param name="pointOnPlaneXY">Point on the XY plane.</param>
            <returns>A new user coordinate system.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.FromNormal(System.String,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Creates a new user coordinate system from the XY plane normal (z-axis).
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="normal">XY plane normal (z-axis).</param>
            <returns>A new user coordinate system.</returns>
            <remarks>This method uses the ArbitraryAxis algorithm to obtain the user coordinate system x-axis and y-axis.</remarks>
        </member>
        <member name="M:netDxf.Tables.UCS.FromNormal(System.String,netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Creates a new user coordinate system from the XY plane normal (z-axis).
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="normal">XY plane normal (z-axis).</param>
            <param name="rotation">The counter-clockwise angle in radians along the normal (z-axis).</param>
            <returns>A new user coordinate system.</returns>
            <remarks>This method uses the ArbitraryAxis algorithm to obtain the user coordinate system x-axis and y-axis.</remarks>
        </member>
        <member name="M:netDxf.Tables.UCS.GetTransformation">
            <summary>
            Gets the user coordinate system rotation matrix.
            </summary>
            <returns>A Matrix3.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.Transform(netDxf.Vector3,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="from">Points coordinate system.</param>
            <param name="to">Coordinate system of the transformed points.</param>
            <returns>Transformed point list.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector3},netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Points to transform.</param>
            <param name="from">Points coordinate system.</param>
            <param name="to">Coordinate system of the transformed points.</param>
            <returns>Transformed point list.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.UCS.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.UCS.Clone(System.String)">
            <summary>
            Creates a new UCS that is a copy of the current instance.
            </summary>
            <param name="newName">UCS name of the copy.</param>
            <returns>A new UCS that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.Clone">
            <summary>
            Creates a new UCS that is a copy of the current instance.
            </summary>
            <returns>A new UCS that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.View.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>View</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.View.Owner">
            <summary>
            Gets the owner of the actual view.
            </summary>
        </member>
        <member name="M:netDxf.Tables.View.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.View.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.View.Clone(System.String)">
            <summary>
            Creates a new View that is a copy of the current instance.
            </summary>
            <param name="newName">View name of the copy.</param>
            <returns>A new View that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.View.Clone">
            <summary>
            Creates a new View that is a copy of the current instance.
            </summary>
            <returns>A new View that is a copy of this instance.</returns>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.Off">
            <summary>
            Turned off.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.Perspective">
            <summary>
            Perspective view active.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.FrontClippingPlane">
            <summary>
            Front clipping on.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.BackClippingPlane">
            <summary>
            Back clipping on.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.UCSFollow">
            <summary>
            UCS Follow mode on.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.FrontClipNotAtEye">
            <summary>
            Front clip not at eye. If on, the front clip distance (FRONTZ) determines the front clipping plane.
            If off, FRONTZ is ignored, and the front clipping plane is set to pass through the camera point (vectors behind the camera are not displayed).
            This flag is ignored if the front-clipping bit (2) is off.
            </summary>
        </member>
        <member name="T:netDxf.Tables.VPort">
            <summary>
            Represents a document viewport.
            </summary>
        </member>
        <member name="F:netDxf.Tables.VPort.DefaultName">
            <summary>
            Default VPort name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.Active">
            <summary>
            Gets the active viewport.
            </summary>
        </member>
        <member name="M:netDxf.Tables.VPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>VPort</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewCenter">
            <summary>
            Gets or sets the view center point in DCS (Display Coordinate System)
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.SnapBasePoint">
            <summary>
            Gets or sets the snap base point in DCS (Display Coordinate System)
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.SnapSpacing">
            <summary>
            Gets or sets the snap spacing X and Y.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.GridSpacing">
            <summary>
            Gets or sets the grid spacing X and Y.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewDirection">
            <summary>
            Gets or sets the view direction from target point in WCS (World Coordinate System).
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewTarget">
            <summary>
            Gets or sets the view target point in WCS (World Coordinate System).
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewHeight">
            <summary>
            Gets or sets the view height.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewAspectRatio">
            <summary>
            Gets or sets the view aspect ratio (view width/view height).
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ShowGrid">
            <summary>
            Gets or sets the grid on/off.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.SnapMode">
            <summary>
            Gets or sets the snap mode on/off.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.Owner">
            <summary>
            Gets the owner of the actual viewport.
            </summary>
        </member>
        <member name="M:netDxf.Tables.VPort.HasReferences">
            <summary>
            Checks if this instance has been referenced by other DxfObjects. 
            </summary>
            <returns>
            Returns true if this instance has been referenced by other DxfObjects, false otherwise.
            It will always return false if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same value as the HasReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.VPort.GetReferences">
            <summary>
            Gets the list of DxfObjects referenced by this instance.
            </summary>
            <returns>
            A list of DxfObjectReference that contains the DxfObject referenced by this instance and the number of times it does.
            It will return null if this instance does not belong to a document.
            </returns>
            <remarks>
            This method returns the same list as the GetReferences method that can be found in the TableObjects class.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.VPort.Clone(System.String)">
            <summary>
            Creates a new VPort that is a copy of the current instance.
            </summary>
            <param name="newName">VPort name of the copy.</param>
            <returns>A new VPort that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.VPort.Clone">
            <summary>
            Creates a new VPort that is a copy of the current instance.
            </summary>
            <returns>A new VPort that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Transparency">
            <summary>
            Represents the transparency of a layer or an entity.
            </summary>
            <remarks>
            When the transparency of an entity is ByLayer the code 440 will not appear in the dxf,
            but for comparison purposes the ByLayer transparency is assigned a value of -1.
            </remarks>
        </member>
        <member name="P:netDxf.Transparency.ByLayer">
            <summary>
            Gets the ByLayer transparency.
            </summary>
        </member>
        <member name="P:netDxf.Transparency.ByBlock">
            <summary>
            Gets the ByBlock transparency.
            </summary>
        </member>
        <member name="M:netDxf.Transparency.#ctor">
            <summary>
            Initializes a new instance of the <c>Transparency</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Transparency.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>Transparency</c> class.
            </summary>
            <param name="value">Alpha value range from 0 to 90.</param>
            <remarks>
            Accepted transparency values range from 0 (opaque) to 90 (almost transparent), the reserved values -1 and 100 represents ByLayer and ByBlock transparency.
            </remarks>
        </member>
        <member name="P:netDxf.Transparency.IsByLayer">
            <summary>
            Defines if the transparency is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.Transparency.IsByBlock">
            <summary>
            Defines if the transparency is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.Transparency.Value">
            <summary>
            Gets or sets the transparency value range from 0 to 90.
            </summary>
            <remarks>
            Accepted transparency values range from 0 to 90, the reserved values -1 and 100 represents ByLayer and ByBlock.
            </remarks>
        </member>
        <member name="M:netDxf.Transparency.ToAlphaValue(netDxf.Transparency)">
            <summary>
            Gets the transparency value from a <see cref="T:netDxf.Transparency">transparency</see> object.
            </summary>
            <param name="transparency">A <see cref="T:netDxf.Transparency">transparency</see>.</param>
            <returns>A transparency value.</returns>
        </member>
        <member name="M:netDxf.Transparency.FromAlphaValue(System.Int32)">
            <summary>
            Gets the <see cref="T:netDxf.Transparency">transparency</see> object from a transparency value.
            </summary>
            <param name="value">A transparency value.</param>
            <returns>A <see cref="T:netDxf.Transparency">transparency</see></returns>
        </member>
        <member name="M:netDxf.Transparency.Clone">
            <summary>
            Creates a new transparency that is a copy of the current instance.
            </summary>
            <returns>A new transparency that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Transparency.Equals(netDxf.Transparency)">
            <summary>
            Check if the components of two transparencies are equal.
            </summary>
            <param name="other">Another transparency to compare to.</param>
            <returns>True if their indexes are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Transparency.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Units.AngleDirection">
            <summary>
            Specifies the direction of an angle.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleDirection.CCW">
            <summary>
            Counterclockwise (right handedness).
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleDirection.CW">
            <summary>
            Clockwise (left handedness).
            </summary>
        </member>
        <member name="T:netDxf.Units.AngleUnitFormat">
            <summary>
            Utility methods to format a decimal angle in degrees to its different string representations.
            </summary>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToDecimal(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its decimal string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in decimal units.</returns>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToDegreesMinutesSeconds(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its degrees, minutes and seconds string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in degrees, minutes and seconds.</returns>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToGradians(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its gradians string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in gradians.</returns>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToRadians(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its radians string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in radians.</returns>
        </member>
        <member name="T:netDxf.Units.AngleUnitType">
            <summary>
            Angular units format for creating objects.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.DecimalDegrees">
            <summary>
            Decimal degrees.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.DegreesMinutesSeconds">
            <summary>
            Degrees/minutes/seconds.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.Gradians">
            <summary>
            Gradians
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.Radians">
            <summary>
            Radians
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.SurveyorUnits">
            <summary>
            Surveyor's units.
            </summary>
        </member>
        <member name="T:netDxf.Units.DrawingTime">
            <summary>
            Utility functions to handle DateTime conversions.
            </summary>
        </member>
        <member name="M:netDxf.Units.DrawingTime.ToJulianCalendar(System.DateTime)">
            <summary>
            Calculates a date represented as &lt;Julian date&gt;.&lt;Fraction of day&gt; from a <see cref="T:System.DateTime">DateTime</see> instance.
            </summary>
            <param name="date"><see cref="T:System.DateTime">DateTime</see> instance.</param>
            <returns>The date represented as &lt;Julian date&gt;.&lt;Fraction of day&gt; equivalent to the <see cref="T:System.DateTime">DateTime</see> instance.</returns>
        </member>
        <member name="M:netDxf.Units.DrawingTime.FromJulianCalendar(System.Double)">
            <summary>
            Calculates the <see cref="T:System.DateTime">DateTime</see> from a date represented as &lt;Julian date&gt;&lt;.Fraction of day&gt;.
            </summary>
            <param name="date">A date represented as &lt;Julian date&gt;.&lt;Fraction of day&gt;.</param>
            <returns>The <see cref="T:System.DateTime">DateTime</see> equivalent to the Julian date.</returns>
        </member>
        <member name="M:netDxf.Units.DrawingTime.EditingTime(System.Double)">
            <summary>
            Calculates the <see cref="T:System.TimeSpan">TimeSpan</see> from a elapsed time represented as &lt;Number of days&gt;.&lt;Fraction of day&gt;.
            </summary>
            <param name="elapsed">An elapsed time represented as &lt;Number of days&gt;.&lt;Fraction of day&gt;.</param>
            <returns>The <see cref="T:System.TimeSpan">TimeSpan</see> equivalent to the elapsed time.</returns>
        </member>
        <member name="T:netDxf.Units.DrawingUnits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Unitless">
            <summary>
            Unitless.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Microinches">
            <summary>
            Microinches.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Mils">
            <summary>
            Mils (a thousandth of an inch).
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Angstroms">
            <summary>
            Angstroms.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Nanometers">
            <summary>
            Nanometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Microns">
            <summary>
            Microns.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Decimeters">
            <summary>
            Decimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Decameters">
            <summary>
            Decameters
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Hectometers">
            <summary>
            Hectometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Gigameters">
            <summary>
            Gigameters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.AstronomicalUnits">
            <summary>
            AstronomicalUnits.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.LightYears">
            <summary>
            LightYears.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Parsecs">
            <summary>
            Parsecs.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.USSurveyFeet">
            <summary>
            US Survey Feet
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.USSurveyInches">
            <summary>
            US Survey Inches
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.USSurveyYards">
            <summary>
            US Survey Yards
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.USSurveyMiles">
            <summary>
            US Survey Miles
            </summary>
        </member>
        <member name="T:netDxf.Units.FractionFormatType">
            <summary>
            Defines the fraction format when DIMLUNIT is set to 4 (Architectural) or 5 (Fractional).
            </summary>
        </member>
        <member name="F:netDxf.Units.FractionFormatType.Horizontal">
            <summary>
            Horizontal stacking.
            </summary>
        </member>
        <member name="F:netDxf.Units.FractionFormatType.Diagonal">
            <summary>
            Diagonal stacking.
            </summary>
        </member>
        <member name="F:netDxf.Units.FractionFormatType.NotStacked">
            <summary>
            Not stacked (for example, 1/2).
            </summary>
        </member>
        <member name="T:netDxf.Units.ImageResolutionUnits">
            <summary>
            Defines the image resolution units.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageResolutionUnits.Unitless">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageResolutionUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageResolutionUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="T:netDxf.Units.ImageUnits">
            <summary>
            AutoCAD units for inserting images.
            </summary>
            <remarks>
            This is what one AutoCAD unit is equal to for the purpose of inserting and scaling images with an associated resolution.
            </remarks>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Unitless">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="T:netDxf.Units.LinearUnitFormat">
            <summary>
            Utility methods to format a decimal number to its different string representations.
            </summary>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToScientific(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its scientific string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in scientific units.</returns>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToDecimal(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its decimal string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in decimal units.</returns>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToArchitectural(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its feet and fractional inches string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in feet and fractional inches.</returns>
            <remarks>The Architectural format assumes that each drawing unit represents one inch.</remarks>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToEngineering(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its feet and decimal inches string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in feet and decimal inches.</returns>
            <remarks>The Engineering format assumes that each drawing unit represents one inch.</remarks>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToFractional(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its fractional string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in fractional units.</returns>
        </member>
        <member name="T:netDxf.Units.LinearUnitType">
            <summary>
            Linear units format for creating objects.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Scientific">
            <summary>
            Scientific.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Engineering">
            <summary>
            Engineering.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Architectural">
            <summary>
            Architectural.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Fractional">
            <summary>
            Fractional.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.WindowsDesktop">
            <summary>
            Microsoft Windows Desktop (decimal format using Control Panel settings for decimal separator and number grouping symbols).
            </summary>
        </member>
        <member name="T:netDxf.Units.UnitHelper">
            <summary>
            Helper methods for unit conversion.
            </summary>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConvertUnit(System.Double,netDxf.Units.DrawingUnits,netDxf.Units.DrawingUnits)">
            <summary>
            Converts a value from one drawing unit to another.
            </summary>
            <param name="value">Number to convert.</param>
            <param name="from">Original drawing units.</param>
            <param name="to">Destination drawing units.</param>
            <returns>The converted value to the new drawing units.</returns>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConversionFactor(netDxf.Units.DrawingUnits,netDxf.Units.DrawingUnits)">
            <summary>
            Gets the conversion factor between drawing units.
            </summary>
            <param name="from">Original drawing units.</param>
            <param name="to">Destination drawing units.</param>
            <returns>The conversion factor between the drawing units.</returns>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConversionFactor(netDxf.Units.ImageUnits,netDxf.Units.DrawingUnits)">
            <summary>
            Gets the conversion factor between image and drawing units.
            </summary>
            <param name="from">Original image units.</param>
            <param name="to">Destination drawing units.</param>
            <returns>The conversion factor between the units.</returns>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConversionFactor(netDxf.Units.DrawingUnits,netDxf.Units.ImageUnits)">
            <summary>
            Gets the conversion factor between units.
            </summary>
            <param name="from">Original value units.</param>
            <param name="to">Destination value units.</param>
            <returns>The conversion factor between the passed units.</returns>
        </member>
        <member name="T:netDxf.Units.UnitStyleFormat">
            <summary>
            Represents the parameters to convert linear and angular units to its string representation.
            </summary>
        </member>
        <member name="M:netDxf.Units.UnitStyleFormat.#ctor">
            <summary>
            Initializes a new instance of the <c>UnitStyleFormat</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.LinearDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for linear units.
            </summary>
            <remarks>
            For architectural and fractional the precision used for the minimum fraction is 1/2^LinearDecimalPlaces.
            </remarks>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.AngularDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for angular units.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.DecimalSeparator">
            <summary>
            Gets or set the decimal separator.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FeetInchesSeparator">
            <summary>
            Gets or sets the separator between feet and inches.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.DegreesSymbol">
            <summary>
            Gets or set the angle degrees symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.MinutesSymbol">
            <summary>
            Gets or set the angle minutes symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SecondsSymbol">
            <summary>
            Gets or set the angle seconds symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.RadiansSymbol">
            <summary>
            Gets or set the angle radians symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.GradiansSymbol">
            <summary>
            Gets or set the angle gradians symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FeetSymbol">
            <summary>
            Gets or set the feet symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.InchesSymbol">
            <summary>
            Gets or set the inches symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FractionHeightScale">
            <summary>
            Gets or sets the scale of fractions relative to dimension text height.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FractionType">
            <summary>
            Gets or sets the fraction format for architectural or fractional units.
            </summary>
            <remarks>
            Horizontal stacking<br/>
            Diagonal stacking<br/>
            Not stacked (for example, 1/2)
            </remarks>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressAngularLeadingZeros">
            <summary>
            Suppresses leading zeros in angular decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressAngularTrailingZeros">
            <summary>
            Suppresses trailing zeros in angular decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural dimensions.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural dimensions.
            </summary>
        </member>
        <member name="T:netDxf.Vector2">
            <summary>
            Represent a two component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="value">X, Y component.</param>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="array">Array of two elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector2.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.NaN">
            <summary>
            Represents a vector with not a number components.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="P:netDxf.Vector2.IsNormalized">
            <summary>
            Gets if the vector has been normalized.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.IsNaN(netDxf.Vector2)">
            <summary>
            Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="u">Vector2.</param>
            <returns>Returns true if any component of the specified vector evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.IsZero(netDxf.Vector2)">
            <summary>
             Returns a value indicating if all components of the specified vector evaluates to zero.
            </summary>
            <param name="u">Vector2.</param>
            <returns>Returns true if all components of the specified vector evaluates to zero; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:netDxf.Vector2.Perpendicular(netDxf.Vector2)">
            <summary>
            Obtains the counter clockwise perpendicular vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The perpendicular vector.</returns>
        </member>
        <member name="M:netDxf.Vector2.Rotate(netDxf.Vector2,System.Double)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <param name="angle">Rotation angles in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Obtains the polar point of another point. 
            </summary>
            <param name="u">Reference point.</param>
            <param name="distance">Distance from point u.</param>
            <param name="angle">Angle in radians.</param>
            <returns>The polar point of the specified point.</returns>
        </member>
        <member name="M:netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2)">
            <summary>
            Obtains the angle of a vector.
            </summary>
            <param name="u">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle of a line defined by two points.
            </summary>
            <param name="u">A Vector2.</param>
            <param name="v">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.AngleBetween(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Round(netDxf.Vector2,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector2.</param>
            <param name="numDigits">Number of decimal places in the return value.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize(netDxf.Vector2)">
            <summary>
            Normalizes the vector.
            </summary>
            <param name="u">Vector to normalize</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Add(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Subtract(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.Negate(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multiplies a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multiplies a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multiplies a scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multiplies a scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Multiply(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.Divide(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Divide(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector2.</param>
            <param name="b">Vector2.</param>
            <returns>True if the two components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector2.</param>
            <param name="b">Vector2.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the two components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="other">Another Vector2 to compare to.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="other">Another Vector2 to compare to.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Vector3">
            <summary>
            Represent a three component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="value">X, Y, Z component.</param>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="array">Array of three elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector3.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.NaN">
            <summary>
            Represents a vector with not a number components.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="P:netDxf.Vector3.IsNormalized">
            <summary>
            Gets if the vector has been normalized.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.IsNaN(netDxf.Vector3)">
            <summary>
             Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="u">Vector3.</param>
            <returns>Returns true if any component of the specified vector evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.IsZero(netDxf.Vector3)">
            <summary>
             Returns a value indicating if all components of the specified vector evaluates to zero.
            </summary>
            <param name="u">Vector3.</param>
            <returns>Returns true if all components of the specified vector evaluates to zero; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.DotProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector3.CrossProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:netDxf.Vector3.Distance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.SquareDistance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.AngleBetween(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector3.RotateAroundAxis(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Rotate given vector around the specified axis.
            </summary>
            <param name="v">Vector to rotate.</param>
            <param name="axis">Rotation axis.</param>
            <param name="angle">Rotation angle in radians.</param>        
            <returns>The rotated vector.</returns>
            <remarks>Method provided by: Idelana. Original Author: Paul Bourke ( http://paulbourke.net/geometry/rotate/ )</remarks>
        </member>
        <member name="M:netDxf.Vector3.MidPoint(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Round(netDxf.Vector3,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector to round.</param>
            <param name="numDigits">Number of decimal places in the return value.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize(netDxf.Vector3)">
            <summary>
            Normalizes the vector.
            </summary>
            <param name="u">Vector to normalize</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Equality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Inequality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Addition(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Add(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Subtraction(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Subtract(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_UnaryNegation(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.Negate(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Multiply(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,System.Double)">
            <summary>
            Divides an scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.Divide(netDxf.Vector3,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Divide(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize">
            <summary>
            Normalizes the current vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector3.</param>
            <param name="b">Vector3.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector3.</param>
            <param name="b">Vector3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector3.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Vector4">
            <summary>
            Represent a four component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
            <param name="w">W component.</param>
        </member>
        <member name="M:netDxf.Vector4.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="array">Array of four elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector4.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitW">
            <summary>
            Unit W vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.NaN">
            <summary>
            Represents a vector with not a number components.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.W">
            <summary>
            Gets or sets the W component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="P:netDxf.Vector4.IsNormalized">
            <summary>
            Gets if the vector has been normalized.
            </summary>
        </member>
        <member name="M:netDxf.Vector4.IsNaN(netDxf.Vector4)">
            <summary>
             Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="u">Vector4.</param>
            <returns>Returns true if any component of the specified vector evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector4.IsZero(netDxf.Vector4)">
            <summary>
             Returns a value indicating if all components of the specified vector evaluates to zero.
            </summary>
            <param name="u">Vector4.</param>
            <returns>Returns true if all components of the specified vector evaluates to zero; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector4.DotProduct(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector4.Distance(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:netDxf.Vector4.SquareDistance(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector4.Round(netDxf.Vector4,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector to round.</param>
            <param name="numDigits">Number of decimal places in the return value.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:netDxf.Vector4.Normalize(netDxf.Vector4)">
            <summary>
            Normalizes the vector.
            </summary>
            <param name="u">Vector to normalize</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Equality(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Inequality(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>True if the three components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Addition(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Add(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Subtraction(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Subtract(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_UnaryNegation(netDxf.Vector4)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector4.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector4.Negate(netDxf.Vector4)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector4.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Multiply(netDxf.Vector4,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector4.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.Multiply(netDxf.Vector4,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector4.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Multiply(System.Double,netDxf.Vector4)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector4.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.Multiply(System.Double,netDxf.Vector4)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector4.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Multiply(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Multiply(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Division(netDxf.Vector4,System.Double)">
            <summary>
            Divides an scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector4.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.Divide(netDxf.Vector4,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector4.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Division(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Divide(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Normalize">
            <summary>
            Normalizes the current vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector4.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector4.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector4.</param>
            <param name="b">Vector4.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector4.</param>
            <param name="b">Vector4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector4.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector4.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.XData">
            <summary>
            Represents the extended data information.
            </summary>
            <remarks>
            Do not store your own data under the ACAD application registry it is used by some entities to store special data,
            it might be overwritten when the file is saved. Instead, create a new application registry and store your data there.
            </remarks>
        </member>
        <member name="M:netDxf.XData.#ctor(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Initialize a new instance of the <c>XData</c> class .
            </summary>
            <param name="appReg">Name of the application associated with the list of extended data records.</param>
        </member>
        <member name="P:netDxf.XData.ApplicationRegistry">
            <summary>
            Gets or sets the name of the application associated with the list of extended data records.
            </summary>
        </member>
        <member name="P:netDxf.XData.XDataRecord">
            <summary>
            Gets or sets the list of extended data records.
            </summary>
            <remarks>
            This list cannot contain a XDataRecord with a XDataCode of AppReg, this code is reserved to register the name of the application.
            Any record with this code will be omitted.
            </remarks>
        </member>
        <member name="M:netDxf.XData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.XData.Clone">
            <summary>
            Creates a new XData that is a copy of the current instance.
            </summary>
            <returns>A new XData that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.XDataCode">
            <summary>
            Defines the extended data code.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.String">
            <summary>
            Strings in extended data can be up to 255 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.AppReg">
            <summary>
            Application names can be up to 31 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ControlString">
            <summary>
            An extended data control string can be either “{” or “}”.
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.LayerName">
            <summary>
            Name of the layer associated with the extended data
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.BinaryData">
            <summary>
            Binary data is organized into variable-length chunks.
            The maximum length of each chunk is 127 bytes.
            The binary data is represented as a string of hexadecimal digits, two per binary byte.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.DatabaseHandle">
            <summary>
            Handles of entities in the drawing database.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealX">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealY">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealZ">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionX">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionY">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionZ">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementX">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementY">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementZ">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionX">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionY">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionZ">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Real">
            <summary>
            A real value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Distance">
            <summary>
            A real value that is scaled along with the parent entity
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ScaleFactor">
            <summary>
            Also a real value that is scaled along with the parent.
            The difference between a distance and a scale factor is application-defined
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Int16">
            <summary>
            A 16-bit integer (signed or unsigned).
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Int32">
            <summary>
            A 32-bit signed integer.
            </summary>
        </member>
        <member name="T:netDxf.XDataRecord">
            <summary>
            Represents an entry in the extended data of an entity.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.OpenControlString">
            <summary>
            An extended data control string can be either "{"or "}".
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.CloseControlString">
            <summary>
            An extended data control string can be either "{" or "}".
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested.
            </summary>
        </member>
        <member name="M:netDxf.XDataRecord.#ctor(netDxf.XDataCode,System.Object)">
            <summary>
            Initializes a new XDataRecord.
            </summary>
            <param name="code">XData code.</param>
            <param name="value">XData value.</param>
        </member>
        <member name="P:netDxf.XDataRecord.Code">
            <summary>
            Gets the XData code.
            </summary>
            <remarks>The only valid values are the ones defined in the <see cref="T:netDxf.XDataCode">XDataCode</see> class.</remarks>
        </member>
        <member name="P:netDxf.XDataRecord.Value">
            <summary>
            Gets the XData value.
            </summary>
        </member>
        <member name="M:netDxf.XDataRecord.ToString">
            <summary>
            Obtains a string that represents the XDataRecord.
            </summary>
            <returns>A string text.</returns>
        </member>
    </members>
</doc>
